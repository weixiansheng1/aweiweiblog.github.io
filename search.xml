<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tiktok逻辑</title>
      <link href="/2023/10/02/Tiktok%E9%80%BB%E8%BE%91/"/>
      <url>/2023/10/02/Tiktok%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="✍tiktok五大底层逻辑"><a href="#✍tiktok五大底层逻辑" class="headerlink" title="✍tiktok五大底层逻辑"></a>✍tiktok五大底层逻辑</h2><pre class="mermaid">graph LR            f1_帝((五大底层逻辑))        a1[归属地优先原则]-->b1[注册后无法修改]    a1 --> b2[决定地域流量]        a2[粉丝与播放量]-->|新号无粉|b3[每作品300到500播放量]    a2-->|有粉|b4[每作品300到500播放量]    b4-->c1[部分基础播放给粉丝]-->d1[点赞 完播率 互动概率高]    b4-->c2[部分给相应的类似标签用户]-->d2[精准推送]    a3[短视频流量池阶梯]    a4[哪些数据能够帮助短视频突破更大的流量池]-->b5[完播率和重复观看]-->c3[能帮平台留住用户多少时间]    a4-->b6[完播率的二次提升]-->c4[将最吸引人的文案放在视频最前面 用配音形式展示]    b6-->c5[将这个视频能给用户带来的价值在开头一句话展现]    b6-->c6[将有价值的信息干货做成一张图片放在最后]    b6-->c7[将视频内容总结成几个点 并在开始时强调最后一个最重要]    a4-->b7[技巧只是锦上添花 内容力才是决定性]    a5[视频的延时引爆]-->b8[账号定位和推送人群不精准 导致作品未触发推送到下一个流量池]    f1_帝--> a1    f1_帝--> a2    f1_帝--> a3    f1_帝--> a4    f1_帝--> a5</pre><h2 id="tiktok-起号阶段"><a href="#tiktok-起号阶段" class="headerlink" title="tiktok 起号阶段"></a>tiktok 起号阶段</h2><h3 id="黑洞期的原因和时长"><a href="#黑洞期的原因和时长" class="headerlink" title="黑洞期的原因和时长"></a>黑洞期的原因和时长</h3><h4 id="为什么会有黑洞期"><a href="#为什么会有黑洞期" class="headerlink" title="为什么会有黑洞期"></a>为什么会有黑洞期</h4><ul><li><p>新号期间，tiktok是不认识你的，不知道从这么多用户中挑选哪些推荐：<br>  建模方法：不断发好的作品，加上合适的文案标签</p></li><li><p>黑洞期时间：<br>1.宠物类、搞笑类等泛类别作品：黑洞期较短–&gt;变现价值小，变现路径长<br>2.明显的卖货型商家：黑洞期较长（建模期长）–&gt;商业变现价值大，闭环路径直接</p></li><li><p>影响黑洞期的时长因素：关注账号的用户画像<br>3.短视频的更新频率和数量。每个作品筛选部份精准用户，样本数量足够时建模完成。【策略】尽量多点产出内容素材，加快样本量的积累，更快推动建模过程。同样的内容每天更新一条和每天更新两条的效果差别还是特别大的。<br>4.内容质量和体系性。内容质量吸引用户，内容的体系性要紧扣用户画像、产品和商业模式。</p></li></ul><h3 id="如何更好的度过黑洞期"><a href="#如何更好的度过黑洞期" class="headerlink" title="如何更好的度过黑洞期"></a>如何更好的度过黑洞期</h3><h4 id="一-给帐号打上标签：明确目标用户画像，对应的垂直品类、泛垂直类标签【注意】商家一定要清楚用户画像"><a href="#一-给帐号打上标签：明确目标用户画像，对应的垂直品类、泛垂直类标签【注意】商家一定要清楚用户画像" class="headerlink" title="一.给帐号打上标签：明确目标用户画像，对应的垂直品类、泛垂直类标签【注意】商家一定要清楚用户画像"></a>一.给帐号打上标签：明确目标用户画像，对应的垂直品类、泛垂直类标签【注意】商家一定要清楚用户画像</h4><p>五种打标签的方法：<br>1.账号和简介，越简单明确越好<br>2.视频画面和文案的匹配要清晰精准。匹配画面相符的文案和话题标签，不断重复加深。<br>3.根据我们设定的目标用户画像的兴趣来设置内容。挖掘用户兴趣点，并体现在每一条视频刀第一句话中以快速圈粉。<br>4.想尽办法让标签精准的用户完成购买行为。购买行为是给帐号打上标签的重要途径，比点赞关注的权重更高，因此小黄车的第一批用户标签十分重要，一定要想方设法引导标签准确的用户购买，以过滤掉不准确的人群。<br>5.使用Promote(抖+)付费流量助推。可以自定义标签人群，投放效果好则账号的权重也会提升。<br>如果投放效果不好，一定要回头检查自己的问题：用户画像偏差？内容力不够强？</p><h4 id="二-反向标签的避免与修正"><a href="#二-反向标签的避免与修正" class="headerlink" title="二.反向标签的避免与修正"></a>二.反向标签的避免与修正</h4><p>【2坑】”男性朋友也可以送女友或老婆”等，起号阶段一定要避免不精准的人群涌入。因为tiktok会误认为非目标用户会喜欢，进而降低更加重要的完播率和其他数据，后台又会判定我的内容不好，因此陷入恶性循环。</p><h4 id="三-三大坚持：坚持培养网感、坚持更新内容、坚持优化内容"><a href="#三-三大坚持：坚持培养网感、坚持更新内容、坚持优化内容" class="headerlink" title="三.三大坚持：坚持培养网感、坚持更新内容、坚持优化内容"></a>三.三大坚持：坚持培养网感、坚持更新内容、坚持优化内容</h4><p>坚持熬过黑洞期，大部分人没有熬过黑洞期就放弃了，非常可惜。一定要够坚持一年，让子弹飞一会。</p><h3 id="启号阶段的更新策略"><a href="#启号阶段的更新策略" class="headerlink" title="启号阶段的更新策略"></a>启号阶段的更新策略</h3><h4 id="1-视频发布时间与更新频率："><a href="#1-视频发布时间与更新频率：" class="headerlink" title="1.视频发布时间与更新频率："></a>1.视频发布时间与更新频率：</h4><p>【时间】参考目标市场的黄金时间，换算成中国时间。<br>【更新频率】根据内容产能制定更新策略（2至3条），确定一个固定的更新时间，时间的一致性会让你的分析养成习惯，知道每到这个时候你都账号就会有新的内容更新，帮助我们占领用户心智，同时建立品牌力。</p><h4 id="2-评定视频内容等级，投入不同的资源"><a href="#2-评定视频内容等级，投入不同的资源" class="headerlink" title="2.评定视频内容等级，投入不同的资源:"></a>2.评定视频内容等级，投入不同的资源:</h4><pre class="mermaid">graph LRa[每天2个视频]-->a1[每周14个视频]-->b1[筛选满意度]a1-->b2[成本]a1-->b3[视频发布后72小时数据]b1-->c1[筛选2到3条视频进行付费投流]-->|员工加鸡腿|d1[百万播放量]b2-->c1b3-->c1</pre><h2 id="获得Tiktok巨大流量"><a href="#获得Tiktok巨大流量" class="headerlink" title="获得Tiktok巨大流量"></a>获得Tiktok巨大流量</h2><p>会“搞流量”是一个非常强的本事，但“搞流量”不是终点。流量只是让客户掏钱买单之前需要走的一个环节，但是不能为了流量而脱离我们的成交闭环，否则会踩大坑。“搞流量”的同时，要记住流量只是手段，不是目的。</p><h4 id="【第3坑】为了“搞流量”而偏离商业模式："><a href="#【第3坑】为了“搞流量”而偏离商业模式：" class="headerlink" title="【第3坑】为了“搞流量”而偏离商业模式："></a>【第3坑】为了“搞流量”而偏离商业模式：</h4><p>什么火发什么内容，难免会脱离原有的商业模式和粉丝画像，给我们造成虚假繁荣的景象。点赞、评论一大堆，却很难变现出单。账号一旦脱离了原有的商业模式，标签混乱，或者打上一些“反向标签”，想再修正回来，花费的时间精力会比给新账号打标签更多，更加浪费时间成本、机会成本和金钱成本。</p><p>做流量一定要紧扣商业模式，紧紧围绕着商业模式对应的精准粉丝群体，切忌为了虚假繁荣的流量而偏离商业模式，得不偿失。</p><h4 id="【第4坑】内容力不够，拿付费流量来凑"><a href="#【第4坑】内容力不够，拿付费流量来凑" class="headerlink" title="【第4坑】内容力不够，拿付费流量来凑"></a>【第4坑】内容力不够，拿付费流量来凑</h4><p>TikTok平台最需要的是用好的内容来留住用户，提升用户在TikTok上的停留时长，所以它会不断地根据用户的喜好推送内容，以此来留住用户，让用户不知不觉地沉迷其中。</p><p>但如果你的内容质量很差，用户不愿意看，你却专门花钱让用户来看，这对于TikTok来说意味着什么？意味着它收了你的钱，却损害了2000个用户的体验（假设你花了10美元买了2000个观看量）。用户很可能因为看了你的内容觉得没意思，就退出了TikTok这个App，跑去玩照片墙或者脸书，这对于TikTok来说损失就太大了。</p><p>TikTok收了我们的广告费，是以损害用户体验作为代价的，无法形成双赢的效果。它一定不会在付费购买流量之外再多推一个用户观看，并且我的账户还会因为内容差而降低权重。</p><p>付费流量应该是助推燃料，在内容好的基础上进行付费流量助推，才能得到双赢的结果。我们花钱买观看量，用户看了之后喜欢、点赞、收藏、点关注，拉长了用户停留时长，帮助TikTok提升了用户体验，这才是双赢。</p><h4 id="【第5坑】买粉买赞"><a href="#【第5坑】买粉买赞" class="headerlink" title="【第5坑】买粉买赞"></a>【第5坑】买粉买赞</h4><p>1.买的粉是随机粉，会一下子搞乱我们的用户标签，让TikTok在为我们推荐流量时不知道该如何推荐，又回到了最初的随机流量，这个“黑洞期”永远过不去。<br>2.TikTok会将我们新发布的视频作品推荐给一部分粉丝，如果买的假粉丝刷到了我们的作品却没有真实观看和停留，又或者这些假粉丝都是机器号，TikTok后台会判定这条作品粉丝的观看率很低，观看时长也很短。后果就是：要么被认定这个作品内容很差，连粉丝都不愿意看；要么是你的粉丝有问题，可能是刷出来的。无论是哪一种，都会被降权或者处罚。</p><h4 id="【第6坑】为了涨粉疯狂关注别人引起回关"><a href="#【第6坑】为了涨粉疯狂关注别人引起回关" class="headerlink" title="【第6坑】为了涨粉疯狂关注别人引起回关"></a>【第6坑】为了涨粉疯狂关注别人引起回关</h4><p>1.【粉丝标签问题】互关来的粉丝一般都不精准，这样会乱了自己的用户标签。如果你有十足的把握，关注的全部都是标签精准的人，但是让这些人出于礼尚往来而回关，还不如通过好的内容去引起这部分人的关注。<br>2.【推荐机制的问题】在TikTok后台算法中，“粉丝”和“朋友”的权重是不一样的。粉丝指的是单向关注我的这部分人，而朋友指的是我们互相关注的这部分人。朋友观看我的视频，完播和点赞的权重比粉丝更低，因为会有“人情分”在里面；而粉丝的完播和点赞更能说明作品本身很好。</p><p>所以用这样的方式吸引来的粉丝，并不会帮我们从根本上提升账号的流量和权重。有这个时间、精力，不如多研究、打磨，提升自己的内容力，这才是核心能力。</p><h4 id="【第7坑】搬运他人的作品到自己的账号"><a href="#【第7坑】搬运他人的作品到自己的账号" class="headerlink" title="【第7坑】搬运他人的作品到自己的账号"></a>【第7坑】搬运他人的作品到自己的账号</h4><p>搬运国内火过的视频到国外，这是早期一波做TikTok人的做法，我最早做TikTok时也用这样的方法获得过很多流量。但是很快，我就不再用了。<br>1.我们侵犯了原作者的权利，用这样损人利己的方式获得的流量和利益，内心无法得到真正的成就感和内啡肽。<br>2.会受限于原作者的“产量”<br>3.很有可能会遇到这条视频已经被别人抢先搬运了的情况。如果你没有做好二次剪辑，TikTok平台就会“查重”你的作品而判定违规。作品是零播放不说，多几次这样的情况，你的账号一定会被降权或者封号，这些时间就白搭了。<br>4.侵权赔偿原作者。现在国内越来越多的创作者也学会了TikTok的玩法，希望将自己原创的作品同时发布到TikTok上吸引国外用户的关注。当原作者发现，居然有人将自己的作品搬运到TikTok上，他一定会为自己维权。只要平台查证属实，轻则封号，重则原作者会主张让你赔偿损失。我们不仅什么都得不到，还会面临赔偿的风险。</p><p>有一招奏效这种事，健康的流量都是靠一点一滴积累而来的。这五个坑，都是披着糖果外衣的，诱惑着我们。我都走了一遍之后，发现所有的捷径都是有代价的。走捷径的代价，往往比踏踏实实做好自己的成本更高。今天我在这里将无数“先驱”（包括我自己）踩过的坑都解析了一遍，希望你不会中了流量的“毒”。</p><h4 id="【对于“有毒”的流量，我们不仅不能去获得，还要在自己认真做账号的同时将它们手动清理掉。】"><a href="#【对于“有毒”的流量，我们不仅不能去获得，还要在自己认真做账号的同时将它们手动清理掉。】" class="headerlink" title="【对于“有毒”的流量，我们不仅不能去获得，还要在自己认真做账号的同时将它们手动清理掉。】"></a>【对于“有毒”的流量，我们不仅不能去获得，还要在自己认真做账号的同时将它们手动清理掉。】</h4><h3 id="短视频超级滚雪球模型"><a href="#短视频超级滚雪球模型" class="headerlink" title="短视频超级滚雪球模型"></a>短视频超级滚雪球模型</h3><p>五个核心要素：地基、路线、内核、黏性、坡度。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230913120115.png"></p><h4 id="地基：健康的账号状态"><a href="#地基：健康的账号状态" class="headerlink" title="地基：健康的账号状态"></a>地基：健康的账号状态</h4><h5 id="1-尽可能多的了解tiktok的平台规则"><a href="#1-尽可能多的了解tiktok的平台规则" class="headerlink" title="1.尽可能多的了解tiktok的平台规则"></a>1.尽可能多的了解tiktok的平台规则</h5><h5 id="2-不留神就可能出现的几种违规行为"><a href="#2-不留神就可能出现的几种违规行为" class="headerlink" title="2.不留神就可能出现的几种违规行为"></a>2.不留神就可能出现的几种违规行为</h5><p>第一种情况：【第8坑】TikTok的下载安装运行的方式错误，导致被系统后台识别出异常；<br>第二种情况：【第9坑】在使用供应商提供的产品展示视频时没有做剪辑处理，也没有发现已经有其他账号在TikTok发布过同样的视频，被系统查重；<br>第三种情况：【第10坑】在剪辑视频时使用了TikTok没有版权的音乐，被系统判定音乐版权侵权。</p><p>避免上述问题，让账号处在正常和健康的状态，就不会在“地基”的层面为我们获得流量造成阻碍，也不会因为受到平台处罚而前功尽弃。</p><h4 id="“滚雪球”的路线：正确的账号标签"><a href="#“滚雪球”的路线：正确的账号标签" class="headerlink" title="“滚雪球”的路线：正确的账号标签"></a>“滚雪球”的路线：正确的账号标签</h4><p>如果账号的标签不正确，就相当于将你的“雪球”放在草坪上、沙漠上，没有白雪，就算沾上了青草和沙土，也没办法越滚越大，还会弄脏“雪球”。</p><h6 id="如何判断你的账号是否已经成功地打上了标签："><a href="#如何判断你的账号是否已经成功地打上了标签：" class="headerlink" title="如何判断你的账号是否已经成功地打上了标签："></a>如何判断你的账号是否已经成功地打上了标签：</h6><p>用一个新的账号进入你的账号主页，点击“关注”，这时下面会出现一排“建议关注的同类型账号”。如果下面出现的账号与你的账号类型相同，说明账号的内容标签已经成功地被TikTok后台系统识别，并打上标签了。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230913131553.png"></p><h4 id="“雪球”的内核：能给用户提供的价值"><a href="#“雪球”的内核：能给用户提供的价值" class="headerlink" title="“雪球”的内核：能给用户提供的价值"></a>“雪球”的内核：能给用户提供的价值</h4><p>内核，是我们能捏一个成形的小“雪球”必不可少的力量，在TikTok中，就是这个账号或者视频能给用户带来的价值。如果你的视频没有任何价值，“雪”就是散的，没办法凝聚成“球”，更没办法越滚越大。</p><pre class="mermaid">graph LR    %% s=start  e=end  f= fork n=normal         %% 虚线    f1_帝((tiktok账号给用户带来的价值))        %% 分支点     f1_帝--> f2[情绪价值]    f2-->|最想要的价值| d1[娱乐消遣]    d1-->c1[开心]    d1-->c2[轻松]    d1-->c3[解压]    d1-->c4[刺激]    d1-->c5[过瘾]    d1-->c6[愉悦]    d1-->c7[悲伤]    d1-->c8[紧张]    d1-->c9[赏心悦目]    d1-->c10[温暖 治愈]        f1_帝--> f3[社交价值]    f3-->d2[认识有意思的博主]    f3-->d3[向上社交]    f1_帝--> f4[导购价值]    f5-->|满足好物 购物需求|d4[分享好物]        f1_帝--> f5[学习价值]    f5-->d5[分享各类知识和技能]    f1_帝--> f6[以上这四个价值可以组合使用 比如商家最常用的组合是 导购价值加情绪价值]</pre><h4 id="“雪球”的黏性：优质内容"><a href="#“雪球”的黏性：优质内容" class="headerlink" title="“雪球”的黏性：优质内容"></a>“雪球”的黏性：优质内容</h4><pre class="mermaid">graph LRa1((提升内容质量的方法))a1-->b1[参考对标账号和视频]-->c1[细致拆分]-->d1[总结可以复制的部分]-->e1[结合自己的产品做内容]b1-->c2[最火话题]-->d2[跟产品主线内容产生关系]-->e2[不要硬拉关系 容易让账号标签错乱]b1-->c3[Tiktok希望尽可能提升用户的使用时长并不断优化推荐算法]-->d3[清楚平台期望的内容]a1-->b2[优化视频画面]-->c4[吸引人的画面]-->d4[画质 清晰度 色彩度 比例]b2-->|最重要|b3[视频前两秒]-->c5[开头给出最惊艳的产品画面]-->d5[从制作好的视频里挑出觉得最棒的2到3秒]b2-->c6[好好利用视频结尾画面]-->d6[峰终定律]-->e3[结尾用一句话戳中用户爽点引起共鸣的话]a1-->b4[严选音乐和音效]-->c7[音乐]-->d7[不能侵权]-->e4[侵权会影响播放量 降低账号权重 无法投放付费流量]c6-->d8[使用当下Tiktok最火的热门音乐提升视频的播放量]b4-->|情绪价值|c8[音效]-->d9[撕开标签的声音  拉拉链的声音 用指甲敲打物品的声音等]c7-->d10[搞笑 整蛊 惊喜 窘迫等等 可以放大视频效果]a1-->b5[巧用流量产品]-->e5[测试流量]-->f1[选出1 2 3级力量产品]-->g1[八成流量款 加 二成新款 测试新款给出复购理由]</pre><h4 id="“滚雪球”的坡度：好的付费流量策略"><a href="#“滚雪球”的坡度：好的付费流量策略" class="headerlink" title="“滚雪球”的坡度：好的付费流量策略"></a>“滚雪球”的坡度：好的付费流量策略</h4><p>付费流量就是用杠杆撬起来的坡度，让“雪球”在一个稳固的地基、正确的路线、强大的内核、优质的黏性的基础上，从一个有坡度的山上往下滚，为我们将“雪球”迅速变大起到“重力加速度”的助推作用。<br>用付费流量的杠杆加速我们积累正确标签，再将视频推向更大的流量池。</p><p>深刻理解这个模型，并一个个落实在自己的TikTok账号上，不断复盘，不断优化，然后就可以静待花开，等待巨大流量的来临了。</p><h3 id="获得TikTok巨大流量的五大升级组合拳"><a href="#获得TikTok巨大流量的五大升级组合拳" class="headerlink" title="获得TikTok巨大流量的五大升级组合拳"></a>获得TikTok巨大流量的五大升级组合拳</h3><p><font color="#ff0000">“搞流量”的大招，每一招用好了都能有事半功倍的效果。但用之前有一个重要前提：需要在你的账号“短视频超级滚雪球”模型已经建立起来，并且是在能够游刃有余运用的前提下，才能发挥奇效。如果没有建立和运用好“短视频超级滚雪球”模型，甚至连账号的“黑洞期”都没过，这些大招的效果就会大打折扣，也会浪费你的时间，挫伤你的积极性。</font></p><h4 id="第一招：发起作品挑战"><a href="#第一招：发起作品挑战" class="headerlink" title="第一招：发起作品挑战"></a>第一招：发起作品挑战</h4><p>TikTok里面搜索“挑战”，能看到很多博主和商家给出过的有意思的挑战任务，并且设置了挑战期限、成功的判定标准以及成功之后的奖励。这种任务会吸引自己的粉丝和新的用户参与进来，提升视频的完播率、互动率等数据，将视频推向更大的流量池，还能因此增加很多粉丝<br>【注意】<br>1.设置的挑战要与自己的产品或者内容有关联，比如卖泳装的发起泳装挑战，吸引标签正确的人群<br>2.设置的挑战需要控制微妙的难度系数：不能是太简单的，没有挑战的感觉；也不能是太难的，没人会愿意尝试。要将这个度控制在努努力有希望达到，但又不会是太多人能达到的区间。这样用户愿意参与，达成挑战之后会有一种荣誉感，也愿意将这样的成就分享给自己身边的人。因为我们愿意分享的不是别人的产品，而是自己的高光时刻。<br>3.设置挑战时需要给出一个有诱惑力的奖励，让大家有很强的动力去争取这个奖励。对于商家来说，最好挑选既独特，成本又不高的东西作为奖励。比如：如果你成功完成挑战，我们将把你最美丽的样子刻在这条纯银项链上，并加上“××挑战成功”的字样送给你。</p><p>定制类的产品同时具有产品的使用价值和情绪价值，更容易提升用户心中的价值感。</p><p>在有一定的粉丝基础的情况下，这样的挑战很容易引起用户通过UGC（用户产生内容）的方式帮助你拉数据，让TikTok判定你的作品很受欢迎，从而推给更多有相同兴趣的人，让你获得更多流量。</p><h4 id="第二招：借助相似达人的力量为自己引流"><a href="#第二招：借助相似达人的力量为自己引流" class="headerlink" title="第二招：借助相似达人的力量为自己引流"></a>第二招：借助相似达人的力量为自己引流</h4><p>对标账号还有另一个用处：用合理的办法引起该账号粉丝对自己的关注。</p><p>1.通过TikTok搜索与自己最相关的话题和标签，找到跟自己账号粉丝重合度高的作品，跟这个作品合拍。这样做不仅能告诉TikTok你跟这个达人的账号类型是一致的，你们的粉丝群体很像，从而强化你的标签，还能在对标达人的粉丝搜索这个达人的视频的时候，提升搜索到你的概率，因而再次获得曝光量。<br>2.多跟相似达人或者相似账号进行互动，引起他们的粉丝对你的账号的好感与关注。比如一条很火爆的视频，点开评论区找到一些有意思的评论，给他的评论点赞，并回复“你的评论太赞了！我也是这样觉得！”之类引起共鸣的话，对方有可能就会来到你的主页看看你的作品。但是这个方式做起来很费时间，如果没有很好的文案，在评论区互动就没有什么效果。所以这个方式仅仅作为一个补充方法，当其他的方式全部都做了之后如果还有时间，可以尝试。</p><h4 id="超级大招——giveaway（评论区抽奖）引爆流量"><a href="#超级大招——giveaway（评论区抽奖）引爆流量" class="headerlink" title="超级大招——giveaway（评论区抽奖）引爆流量"></a>超级大招——giveaway（评论区抽奖）引爆流量</h4><p>giveaway：给粉丝抽奖赠送奖品的活动<br>比如我是一个卖莫桑钻的商家，我发布一个活动公告：所有的粉丝（需要点关注），只要给这条作品点赞，并且@好友（或者转发），就有机会免费获得原价300美元的1克拉D色VVS1净度八心八箭切工的莫桑钻戒一枚，我会在符合条件的粉丝里面抽取一位，中奖之后仅需支付10美元邮费即可免费获得。但是giveaway可以持续好几天，等人气高了之后再开奖。</p><h5 id="为什么giveaway是一个超级大招？"><a href="#为什么giveaway是一个超级大招？" class="headerlink" title="为什么giveaway是一个超级大招？"></a>为什么giveaway是一个超级大招？</h5><p>第一，提升粉丝黏性。这对于一个已经有粉丝的账号来说，本来就有可以吸引客户的价值，比如好的内容、好的产品或者好的人设。在这个基础上再送福利，就会获得更高的好感度和粉丝黏性，粉丝的参与度也会很高。<br>第二，拉高各项数据，将作品推向更大的流量池，吸引新粉丝。我们在设置giveaway的时候通常会设置几个条件：点赞+关注+特定评论或者分享。这几个条件直接增加了我们视频的数据，同时也促进了参与者用他们的社交圈传播。我们可以同时触发两个强力增长机制：TikTok的流量池推荐机制+粉丝社群裂变机制，双核驱动流量增长。<br>第三，巧用giveaway可以将成本降到极低。我孵化的企业负责人和我的粉丝，都会在我为他们设计这个方案时问我一个问题：“给粉丝送礼物，这个成本会不会很高？是不是很难持续？”其实只要你理解了我之前讲的产品力的精髓，这个问题不但不会困扰你，反而会成为你可以持续使用的大招。<br>例子：赠送日常价80美元的莫桑钻戒指，其实我的成本是40元人民币。加上国际快递（7<del>14天）的费用30</del>40元人民币，即成本总共70元钱，约等于10美元。但你可以看一下我的领奖规则：“中奖之后仅需支付10美元邮费即可免费获得”，这个规则对于粉丝来说很能接受，因为美国的邮费日常就是10美元左右；对我来说更能接受，因为我的产品加运费的成本也是10美元左右。相当于我没有怎么花钱，就换来了这么多的曝光量，这么多的免费宣传，这么大的流量推动力。</p><p>免费，就是将免费商品的成本进行转移。</p><p>【Tips】给你一个公式，在设置你自己的giveaway活动时，参照这个公式来：关注+点赞+评论特定内容+转发&#x2F;分享&#x3D;获得抽奖的资格。</p><h4 id="第四招：TikTok的SEO（搜索引擎优化）"><a href="#第四招：TikTok的SEO（搜索引擎优化）" class="headerlink" title="第四招：TikTok的SEO（搜索引擎优化）"></a>第四招：TikTok的SEO（搜索引擎优化）</h4><p>TikTok的SEO需要我们在账号介绍、视频中的文案、发布视频时匹配的文案、话题这些部分反复添加，匹配我们用户画像的关键词，并且有意识地提升关键词密度。<br>同时，在与其他网红达人互动时，互相带着关键词进行转发互动，等等。<br>让TikTok平台认为在某个特定关键词下，你发的视频就是最好的内容。当用户搜索这些关键词的时候，你的作品就会被排在前面，同时用户也会因为你的作品排在前面而认为你的账号是有品牌力的，给你的产品更多的信任基础。</p><h4 id="第五招：TikTok矩阵账号"><a href="#第五招：TikTok矩阵账号" class="headerlink" title="第五招：TikTok矩阵账号"></a>第五招：TikTok矩阵账号</h4><p>当你将一个账号的商业闭环跑通，测算了MVP（最小化可行闭环），核算了成本利润率，也验证了产品和市场之后，如果认为这个路线已经被打磨好了，可以进行复制，然后则可以安排矩阵账号来扩大规模。</p><p>【矩阵账号两个注意事项】：<br>第一，一定是打磨和验证好闭环之后再做矩阵账号，如果没有跑通，或者产品测出来不行，则需要重新进行MVP测试，不能把矩阵账号当作雪中送炭拯救自己的药，它只适用于锦上添花。<br>第二，做矩阵账号不是将之前发布过的视频再发一遍，而是将你的产品赛道进行更精准的人群分类，然后每类账号做一个。比如说我有一个做魔术课程的账号，在跑通闭环之后做矩阵号，就是分人群来做的：约会魔术、亲子魔术、职业舞台魔术，分别用三个账号来做这三类人群不同的垂类账号，更利于账号打标签和成交转化。</p><h4 id="运营力的评判标准"><a href="#运营力的评判标准" class="headerlink" title="运营力的评判标准"></a>运营力的评判标准</h4><table><thead><tr><th align="center">分数</th><th align="center">程度</th><th align="center">符合情况</th></tr></thead><tbody><tr><td align="center">1分运营力</td><td align="center">有成交意识</td><td align="center">但不清楚自己TikTok项目的成交链路闭环</td></tr><tr><td align="center">2分运营力</td><td align="center">已经设定好项目的成交闭环，也初步跑通成交闭环</td><td align="center">但没有精细化运营</td></tr><tr><td align="center">3分运营力</td><td align="center">成熟地跑通成交闭环</td><td align="center">掌握并且能够运用上述“成交运营六步法”中的三种以上</td></tr><tr><td align="center">4分运营力</td><td align="center">拥有一个小有规模的运营团队</td><td align="center">并且规范化、流程化、精细化运营</td></tr><tr><td align="center">5分运营力</td><td align="center">拥有成熟稳定的运营团队</td><td align="center">精通“成交运营六步法”，有高转化成交率</td></tr></tbody></table><h3 id="TikTok直播带货"><a href="#TikTok直播带货" class="headerlink" title="TikTok直播带货"></a>TikTok直播带货</h3><p>1.如果你还没有选好产品，且你的前期资金投入比较有限，那就选择已经开放小黄车的地区。因为小黄车的直接成交转化率一定比其他方式更高，并且不需要花费太多的预算、人力和周期去建立独立站等成交的平台，直接在TikTok小店里面就能完成成交闭环。</p><p>2.如果你计划投入较多的预算，带领整个团队，愿意花费半年到一年的时间建立自己的品牌，除了TikTok也做多渠道营销，做一个可持续发展的品牌独立站，踏踏实实建立自己的品牌壁垒，那么就结合自己的独立站产品做好市场分析，做好全球的市场战略部署，并在对应的市场上布局TikTok视频带货和直播带货。</p><p>3.如果你已经确定选品，并且很执着地想卖这个产品，就结合市场数据来选择地区，并且要在TikTok上进行反复测试，再来选定区域。</p><p>4.结合TikTok的扶持政策来选定区域。TikTok在2022年相继给出了英国地区和东南亚地区的直播带货扶持政策，有的是针对所有品类，比如物流补贴；有的是针对特定品类，比如穆斯林服装等。我们选择做TikTok带货的区域，如果符合官方的扶持政策，当然会对项目的发展更有利。但是TikTok的政策变化调整很快，需要时时刻刻关注，保持学习和成长的心态，这样才能与平台同步，把项目做得更好。我也会要求自己和团队每周花时间去学习和了解TikTok的最新政策和动向，帮助我们随时做出最好的决策。</p><p>直播带货的区域没有选对，就像短视频运营没有选对目标市场一样，做起来阻力会更大，难以看到希望，最后坚持不下去。我遇到过很多学员，他们盲目地选择直播带货区域，没有整体思路，做到半路了才发现这些问题都没有解决，继续做也不行，放弃又可惜，卡在中间很为难。所以，这是一个很重要的前提。</p><h4 id="如何拥有TikTok账号的直播权限"><a href="#如何拥有TikTok账号的直播权限" class="headerlink" title="如何拥有TikTok账号的直播权限"></a>如何拥有TikTok账号的直播权限</h4><p>第一种：入驻TikTok Shop（小店），成为小店商家，即使是零粉的新账号也可以直接获得直播的功能，可以直接开播带货。<br>第二种：不开通小店，或者TikTok还没有在本地区开展小店服务的情况下，当账号拥有1000个粉丝，就会拥有直播功能。</p><h4 id="如何做好TikTok直播带货的准备"><a href="#如何做好TikTok直播带货的准备" class="headerlink" title="如何做好TikTok直播带货的准备"></a>如何做好TikTok直播带货的准备</h4><h4 id="1-直播间的场景搭建"><a href="#1-直播间的场景搭建" class="headerlink" title="1 直播间的场景搭建"></a>1 直播间的场景搭建</h4><p>真人出镜展示、手播（仅展示手拿着产品的画面，不露脸）、镜子播（既能够近距离展示产品细节，又能够在需要的时候展示主播使用产品的效果），等等。<br>根据产品的展示效果选择适合的直播形式，然后配置专业的灯光、收音麦克风等设备，再把直播间的背景布置、样品摆放的细节参考对标竞争对手进行调整，尽量优化画面效果。</p><h4 id="2-直播话术的准备"><a href="#2-直播话术的准备" class="headerlink" title="2 直播话术的准备"></a>2 直播话术的准备</h4><p>第一，抓住产品卖点。将产品卖点一个个提炼出来，只抓最重要的点：客户为什么要买？为什么买你的？为什么现在就要买？这个部分不需要太多，但是需要将它磨成一个个锋利而快准狠的“小飞刀”，每一刀都短小精悍，每一刀都能命中要害，切忌又臭又长。</p><p>第二，营造场景感。光是干巴巴地自卖自夸，会很单薄。加上场景感之后，就是“干湿结合”，能让客户快速想象出来自己使用上这个产品之后的画面感。有了画面感，想要成交就没那么难了。<br>比如在一个珠宝直播间说：“你戴上这套珠宝去参加前男友的婚礼，一定是全场最光彩夺目的那个人，比新娘更加耀眼。”这就是场景感，将自己的产品结合多个场景，让用户觉得直播间有意思，也愿意购买产品。</p><p>第三，主播的个人色彩。主播的人设定位有两种：打工人和老板。<br>可以直接以老板的身份来直播，这样会激发用户的社交需求，提升互动率，并且当“老板”给用户打折送福利的时候，也会显得非常真实。<br>不管是什么身份，主播都需要有一个专属的个人色彩，这个风格需要根据产品的用户画像来设置，最好是符合主流的正向价值观。<br>让用户认识你、熟悉你，习惯跟你聊天，适应你的风格。时间长了你会发现，当有新粉丝在直播间说一些不合时宜的话时，你都不用说话，老粉丝都会主动维护你，帮你怼回去。</p><p>第四，重复重要的行动指令。脚本不能太长，2~5分钟，包含重要信息即可，然后就是根据情况不断地重复。<br>在话术里面，需要反复行动指令：点关注、点赞、发评论、分享直播间、购买。<br>如果我们不说，用户是不会主动想起来干这些事情的。<br>所以在整个话术里面，重复最多的就是这个部分。<br>如果在一分钟里面听不到一个行动指令，这个意识就还需要再加强。<br>我们最终的目的是让客户购买，所以这个点尤为重要。<br>在直播的时候千万不要像念课文一样朗诵直播脚本，轻松舒适的状态更容易吸引的粉丝。不慌不忙，才是内行。</p><h4 id="3-成交平台的准备"><a href="#3-成交平台的准备" class="headerlink" title="3 成交平台的准备"></a>3 成交平台的准备</h4><p>如果是选择了TikTok Shop（小店）成交，就需要先完善好小店信息，上架好商品的图片和描述；如果是选择了独立站、亚马逊等第三方平台成交，就要先将对应的平台搭建好，并且在开播前做好订单测试。不要等到有粉丝想买的时候才发现成交过程中有问题还没解决，白白错失了客户。</p><p>等到订单多了之后，也需要运营人员定期做测试，及时发现和修补问题。不然因为下单流程问题损失客户就很可惜了。</p><pre class="mermaid">graph LRaa((品牌))a1[大大提升用户的决策效率]a2[提升产品溢价]a3[提升自然搜索量]a4[提高客户复购率]a5[不做品牌的没有后劲 做品牌的熬不到给项目加成就活不下去了]aa-->a1aa-->a2aa-->a3aa-->a4aa-->a5</pre><p>所有“被动收入”都不是无缘无故的，它的背后要么是呕心沥血的付出和积累，要么是巨大的风险</p><h4 id="品牌独立站“七环营销法”扩大成交生态闭环"><a href="#品牌独立站“七环营销法”扩大成交生态闭环" class="headerlink" title="品牌独立站“七环营销法”扩大成交生态闭环"></a>品牌独立站“七环营销法”扩大成交生态闭环</h4><p><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230913212837.png"></p><ol><li>线下门店和地推: 线下是获取客户信任最直接的方式，很多品牌的线上销售是因为线下门店足够多、品牌力强而反哺了线上的品牌词搜索量。</li><li>EDM:这是一种很古老的营销方式，是最早的独立站私域。它将通过广告等方式进到独立站的流量承接下来。用户进入独立站的第一个界面就是EDM弹窗，让用户填写自己的电子邮件地址，订阅这个品牌，从而获得相应的折扣。</li><li>网红&#x2F;达人推广: 网红用自己的影响力帮助宣传你的独立站，既能直接增加销量，又能获得品牌背书，还能因为在全网被提及的次数变多而提升SEO（搜索引擎优化）自然搜索的权重。</li><li>广告投放这里说的广告投放是专门为了给独立站带来访问和销售的付费投放，常见的平台有：脸书、谷歌、YouTube信息流、TikTok广告等。做独立站基本上离不开广告投放，好的投手、好的投放策略配合好的素材，可以将ROI（投入产出比）拉高。</li><li>直播带货: 直播的展示更加直观，互动性也更强。现在很多国外的用户开始慢慢接受直播带货这种形式，所以即使美国地区目前还没有开放闭环车，还是有很多商家将自己的独立站挂在TikTok的主页上，再用短视频或者直播的形式引起用户兴趣，让他们点进独立站购买产品。</li><li>短视频和长视频: 短视频的表现形式更多样，长视频可以讲解得更透彻。这两种视频形式的目的就是引起用户的兴趣，激发他们的需求，最后引导至独立站进行购买。</li><li>SEO: 搜索引擎优化，是利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名；目的是让其在行业内占据领先地位，获得品牌收益；很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移。当用户搜索某个关键词时，你的品牌能排在一定位次，就基本上能承接住搜索引擎关于这个词的对应流量。</li></ol><h3 id="如何建立独立站中长期壁垒、提升抗风险能力"><a href="#如何建立独立站中长期壁垒、提升抗风险能力" class="headerlink" title="如何建立独立站中长期壁垒、提升抗风险能力"></a>如何建立独立站中长期壁垒、提升抗风险能力</h3><p>如果你已经选择了这条长远的路，费了很大力气来做独立站生态，那就一定要做好品牌。品牌就是你为独立站建立中长期壁垒和资产，并且提升抗风险能力的核心。</p><h3 id="中国企业用TikTok拓展海外市场的两个阶段：MVP测试-矩阵扩量"><a href="#中国企业用TikTok拓展海外市场的两个阶段：MVP测试-矩阵扩量" class="headerlink" title="中国企业用TikTok拓展海外市场的两个阶段：MVP测试+矩阵扩量"></a>中国企业用TikTok拓展海外市场的两个阶段：MVP测试+矩阵扩量</h3><h4 id="阶段一：MVP测试阶段"><a href="#阶段一：MVP测试阶段" class="headerlink" title="阶段一：MVP测试阶段"></a>阶段一：MVP测试阶段</h4><p>MVP：最小化可行闭环，企业用最小的成本开发出可用且能表达出核心理念的产品版本，使其功能极简但能够帮助企业快速验证对产品的构思，以便于企业在获取客户反馈后持续迭代优化产品、不断适应市场环境。</p><h5 id="为什么测mvp："><a href="#为什么测mvp：" class="headerlink" title="为什么测mvp："></a>为什么测mvp：</h5><ul><li>在中国受欢迎的产品到了海外不一定受欢迎</li><li>同一种产品在不同销售渠道的销量会有很大差别</li><li>同一个品类的产品，具体的SKU（最小存货单位）或者款式不同，会在流量和转化上有着很大差别。</li></ul><h5 id="如何构建TikTok项目Mvp"><a href="#如何构建TikTok项目Mvp" class="headerlink" title="如何构建TikTok项目Mvp"></a>如何构建TikTok项目Mvp</h5><ul><li>第一步：明确测试目标和标准。 设立要素：时间周期、销售额、利润率</li><li>第二步：只花必要的成本，快准狠。<br>MVP是最简化的路径测试，所以有些环节的不必要花费的时间、精力和钱，都要砍掉：LOGO和VI设计可以等MVP完成之后再做；独立站可以先建一个简易模板的，等测试完再花更多的钱去好好装修独立站；产品供应链可以先多拿几个样品回来，因为还没测出来哪个流量数据更好，等测出来了再去优化供应链；等等。在每一个环节的准备上也要注重效率，比如说直播脚本就只给自己两个小时去准备，不要拖很久。</li><li>第三步：短视频和直播同步测试。<br>短视频主要测试产品、内容形式和粉丝标签：发布产品视频之后有多少人询价或透露出明显的购买意向、哪一种内容形式的数据明显更好、粉丝标签是否已经形成、是否已经度过了账号的“黑洞期”等。通过短视频来获得这些数据反馈，帮助我们调整产品和内容策略。<br>直播间重点测试产品流量和成交闭环：在直播间不同产品的流量差异很大，不同款式的产品也是一样。分别测试并统计好每一个产品对应时段的数据，筛选出最好的产品或者款式作为流量款和爆款。在客户成交下单的过程中也有可能会遇到问题，提前用测试期把问题找出来并解决掉，不然等到大批流量来了才发现下单环节卡住了就损失大了。</li><li>第四步：售后环节的MVP测试。<br>对于海外业务不熟悉的公司来说，在测试MVP的时候一定要熟悉好售后的各种问题：在客户下订单之后的多长时间供应链才能发货？发货会不会出错？每一个订单的实际物流成本是多少？实际的运输时效是几天？退货率高不高？客户退货退到哪里？成本如何？产品的好评率如何？没有主动给好评的客户如何找他们要好评？<br>这些问题是最常见的售后问题，对于没有走过测试闭环的人来说，真正遇到这些问题的时候就会被卡住。所以做MVP测试的时候就是在用最开始的少量订单帮助你的团队练手，把这些问题都打通，并且拥有了解决这类问题的方法和能力，再去面对主体业务的大量订单时才能承接得住。</li></ul><h4 id="阶段二：直播矩阵扩量阶段"><a href="#阶段二：直播矩阵扩量阶段" class="headerlink" title="阶段二：直播矩阵扩量阶段"></a>阶段二：直播矩阵扩量阶段</h4><p>哪怕是卖与国内相同的产品，在做海外市场时也要重新完成一遍MVP+矩阵扩量的模式。测试出来的结果可能会跟你想象的结果完全不同。</p><h5 id="纵向打法"><a href="#纵向打法" class="headerlink" title="纵向打法"></a>纵向打法</h5><p>纵向就是做得更深。将MVP测试成功的闭环中的每一个环节加大力度，匹配好的团队和资源将这个闭环做大做强。比如说增强主播培训、选好主播、购买专业的直播设备、拉长直播时长、加强供应链甚至定制产品等。</p><h5 id="横向打法"><a href="#横向打法" class="headerlink" title="横向打法"></a>横向打法</h5><p>横向打法就是复制模式和直播间。<br>在对纵向打法掌握的基础上，可以将现在的成功闭环进行复制。</p><p>复制的方法有两种：</p><ul><li>第一种是就将现在的产品直播间一模一样地复制，多一个直播间去获取这个账号额外的流量，单纯增加新账号的流量</li><li>第二种是复制直播间，但是产品是同一个大品类下的其他小品类。比如，主直播间是卖18K金首饰的，那新复制的第二个直播间就可以卖各种彩色宝石首饰，第三个直播间就卖珍珠首饰等。这需要你根据产品特点去选择，可以尽量符合第二种，这样可以获取大标签相似的客户，几个直播间还能相互引流重叠兴趣的粉丝。</li></ul><pre class="mermaid">graph LRaa((品牌))a1[产品口碑]-->b1[质量是顾客忠诚的最好保证]-->c1[兼顾产品品质和利润空间]-->d1[留存品牌预算]a2[特色鲜明的IP]-->b2[真人IP提升产品溢价和粉丝粘性]a3[深入人心的内容沉淀]-->b3[共情心理  占领用户心智 拉近距离]-->c2[笑点 泪点 爽点 启发点]-->d2[一般笑点和爽点容易引发用户点赞和转发]c2-->d3[泪点和启发点更容易引发收藏和评论 默默下单弥补遗憾]a4[服务感  体验感  交付感]-->b4[售前成交]-->c3[售后体验]-->d4[顾客为商品的价值感付费]a5[触达用户的广度  深度  持续程度]-->b5[在最开始做一件事时   不会一下子就能获得别人的信任]-->c4[但只要能坚持  即使是很小的事情  也会因为你坚持了这么久而获得信任]a6[品牌名 LOGO 页面装饰]-->b6[在品牌路上需花心思做好]-->c5[时间越长效果的差距越明显]a6-->|品牌名|b7[好的品牌名能深入人心]-->c6[追求画面感加有意思的形象]aa-->a1aa-->a2aa-->a3aa-->a4aa-->a5aa-->a6</pre><h4 id="品牌力的评判标准"><a href="#品牌力的评判标准" class="headerlink" title="品牌力的评判标准"></a>品牌力的评判标准</h4><table><thead><tr><th align="center">分数</th><th align="center">程度</th><th align="center">符合情况</th></tr></thead><tbody><tr><td align="center">1分品牌力</td><td align="center">没有品牌力，没有品牌意识</td><td align="center">没有品牌名和其他品牌设定</td></tr><tr><td align="center">2分品牌力</td><td align="center">有品牌名和LOGO，也有计划地沉淀品牌力</td><td align="center">但暂时看不到品牌的沉淀效果</td></tr><tr><td align="center">3分品牌力</td><td align="center">有完整的品牌战略</td><td align="center">并且达到了上述品牌六要素中的三点以上</td></tr><tr><td align="center">4分品牌力</td><td align="center">成为TikTok在本赛道的大IP</td><td align="center">用户在TikTok搜索产品关键词时可以排名前三，并且成为本赛道其他新账号的对标对象</td></tr><tr><td align="center">5分品牌力</td><td align="center">成为行业品牌变现顶流</td><td align="center">品牌词搜索量达到行业顶尖，并成为品牌商业案例</td></tr></tbody></table><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    </pre></div>]]></content>
      
      
      <categories>
          
          <category> 跨境电商 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tiktok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World2</title>
      <link href="/2023/10/02/hello-world%20/"/>
      <url>/2023/10/02/hello-world%20/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 加入 mermaid（基于butterfly主题）</title>
      <link href="/2023/10/02/hexo%20%E5%8A%A0%E5%85%A5mermaid/"/>
      <url>/2023/10/02/hexo%20%E5%8A%A0%E5%85%A5mermaid/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo中插入mermaid-diagrams-基于butterfly主题"><a href="#Hexo中插入mermaid-diagrams-基于butterfly主题" class="headerlink" title="Hexo中插入mermaid diagrams(基于butterfly主题)"></a>Hexo中插入mermaid diagrams(基于butterfly主题)</h1><h2 id="Excerpt"><a href="#Excerpt" class="headerlink" title="Excerpt"></a>Excerpt</h2><p> 以下是使用中的hexo插入mermaid diagrams的方法。<br> 感谢做插件的人！感谢<a href="https://wangxiaoyu-go.github.io/2018/11/23/hexo-filter-mermaid-diagrams/">Hexo中插入mermaid diagrams | Yu’s Notes (wangxiaoyu-go.github.io)</a>文章作者<br> <a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">github参考link</a><br>Mermaid diagrams介绍gitbook <a href="http://mermaid.js.org/#/">Mermaid | Diagramming and charting tool</a></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure><p>npm install hexo-filter-mermaid-diagrams 修改配置文件在hexo的_config.yml文件（根目录的并非主题的）中，添加以下内容： </p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在hexo的<code>_config.yml</code>文件（根目录的并非主题的）中，添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mermaid chart  </span><br><span class="line">mermaid: ## mermaid url https://github.com/knsv/mermaid  </span><br><span class="line">  enable: true  # default true  </span><br><span class="line">  version: &quot;7.1.2&quot; # default v7.1.2  </span><br><span class="line">  options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js  </span><br><span class="line">    #startOnload: true  // default true</span><br></pre></td></tr></table></figure><h3 id="js文件修改"><a href="#js文件修改" class="headerlink" title="js文件修改"></a>js文件修改</h3><ol><li>修改位置 （butterfly主题为例）  <br>    <code>themes\butterfly\layout\includes\footer.pug</code></li><li>根据footer的格式不同，添加的内容不同。  <br>    格式有<code>after_footer.pug</code> , <code>after-footer.ejs</code> ,<code>footer.swig</code>等。  <br>    以下是在includes的<code>footer.pug</code>添加的内容。其他格式参考<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">github: hexo-filter-mermaid-diagrams</a></li></ol><p>   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if theme.mermaid.enable == true</span><br><span class="line">  script(type=&#x27;text/javascript&#x27;, id=&#x27;maid-script&#x27; mermaidoptioins=theme.mermaid.options src=&#x27;https://unpkg.com/mermaid@&#x27;+ theme.mermaid.version + &#x27;/dist/mermaid.min.js&#x27; + &#x27;?v=&#x27; + theme.version)</span><br><span class="line">  script.</span><br><span class="line">    if (window.mermaid) &#123;</span><br><span class="line">      var options = JSON.parse(document.getElementById(&#x27;maid-script&#x27;).getAttribute(&#x27;mermaidoptioins&#x27;));</span><br><span class="line">      mermaid.initialize(options);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到此为止，设置的部分就结束了。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法要稍微注意一下。<br>有一些markdown的编辑工具，比如 Cmd Markdown，mermaid的语法是这样的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?  </span><br><span class="line">loop every minute  </span><br><span class="line">    John--&gt;Alice: Great!  </span><br><span class="line">end  </span><br></pre></td></tr></table></figure><p>注意，这款插件语法略有不同：</p><ul><li>三个点后面要写的是mermaid，而不是sequence,graph TD等mermaid diagram具体类型。</li><li>在内容的第一行写sequence,graph TD等mermaid diagram具体类型。</li></ul><pre class="mermaid">pie    title Key elements in Product X    "Calcium" : 42.96    "Potassium" : 50.05    "Magnesium" : 10.01    "Iron" :  5</pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>至此已经完成了mermaid设定，在环境中也可以正常使用了。  <br>此时效果截图：  <br><img src="https://wangxiaoyu-go.github.io/2018/11/23/hexo-filter-mermaid-diagrams/mermaidbackground.PNG"><br>不需要更换背景颜色的话，执行<code>hexo g</code>,<code>hexo d</code>就完成了。<br>可以看出效果背景是灰色的。  <br>像我一样想换一个背景颜色的话，继续下一小节。</p><h3 id="个性化背景颜色"><a href="#个性化背景颜色" class="headerlink" title="个性化背景颜色"></a>个性化背景颜色</h3><p>个人希望没有背景颜色，是透明的。  <br>hexo有供用户设置的css文件。需要在这里添加需要的css内容。</p><ul><li>文件位置（butterfly主题为例）  <br>    <code>themes\butterfly\source\css\_custom\custom.css</code></li><li>添加内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*mermaid*/</span><br><span class="line">.mermaid &#123;</span><br><span class="line">  background: transparent!important;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>甘特图_gantt diagram_</p><pre class="mermaid">gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d</pre><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    </pre></div><p>更换css时，部署前有时需要先clean一下（不知道是不是bug）。  <br>所以执行<code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code>完成部署。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>每个markdown页面的最后一个mermaid图的后面需要加上<code>&#123;% mermaid %&#125;`,`&#123;% endmermaid %&#125;</code>才可以让mermaid图在butterfly主题上完美显示。markdown只显示<code>&#123;% endmermaid %&#125;</code>前的mermaid图。<br>例：<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/Snipaste_2023-09-09_17-16-04.png"><br>2.❗️❗️❗️Notice: if you want to use ‘Class diagram’, please edit your ‘_config.yml’ file, set external_link: false. - hexo bug.<br>一定要在hexo的配置文件中将external_link改为false，这是hexo的一个小bug</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 联动部署github page</title>
      <link href="/2023/10/02/hexo%20%E8%81%94%E5%8A%A8%E9%83%A8%E7%BD%B2github%20page%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2023/10/02/hexo%20%E8%81%94%E5%8A%A8%E9%83%A8%E7%BD%B2github%20page%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="✍参考"><a href="#✍参考" class="headerlink" title="✍参考"></a>✍参考</h2><p><a href="https://www.smitten.top/posts/HexoCI.html">hexo博客工作流CI（一键部署的快乐） | Barryの小站 (smitten.top)</a><br><a href="https://ajream.github.io/posts/88ad757/">Github Actions自动部署</a><br><a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署 | Akilarの糖果屋</a><br><a href="https://finisky.github.io/deployhexofromprivaterepo/">从私有代码库自动部署Hexo站到GitHub Pages | Finisky Garden</a><br><a href="https://diego369.github.io/2022/04/09/github-action-hexo/#%E9%85%8D%E7%BD%AE%E7%A7%81%E9%92%A5">利用 Github Actions 自动部署 Hexo博客 | 天涯路远 (diego369.github.io)</a>[经实践有效]2023-5-2</p><h2 id="github-action-部署-hexo-过程中踩坑记录及解决办法"><a href="#github-action-部署-hexo-过程中踩坑记录及解决办法" class="headerlink" title="github action 部署 hexo 过程中踩坑记录及解决办法"></a>github action 部署 hexo 过程中踩坑记录及解决办法</h2><h3 id="github-action-报错"><a href="#github-action-报错" class="headerlink" title="github action 报错"></a>github action 报错</h3><h4 id="x67-105-116-x40-x67-x69-x74-104-117-98-x2e-99-x6f-x6d-Permission-denied-publickey"><a href="#x67-105-116-x40-x67-x69-x74-104-117-98-x2e-99-x6f-x6d-Permission-denied-publickey" class="headerlink" title="&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;: Permission denied (publickey)."></a><a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>: Permission denied (publickey).</h4><p>fatal: Could not read from remote repository.<br>原因：无公钥，需重新生成<br>      解决 ：<br>      在git Bash中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key # 生成秘钥</span><br></pre></td></tr></table></figure><p>   会在当前目录中生成两个文件：</p><ul><li>私钥文件 <code>github-deploy-key</code> </li><li>公钥文件 <code>github-deploy-key.pub</code></li></ul><p><strong>配置私钥</strong>：<br>                复制 <span style="background:rgba(240, 200, 0, 0.2)">github-deploy-key</span> 文件内容，在<span style="background:rgba(240, 200, 0, 0.2)">Hexo</span>项目仓库，此处即 blog 仓库（priviate)<span style="background:rgba(240, 200, 0, 0.2)"> Settings -&gt; Secrets -&gt; Secrets -&gt; Actions</span> 页面上点击 <span style="background:rgba(240, 200, 0, 0.2)">New repository secret</span> 添加。</p><p>在 Name 输入框填写 <span style="background:rgba(240, 200, 0, 0.2)">HEXO_DEPLOY_PRI</span>。<br>在 Value 输入框填写 <span style="background:rgba(240, 200, 0, 0.2)">github-deploy-key</span> 文件内容。<br><strong>配置公钥</strong>:<br>                1.和私钥一样，只不过需要在部署github page的仓库配置公钥，以便链接。<br>                2.记得勾选 Allow write access 选项。<br>参考文章：<a href="https://diego369.github.io/2022/04/09/github-action-hexo/">利用 Github Actions 自动部署 Hexo博客 | 天涯路远 (diego369.github.io)</a></p><h2 id="编写github-action"><a href="#编写github-action" class="headerlink" title="编写github action"></a>编写github action</h2><p>在本地 blog 仓库中 创建文件 .github&#x2F;workflows&#x2F;autodeply.yml （无路径的话就直接创建该路径文件夹，该文件在上传github仓库后在github action中自动运行文件中设定的工作流）</p><ul><li>注意：编写github action 时需要配置环境变量env，环境变量中含有仓库的公私钥以便有权操作其他仓库</li><li>环境变量：环境变量需在仓库的Settings -&gt; Secrets -&gt; Secrets -&gt; Actions中添加，大写的都是环境变量，参考<a href="https://devpress.csdn.net/cicd/62edbda3c6770329307f2c57.html">使用环境变量 - GitHub Actions(第 2 部分)_github_weixin_0010034-DevPress官方社区 (csdn.net)</a></li><li>仓库配置：需要打开读写权限，操作权限等，具体操作参考</li></ul><p>github创建work flow：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当有改动推送到master分支时，启动Action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意在github上更改main为master</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">weixiansheng</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">$&#123;&#123;secrets.GITHUBEMAIL&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">jerryc127/hexo-theme-butterfly</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意在github上更改main为master</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span> <span class="comment">#检查主题</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules/hexo-theme-butterfly</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;20.x&quot;</span> <span class="comment">#action使用的node版本，建议大版本和本地保持一致。可以在本地用node -v查询版本号。</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置</span> <span class="string">环境变量</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$HEXO_DEPLOY_PRI&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line"></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line"></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache-npm</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">            <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">            <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line"></span><br><span class="line">            <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cache-npm.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line">          <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">hexo</span> <span class="string">deploy</span>        </span><br><span class="line"></span><br><span class="line">        <span class="comment">#uses: JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#env:</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">#PERSONAL_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">#PUBLISH_REPOSITORY: it-briefcode/it-briefcode.github.io # The repository the action should deploy to.</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">#BRANCH: master  # The branch the action should deploy to.</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">#PUBLISH_DIR: ./public # The folder the action should deploy.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#uses: JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#with:</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#token: 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</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#repository-name: weixiansheng1/weixiansheng1.github.io</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#branch: main</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#folder: public</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#commit-message: &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; Updated By Github Actions&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#run: |</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#ssh-add /Users/duansg/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#git config --global user.name &quot;[GithubUsername]&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#git config --global user.email &quot;[GithubEmail]&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#git clone https://github.com/weixiansheng1/weixiansheng1.github.io.git .deploy_git</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># 此处务必用HTTPS链接。SSH链接可能有权限报错的隐患</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># =====注意.deploy_git前面有个空格=====</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># 这行指令的目的是clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#hexo deploy</span></span><br></pre></td></tr></table></figure><p>完成后，点击deploy ,可看到警告：该警告提示 Node.js 12 的准备过时（即将弃用），需要使用Node.js 16 <a href="https://github.com/actions/setup-node">actions&#x2F;setup-node：使用特定版本的节点设置 GitHub 操作工作流.js</a><br><img src="https://pic1.zhimg.com/80/v2-38a8ba63ff404d5f8ad21b723c3a8c70_1440w.webp"></p><h3 id="我们来修改-github-action-中的workflow：点击Workflow-file"><a href="#我们来修改-github-action-中的workflow：点击Workflow-file" class="headerlink" title="我们来修改 github action 中的workflow：点击Workflow file"></a>我们来修改 github action 中的workflow：点击Workflow file</h3><p><img src="https://pic1.zhimg.com/80/v2-416ea48fe1744b98225240c0f3e27b8c_1440w.webp" alt="v2-416ea48fe1744b98225240c0f3e27b8c_1440w.webp (1440×859) (zhimg.com)"><br>都改成：</p><ul><li>uses: actions&#x2F;checkout@v3</li><li>uses: actions&#x2F;setup-node@v3<br><img src="https://pic3.zhimg.com/v2-b195dfd17c71494076bed11c1a7368ca_r.jpg" alt="v2-b195dfd17c71494076bed11c1a7368ca_r.jpg (1919×1281) (zhimg.com)"><br>修改完成后点击提交<br><img src="https://pic3.zhimg.com/80/v2-0f22a0a85b9769cf89236db2ce840e72_1440w.webp" alt="v2-0f22a0a85b9769cf89236db2ce840e72_1440w.webp (1440×791) (zhimg.com)"><br>运行成功，无任何警告和报错，之后备份到本地workflow&#x2F;autodeply.yaml中，以免下次提交后覆盖<br><img src="https://pic2.zhimg.com/v2-21a1f87ef4cb035056ed407dc30392cd_r.jpg" alt="v2-21a1f87ef4cb035056ed407dc30392cd_r.jpg (2400×1340) (zhimg.com)"><br>修改完成后，使用git add . 载入缓存，git commit -m”up date” 链接仓库，git push &#x2F; git push -u origin master&#x2F;git push origin master &#x2F;git push –force origin master 来测试本地的workflow.file文件是否被修改好<img src="https://pic2.zhimg.com/80/v2-c22aa176769ec5bc5999ca1a5d785741_1440w.webp" alt="v2-c22aa176769ec5bc5999ca1a5d785741_1440w.webp (845×1103) (zhimg.com)"></li></ul><h3 id="如果git-bash部署过程中报错：Another-git-process-seems-to-be-running-in-this-repository-e-g"><a href="#如果git-bash部署过程中报错：Another-git-process-seems-to-be-running-in-this-repository-e-g" class="headerlink" title="如果git bash部署过程中报错：Another git process seems to be running in this repository, e.g."></a>如果git bash部署过程中报错：Another git process seems to be running in this repository, e.g.</h3><p><strong>翻译</strong>：另一个git进程似乎正在这个存储库中运行，例如 由“git commit”打开的编辑器。请确保所有流程终止，然后重试。如果它仍然失败，一个git进程可能已在此存储库中崩溃：手动删除文件以继续。<br><strong>原因</strong>：.git下的index.lock文件，在进行某些比较费时的git操作时自动生成，操作结束后自动删除，相当于一个锁定文件，目的在于防止对一个目录同时进行多个操作。有时强制关闭进行中的git操作，这个文件没有被自动删除，之后就无法进行其他git操作，必须手动删除。<br><strong>解决方法</strong>：git clean -f .git&#x2F;index.lock</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>obsidian 与 hexo 联动部署github page</title>
      <link href="/2023/10/02/obsidian%20%E4%B8%8E%20hexo%20%E8%81%94%E5%8A%A8%E9%83%A8%E7%BD%B2github%20page/"/>
      <url>/2023/10/02/obsidian%20%E4%B8%8E%20hexo%20%E8%81%94%E5%8A%A8%E9%83%A8%E7%BD%B2github%20page/</url>
      
        <content type="html"><![CDATA[<h2 id="✍github-action部署参考"><a href="#✍github-action部署参考" class="headerlink" title="✍github action部署参考"></a>✍github action部署参考</h2><ul><li><a href="https://www.smitten.top/posts/HexoCI.html">hexo博客工作流CI（一键部署的快乐） | Barryの小站 (smitten.top)</a></li><li><a href="https://ajream.github.io/posts/88ad757/">Github Actions自动部署</a></li><li><a href="https://akilar.top/posts/f752c86d/">使用Github Action实现全自动部署 | Akilarの糖果屋</a></li><li><a href="https://finisky.github.io/deployhexofromprivaterepo/">从私有代码库自动部署Hexo站到GitHub Pages | Finisky Garden</a></li><li><a href="https://diego369.github.io/2022/04/09/github-action-hexo/#%E9%85%8D%E7%BD%AE%E7%A7%81%E9%92%A5">利用 Github Actions 自动部署 Hexo博客 | 天涯路远 (diego369.github.io)</a>[经实践有效]2023-5-2</li><li><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客 | Sanonz</a></li><li><a href="https://www.cnblogs.com/i-code/p/12869046.html">Hexo+GitHub Actions 完美打造个人博客 - AnonyStar - 博客园 (cnblogs.com)</a></li><li><a href="https://ajream.github.io/posts/88ad757/">Github Actions自动部署&gt;_&lt;欢饮回来！ (ajream.github.io)</a></li><li><a href="https://zhuanlan.zhihu.com/p/364366127">GitHub Actions入门教程-自动部署静态博客 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/weixin_43350051/article/details/104902545">给博客使用Butterfly主题并部署到GitHub服务器_butterfly 空格_XJHui’s Blog的博客-CSDN博客</a></li></ul><h2 id="obsidian-git维护hexo博客参考"><a href="#obsidian-git维护hexo博客参考" class="headerlink" title="obsidian +git维护hexo博客参考"></a>obsidian +git维护hexo博客参考</h2><p>搜索关键词：obsidian 部署 hexo github  </p><ul><li><a href="https://zhuanlan.zhihu.com/p/554333805">Obsidian+Git完美维护Hexo博客 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#3-2-%E4%BD%BF%E7%94%A8-Obsidian-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0">Hexo + Obsidian + Git 完美的博客部署与编辑方案 | EsunR-Blog</a></li><li><a href="https://juejin.cn/post/7120189614660255781">Hexo + Obsidian + Git 完美的博客部署与编辑方案 - 掘金 (juejin.cn)</a></li></ul><h2 id="github-action-部署-hexo-过程中踩坑记录及解决办法"><a href="#github-action-部署-hexo-过程中踩坑记录及解决办法" class="headerlink" title="github action 部署 hexo 过程中踩坑记录及解决办法"></a>github action 部署 hexo 过程中踩坑记录及解决办法</h2><h3 id="github-action-报错"><a href="#github-action-报错" class="headerlink" title="github action 报错"></a>github action 报错</h3><h4 id="x67-x69-116-64-103-x69-x74-x68-117-x62-46-99-x6f-109-Permission-denied-publickey"><a href="#x67-x69-116-64-103-x69-x74-x68-117-x62-46-99-x6f-109-Permission-denied-publickey" class="headerlink" title="&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;: Permission denied (publickey)."></a><a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;</a>: Permission denied (publickey).</h4><p>fatal: Could not read from remote repository.<br>原因：无公钥，需重新生成<br>      解决 ：<br>      在git Bash中执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key # 生成秘钥</span><br></pre></td></tr></table></figure><p>   会在当前目录中生成两个文件：</p><ul><li>私钥文件 <code>github-deploy-key</code> </li><li>公钥文件 <code>github-deploy-key.pub</code></li></ul><p><strong>配置私钥</strong>：<br>                复制 <span style="background:rgba(240, 200, 0, 0.2)">github-deploy-key</span> 文件内容，在<span style="background:rgba(240, 200, 0, 0.2)">Hexo</span>项目仓库，此处即 blog 仓库（priviate)<span style="background:rgba(240, 200, 0, 0.2)"> Settings -&gt; Secrets -&gt; Secrets -&gt; Actions</span> 页面上点击 <span style="background:rgba(240, 200, 0, 0.2)">New repository secret</span> 添加。</p><p>在 Name 输入框填写 <span style="background:rgba(240, 200, 0, 0.2)">HEXO_DEPLOY_PRI</span>。<br>在 Value 输入框填写 <span style="background:rgba(240, 200, 0, 0.2)">github-deploy-key</span> 文件内容。<br><strong>配置公钥</strong>:<br>                1.和私钥一样，只不过需要在部署github page的仓库配置公钥，以便链接。<br>                2.记得勾选 Allow write access 选项。<br>参考文章：<a href="https://diego369.github.io/2022/04/09/github-action-hexo/">利用 Github Actions 自动部署 Hexo博客 | 天涯路远 (diego369.github.io)</a></p><h2 id="编写github-action"><a href="#编写github-action" class="headerlink" title="编写github action"></a>编写github action</h2><p>在本地 blog 仓库中 创建文件 .github&#x2F;workflows&#x2F;autodeply.yml （无路径的话就直接创建该路径文件夹，该文件在上传github仓库后在github action中自动运行文件中设定的工作流）<a href="https://docs.github.com/zh/actions/using-workflows/workflow-syntax-for-github-actions">GitHub Actions 的工作流语法 - GitHub 文档</a></p><ul><li>注意：编写github action 时需要配置环境变量env，环境变量中含有仓库的公私钥以便有权操作其他仓库</li><li>环境变量：环境变量需在仓库的Settings -&gt; Secrets -&gt; Secrets -&gt; Actions中添加，大写的都是环境变量，参考<a href="https://devpress.csdn.net/cicd/62edbda3c6770329307f2c57.html">使用环境变量 - GitHub Actions(第 2 部分)_github_weixin_0010034-DevPress官方社区 (csdn.net)</a></li><li>仓库配置：需要打开读写权限，操作权限等，具体操作参考</li></ul><p>github创建work flow：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当有改动推送到master分支时，启动Action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意在github上更改main为master</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">weixiansheng</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">$&#123;&#123;secrets.GITHUBEMAIL&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">jerryc127/hexo-theme-butterfly</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意在github上更改main为master</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span> <span class="comment">#检查主题</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules/hexo-theme-butterfly</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;20.x&quot;</span> <span class="comment">#action使用的node版本，建议大版本和本地保持一致。可以在本地用node -v查询版本号。</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置</span> <span class="string">环境变量</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$HEXO_DEPLOY_PRI&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line"></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line"></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache-npm</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">            <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">            <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-</span></span><br><span class="line"></span><br><span class="line">            <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cache-npm.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line">          <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"></span><br><span class="line">          <span class="string">hexo</span> <span class="string">deploy</span>        </span><br><span class="line"></span><br><span class="line">        <span class="comment">#uses: JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#env:</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">#PERSONAL_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">#PUBLISH_REPOSITORY: it-briefcode/it-briefcode.github.io # The repository the action should deploy to.</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">#BRANCH: master  # The branch the action should deploy to.</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">#PUBLISH_DIR: ./public # The folder the action should deploy.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#uses: JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#with:</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#token: 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</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#repository-name: weixiansheng1/weixiansheng1.github.io</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#branch: main</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#folder: public</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#commit-message: &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; Updated By Github Actions&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#run: |</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#ssh-add /Users/duansg/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#git config --global user.name &quot;[GithubUsername]&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#git config --global user.email &quot;[GithubEmail]&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#git clone https://github.com/weixiansheng1/weixiansheng1.github.io.git .deploy_git</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># 此处务必用HTTPS链接。SSH链接可能有权限报错的隐患</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># =====注意.deploy_git前面有个空格=====</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># 这行指令的目的是clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#hexo deploy</span></span><br></pre></td></tr></table></figure><p>完成后，点击deploy ,可看到警告：该警告提示 Node.js 12 的准备过时（即将弃用），需要使用Node.js 16 <a href="https://github.com/actions/setup-node">actions&#x2F;setup-node：使用特定版本的节点设置 GitHub 操作工作流.js</a><br><img src="https://pic1.zhimg.com/80/v2-38a8ba63ff404d5f8ad21b723c3a8c70_1440w.webp"></p><h3 id="我们来修改-github-action-中的workflow：点击Workflow-file"><a href="#我们来修改-github-action-中的workflow：点击Workflow-file" class="headerlink" title="我们来修改 github action 中的workflow：点击Workflow file"></a>我们来修改 github action 中的workflow：点击Workflow file</h3><p><img src="https://pic1.zhimg.com/80/v2-416ea48fe1744b98225240c0f3e27b8c_1440w.webp" alt="v2-416ea48fe1744b98225240c0f3e27b8c_1440w.webp (1440×859) (zhimg.com)"><br>都改成：</p><ul><li>uses: actions&#x2F;checkout@v3</li><li>uses: actions&#x2F;setup-node@v3<br><img src="https://pic3.zhimg.com/v2-b195dfd17c71494076bed11c1a7368ca_r.jpg" alt="v2-b195dfd17c71494076bed11c1a7368ca_r.jpg (1919×1281) (zhimg.com)"><br>修改完成后点击提交<br><img src="https://pic3.zhimg.com/80/v2-0f22a0a85b9769cf89236db2ce840e72_1440w.webp" alt="v2-0f22a0a85b9769cf89236db2ce840e72_1440w.webp (1440×791) (zhimg.com)"><br>运行成功，无任何警告和报错，之后备份到本地workflow&#x2F;autodeply.yaml中，以免下次提交后覆盖<br><img src="https://pic2.zhimg.com/v2-21a1f87ef4cb035056ed407dc30392cd_r.jpg" alt="v2-21a1f87ef4cb035056ed407dc30392cd_r.jpg (2400×1340) (zhimg.com)"><br>修改完成后，使用git add . 载入缓存，git commit -m”up date” 链接仓库，git push &#x2F; git push -u origin master&#x2F;git push origin master &#x2F;git push –force origin master 来测试本地的workflow.file文件是否被修改好<img src="https://pic2.zhimg.com/80/v2-c22aa176769ec5bc5999ca1a5d785741_1440w.webp" alt="v2-c22aa176769ec5bc5999ca1a5d785741_1440w.webp (845×1103) (zhimg.com)"></li></ul><h3 id="如果git-bash部署过程中报错：Another-git-process-seems-to-be-running-in-this-repository-e-g"><a href="#如果git-bash部署过程中报错：Another-git-process-seems-to-be-running-in-this-repository-e-g" class="headerlink" title="如果git bash部署过程中报错：Another git process seems to be running in this repository, e.g."></a>如果git bash部署过程中报错：Another git process seems to be running in this repository, e.g.</h3><p>翻译：另一个git进程似乎正在这个存储库中运行，例如 由“git commit”打开的编辑器。请确保所有流程终止，然后重试。如果它仍然失败，一个git进程可能已在此存储库中崩溃：手动删除文件以继续。</p><p>原因：.git下的index.lock文件，在进行某些比较费时的git操作时自动生成，操作结束后自动删除，相当于一个锁定文件，目的在于防止对一个目录同时进行多个操作。有时强制关闭进行中的git操作，这个文件没有被自动删除，之后就无法进行其他git操作，必须手动删除。</p><p>解决方法：git Bash输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -f .git/index.lock</span><br></pre></td></tr></table></figure><h3 id="github-action-主题不显示："><a href="#github-action-主题不显示：" class="headerlink" title="github action 主题不显示："></a>github action 主题不显示：</h3><p><strong>解决</strong>：github 上配置hexo theme 要在本地主题文件夹复制到theme中<br>这样既能够本地hexo s启动服务器去测试，又可上传github启动action workflow。</p><h3 id="报错-：The-deploy-step-encountered-an-error-The-process-‘-x2F-usr-x2F-bin-x2F-git’-failed-with-exit-code-128"><a href="#报错-：The-deploy-step-encountered-an-error-The-process-‘-x2F-usr-x2F-bin-x2F-git’-failed-with-exit-code-128" class="headerlink" title="报错 ：The deploy step encountered an error: The process ‘&#x2F;usr&#x2F;bin&#x2F;git’ failed with exit code 128"></a>报错 ：The deploy step encountered an error: The process ‘&#x2F;usr&#x2F;bin&#x2F;git’ failed with exit code 128</h3><p>原因：github action 无操作仓库权限<br>解决：需要在workflow file补充环境env变量信息，参考本文workflow写法</p><h3 id="git-add-命令错误，显示有其他文件正在使用"><a href="#git-add-命令错误，显示有其他文件正在使用" class="headerlink" title="git add .命令错误，显示有其他文件正在使用"></a>git add .命令错误，显示有其他文件正在使用</h3><p>原因：</p><ol><li>git block文件但未删除</li><li>百度网盘同步过程中占用该文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyQt5学习</title>
      <link href="/2023/10/02/pyQt5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/10/02/pyQt5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="2-2消息框控件"><a href="#2-2消息框控件" class="headerlink" title="2.2消息框控件"></a>2.2消息框控件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        #实例化qpushbotton按钮控件</span><br><span class="line">        button = QPushButton(&#x27;信息框&#x27;)                  </span><br><span class="line">        button.clicked.connect(self.show_information)  </span><br><span class="line">        </span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(button)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_information(self):</span><br><span class="line">        QMessageBox.information(self,&#x27;标题&#x27;,&#x27;内容&#x27;,QMessageBox.Yes)  # information(父类，信息框标题，信息框内容)</span><br><span class="line">        #如果显示多个按钮：QMessageBox.information(self, &#x27;标题&#x27;, &#x27;内容&#x27;, QMessageBox.Yes|QMessageBox.No)，</span><br><span class="line">        #默认不填则yes。    Ok,Yes,No,Close,Cancel,Open,Save。</span><br><span class="line">        #询问框：QMessageBox.question()</span><br><span class="line">        #信息框：QMessageBox.information()</span><br><span class="line">        #警告框：QMessageBox.warning()</span><br><span class="line">        #错误框：QMessageBox.critical()</span><br><span class="line">        #关于框：QMessageBox.about()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())#关闭窗口时，app.exec()返回0并穿给sys.exit()，使python解释器正常退出。</span><br></pre></td></tr></table></figure><h3 id="2-2-2与消息框交互"><a href="#2-2-2与消息框交互" class="headerlink" title="2.2.2与消息框交互"></a>2.2.2与消息框交互</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        #实例化qpushbotton按钮控件</span><br><span class="line">        self.button = QPushButton(&#x27;信息框&#x27;)                  </span><br><span class="line">        self.button.clicked.connect(self.show_information)  </span><br><span class="line">        </span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.button)#比2.2多了self</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_information(self):</span><br><span class="line">        choice = QMessageBox.question(self,&#x27;标题&#x27;,&#x27;内容&#x27;,QMessageBox.Yes|QMessageBox.No)  # information(父类，信息框标题，信息框内容)</span><br><span class="line">        #如果显示多个按钮：QMessageBox.information(self, &#x27;标题&#x27;, &#x27;内容&#x27;, QMessageBox.Yes|QMessageBox.No)，</span><br><span class="line">        #默认不填则yes。    Ok,Yes,No,Close,Cancel,Open,Save。</span><br><span class="line">        #询问框：QMessageBox.question()</span><br><span class="line">        #信息框：QMessageBox.information()</span><br><span class="line">        #警告框：QMessageBox.warning()</span><br><span class="line">        #错误框：QMessageBox.critical()</span><br><span class="line">        #关于框：QMessageBox.about()</span><br><span class="line">        if choice == QMessageBox.Yes:</span><br><span class="line">            self.button.setText(&#x27;hao&#x27;)</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())#关闭窗口时，app.exec()返回0并穿给sys.exit()，使python解释器正常退出。</span><br></pre></td></tr></table></figure><h3 id="2-2-3编写带中文按钮的消息框"><a href="#2-2-3编写带中文按钮的消息框" class="headerlink" title="2.2.3编写带中文按钮的消息框"></a>2.2.3编写带中文按钮的消息框</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">#自定义消息框</span><br><span class="line">class QuestionMessageBox(QMessageBox):</span><br><span class="line">    def __init__(self, parent, title, content):     #初始化</span><br><span class="line">        super(QuestionMessageBox, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(title)</span><br><span class="line">        self.setText(content)</span><br><span class="line">        self.setIcon(QMessageBox.Question)      #设置图标</span><br><span class="line">        #问号图标：QMessageBox.Question</span><br><span class="line">        #信息图标：QMessageBox.Information</span><br><span class="line">        #警告图标：QMessageBox.Warning</span><br><span class="line">        #错误图标：QMessageBox.Critical</span><br><span class="line">        #无图标： QMessageBox.NoIcon</span><br><span class="line">        self.addButton(&#x27;是&#x27;, QMessageBox.YesRole)  #自定义按钮</span><br><span class="line">        self.addButton(&#x27;否&#x27;, QMessageBox.NoRole)   #</span><br><span class="line">        #ok按钮：QMessageBox.AcceptRole</span><br><span class="line">        #cancel按钮：QMessageBox.RejectRole</span><br><span class="line">        #yes按钮：QMessageBox.YesRole</span><br><span class="line">        #No按钮：QMessageBox.NoRole</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        #实例化qpushbotton按钮控件</span><br><span class="line">        self.button = QPushButton(&#x27;信息框&#x27;)                  </span><br><span class="line">        self.button.clicked.connect(self.show_information)  </span><br><span class="line">        </span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.button)#比2.2多了self</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_information(self):</span><br><span class="line">        choice = QuestionMessageBox(self,&#x27;标题&#x27;,&#x27;内容&#x27;)  # information(父类，信息框标题，信息框内容)</span><br><span class="line">        choice.exec()#调用exec方法让消息框显示出来</span><br><span class="line">        if choice.clickedButton().text()==&#x27;是&#x27;:</span><br><span class="line">            self.button.setText(&#x27;hao&#x27;)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())#关闭窗口时，app.exec()返回0并穿给sys.exit()，使python解释器正常退出。</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="2-3文本框控件"><a href="#2-3文本框控件" class="headerlink" title="2.3文本框控件"></a>2.3文本框控件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.username_line = QLineEdit()           #注释1开始</span><br><span class="line">        self.password_line = QLineEdit()</span><br><span class="line">        </span><br><span class="line">        h_layout1 = QHBoxLayout()</span><br><span class="line">        h_layout2 = QHBoxLayout()</span><br><span class="line">        v_layout = QVBoxLayout()                   #注释1结束</span><br><span class="line">        h_layout1.addWidget(QLabel(&#x27;Username:&#x27;))   # 2</span><br><span class="line">        h_layout1.addWidget(self.username_line)</span><br><span class="line">        h_layout2.addWidget(QLabel(&#x27;Password:&#x27;))</span><br><span class="line">        h_layout2.addWidget(self.password_line)</span><br><span class="line">        v_layout.addLayout(h_layout1)</span><br><span class="line">        v_layout.addLayout(h_layout2)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="2-4-4复选框按钮控件QCheckBox"><a href="#2-4-4复选框按钮控件QCheckBox" class="headerlink" title="2.4.4复选框按钮控件QCheckBox"></a>2.4.4复选框按钮控件QCheckBox</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.check_box1 = QCheckBox(&#x27;Check 1&#x27;)</span><br><span class="line">        self.check_box2 = QCheckBox(&#x27;Check 2&#x27;)</span><br><span class="line">        self.check_box3 = QCheckBox(&#x27;Check 3&#x27;)</span><br><span class="line"></span><br><span class="line">        self.check_box1.setChecked(True)                       #复选框默认选中和未选中</span><br><span class="line">        self.check_box2.setChecked(False)</span><br><span class="line">        self.check_box3.setTristate(True)                      #增加状态</span><br><span class="line">        self.check_box3.setCheckState(Qt.PartiallyChecked)     #设置半选中状态，也可用来设置按钮的选中和未选中状态</span><br><span class="line">        #Qt.Uncheckd          未选中状态</span><br><span class="line">        #Qt.PartiallyChecked  半选中状态</span><br><span class="line">        #Qt.Checked           选中状态</span><br><span class="line">        </span><br><span class="line">        self.check_box1.stateChanged.connect(self.show_state)  #注释2开始</span><br><span class="line">        self.check_box2.stateChanged.connect(self.show_state)</span><br><span class="line">        self.check_box3.stateChanged.connect(self.show_state)  #注释2结束</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.check_box1)</span><br><span class="line">        v_layout.addWidget(self.check_box2)</span><br><span class="line">        v_layout.addWidget(self.check_box3)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def show_state(self):</span><br><span class="line">        print(self.sender().checkState())</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="2-4-5可编辑的下拉框按钮控件QcomboBox"><a href="#2-4-5可编辑的下拉框按钮控件QcomboBox" class="headerlink" title="2.4.5可编辑的下拉框按钮控件QcomboBox"></a>2.4.5可编辑的下拉框按钮控件QcomboBox</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.combo_box = QComboBox()</span><br><span class="line">        self.combo_box.addItem(&#x27;Louis&#x27;)</span><br><span class="line">        self.combo_box.addItems([&#x27;Mike&#x27;, &#x27;Mary&#x27;, &#x27;John&#x27;])</span><br><span class="line">        self.combo_box.currentIndexChanged.connect(self.show_choice)</span><br><span class="line"></span><br><span class="line">        self.combo_box.setEditable(True)           #设置可编辑的下拉框</span><br><span class="line">        self.line_edit = self.combo_box.lineEdit() #获取下拉框的内容</span><br><span class="line">        self.line_edit.textChanged.connect(self.show_edited_text)  # 2</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.combo_box)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_choice(self):</span><br><span class="line">        print(self.combo_box.currentIndex())</span><br><span class="line">        print(self.combo_box.currentText())</span><br><span class="line"></span><br><span class="line">    def show_edited_text(self):</span><br><span class="line">        print(self.line_edit.text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="2-5-1液晶数字控件QLCDNumber"><a href="#2-5-1液晶数字控件QLCDNumber" class="headerlink" title="2.5.1液晶数字控件QLCDNumber"></a>2.5.1液晶数字控件QLCDNumber</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.lcd1 = QLCDNumber()</span><br><span class="line">        self.lcd1.setDigitCount(5)                     # 设置QLCDNumber控件的最大长度</span><br><span class="line">        self.lcd1.display(12345)                       # 通过display设置要显示的数字</span><br><span class="line">        self.lcd1.setMode(QLCDNumber.Dec)              # 设置数字的进制</span><br><span class="line">        #QLCDNumber.Hex  十六进制</span><br><span class="line">        #QLCDNumber.Dec  十进制</span><br><span class="line">        #QLCDNumber.Oct  八进制</span><br><span class="line">        #QLCDNumber.Bin  二进制</span><br><span class="line">        </span><br><span class="line">        self.lcd2 = QLCDNumber()</span><br><span class="line">        self.lcd2.setDigitCount(5)</span><br><span class="line">        self.lcd2.display(0.1234)</span><br><span class="line">        self.lcd2.setSegmentStyle(QLCDNumber.Flat)     # 设置浮点数样式</span><br><span class="line">        #QLCDNumber.Outline  片段凸起，并用背景颜色填充</span><br><span class="line">        #QLCDNumber.Filled   片段凸起，并用前景颜色填充</span><br><span class="line">        #QLCDNumber.Flat     片段扁平，并用背景颜色填充</span><br><span class="line"></span><br><span class="line">        self.lcd3 = QLCDNumber()</span><br><span class="line">        self.lcd3.setDigitCount(5)</span><br><span class="line">        self.lcd3.display(123456789)   # 显示对象大于所设置的长度，则显示为0</span><br><span class="line"></span><br><span class="line">        self.lcd4 = QLCDNumber()</span><br><span class="line">        self.lcd4.display(&#x27;HELLO&#x27;)     # QLCNumber控件只能显示这些字符：</span><br><span class="line">        #A、B、C、D、E、F、h、H、L、o、P、r、u、U、Y、O/0、S/5、g/9。</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.lcd1)</span><br><span class="line">        v_layout.addWidget(self.lcd2)</span><br><span class="line">        v_layout.addWidget(self.lcd3)</span><br><span class="line">        v_layout.addWidget(self.lcd4)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="2-5-2数字调节框控件QSpinBox和QDoubleSpinBox"><a href="#2-5-2数字调节框控件QSpinBox和QDoubleSpinBox" class="headerlink" title="2.5.2数字调节框控件QSpinBox和QDoubleSpinBox"></a>2.5.2数字调节框控件QSpinBox和QDoubleSpinBox</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.spinbox = QSpinBox()              # 调节整数</span><br><span class="line">        self.spinbox.setRange(-99, 99)         # 调节整数范围</span><br><span class="line">        self.spinbox.setSingleStep(2)          # 调节整数步长</span><br><span class="line">        self.spinbox.setValue(66)              # 设置初始值</span><br><span class="line">        self.spinbox.valueChanged.connect(self.show_spinbox_value)</span><br><span class="line"></span><br><span class="line">        self.db_spinbox = QDoubleSpinBox()     # 调节浮点数</span><br><span class="line">        self.db_spinbox.setRange(-99.99, 99.99)</span><br><span class="line">        self.db_spinbox.setSingleStep(1.5)</span><br><span class="line">        self.db_spinbox.setValue(66.66)</span><br><span class="line">        self.db_spinbox.valueChanged.connect(self.show_db_spinbox_value)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.spinbox)</span><br><span class="line">        v_layout.addWidget(self.db_spinbox)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def show_spinbox_value(self):</span><br><span class="line">        print(self.spinbox.value())</span><br><span class="line"></span><br><span class="line">    def show_db_spinbox_value(self):</span><br><span class="line">        print(self.db_spinbox.value())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="2-5-3滑动条控件QSlider"><a href="#2-5-3滑动条控件QSlider" class="headerlink" title="2.5.3滑动条控件QSlider"></a>2.5.3滑动条控件QSlider</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.slider1 = QSlider()                           # 滑动条控件</span><br><span class="line">        self.slider1.setRange(0, 99)                       # 范围</span><br><span class="line">        self.slider1.setValue(66)                          # 初始值</span><br><span class="line">        self.slider1.setSingleStep(2)                      # 步长</span><br><span class="line">        self.slider1.valueChanged.connect(self.show_value) </span><br><span class="line"></span><br><span class="line">        self.slider2 = QSlider()                           </span><br><span class="line">        self.slider2.setOrientation(Qt.Horizontal)        # 设置滑动条方向为水平</span><br><span class="line">        # Qt.Horizontal 水平方向</span><br><span class="line">        # Qt.Vertical   垂直方向</span><br><span class="line">        </span><br><span class="line">        self.slider2.setMinimum(0)</span><br><span class="line">        self.slider2.setMaximum(99)                        #设置最大最小值，同setRange</span><br><span class="line"></span><br><span class="line">        self.slider3 = QSlider(Qt.Horizontal)              # 实例化时直接传入滑动条方向</span><br><span class="line">        self.slider3.setRange(0, 99)</span><br><span class="line">        self.slider3.setTickPosition(QSlider.TicksBelow)   # 增加刻度线</span><br><span class="line">        # QSlider.NoTicks        不添加刻度线</span><br><span class="line">        # QSlider.TicksBothSides 在滑动条两侧都添加刻度线</span><br><span class="line">        # QSlider.TicksAbove     在水平滑动条上方添加刻度线</span><br><span class="line">        # QSlider.TicksBelow     在水平滑动条方添加刻度线</span><br><span class="line">        # QSlider.TicksLeft      在垂直滑动条左侧添加刻度线</span><br><span class="line">        # QSlider.TicksRight     在垂直滑动条右侧添加刻度线</span><br><span class="line">        self.slider3.setTickInterval(10)                   # 设置刻度间隔</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.slider1)</span><br><span class="line">        v_layout.addWidget(self.slider2)</span><br><span class="line">        v_layout.addWidget(self.slider3)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def show_value(self):</span><br><span class="line">        print(self.slider1.value())</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="2-5-3滑动条控件QSlider-1"><a href="#2-5-3滑动条控件QSlider-1" class="headerlink" title="2.5.3滑动条控件QSlider"></a>2.5.3滑动条控件QSlider</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.dial = QDial()</span><br><span class="line">        self.dial.setRange(0, 365)                     #设置范围</span><br><span class="line">        self.dial.valueChanged.connect(self.show_value)</span><br><span class="line">        </span><br><span class="line">        self.dial.setNotchesVisible(True)  #是否显示刻度线</span><br><span class="line">        self.dial.setNotchTarget(10.5)     #设置刻度之间的像素间隔（默认3.7像素）</span><br><span class="line">        #self.dial.setWrapping(True)       #加这行代码可以让刻度线对仪表盘360°包裹</span><br><span class="line">        </span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.dial)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_value(self):</span><br><span class="line">        print(self.dial.value())</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="2-6-1日历控件QCalendarWidge"><a href="#2-6-1日历控件QCalendarWidge" class="headerlink" title="2.6.1日历控件QCalendarWidge"></a>2.6.1日历控件QCalendarWidge</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">爬虫任务是耗时的，所以我们不能把爬虫代码放在UI主线程中执行，否则会导致界面无响应。正确的做法是将爬虫任务交给子线程来完成</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">from parsel import Selector</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CrawlThread(QThread):</span><br><span class="line">    log_signal = pyqtSignal(str)</span><br><span class="line">    finish_signal = pyqtSignal()</span><br><span class="line">    data_signal = pyqtSignal(list)</span><br><span class="line"></span><br><span class="line">    def __init__(self, window):</span><br><span class="line">        super(CrawlThread, self).__init__()</span><br><span class="line">        self.window = window</span><br><span class="line">        self.flag = True</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        page_count = 0</span><br><span class="line">        total_page = self.window.page_spin_box.value()</span><br><span class="line"></span><br><span class="line">        self.flag = True</span><br><span class="line">        while page_count &lt; total_page:</span><br><span class="line">            if self.flag:</span><br><span class="line">                page_count += 1</span><br><span class="line">                self.crawl_page(page_count)</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">        self.finish_signal.emit()   # 传递爬取日志</span><br><span class="line"></span><br><span class="line">    def crawl_page(self, page_num):</span><br><span class="line">        self.log_signal.emit(f&#x27;当前正在爬取第&#123;page_num&#125;页&#x27;)</span><br><span class="line"></span><br><span class="line">        page_url = f&#x27;https://quotes.toscrape.com/page/&#123;page_num&#125;/&#x27;</span><br><span class="line">        response = requests.get(page_url)</span><br><span class="line"></span><br><span class="line">        if &#x27;No quotes found!&#x27; in response.text:</span><br><span class="line">            self.log_signal.emit(&#x27;当前页面上没有名言了，不再继续爬取。&#x27;)</span><br><span class="line">            self.stop()</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        selector = Selector(response.text)</span><br><span class="line">        quotes = selector.xpath(&#x27;//div[@class=&quot;quote&quot;]&#x27;)</span><br><span class="line"></span><br><span class="line">        for quote in quotes:</span><br><span class="line">            content = quote.xpath(&#x27;./span/text()&#x27;).extract_first()</span><br><span class="line">            author = quote.xpath(&#x27;./span/small/text()&#x27;).extract_first()</span><br><span class="line">            tags = quote.xpath(&#x27;./div[@class=&quot;tags&quot;]/a/text()&#x27;).extract()</span><br><span class="line">            tags = &#x27;;&#x27;.join(tags)</span><br><span class="line">            print([content, author, tags])</span><br><span class="line">            self.data_signal.emit([content, author, tags])  # 传递数据</span><br><span class="line"></span><br><span class="line">    def stop(self):</span><br><span class="line">        self.flag = False</span><br></pre></td></tr></table></figure><h3 id="2-6-2日期时间控件QDateTimeEdit"><a href="#2-6-2日期时间控件QDateTimeEdit" class="headerlink" title="2.6.2日期时间控件QDateTimeEdit"></a>2.6.2日期时间控件QDateTimeEdit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.datetime_edit = QDateTimeEdit(QDateTime.currentDateTime())</span><br><span class="line">        self.datetime_edit.setDisplayFormat(&#x27;yyyy-MM-dd HH:mm:ss&#x27;) # 1</span><br><span class="line">        self.datetime_edit.setDateRange(QDate(1949, 10, 1), QDate(6666, 6, 6))</span><br><span class="line">        self.datetime_edit.setCalendarPopup(True)      # 2</span><br><span class="line">        self.datetime_edit.dateTimeChanged.connect(self.show_text)  # 3</span><br><span class="line"></span><br><span class="line">        self.date_edit = QDateEdit(QDate.currentDate())</span><br><span class="line">        self.date_edit.setDisplayFormat(&#x27;yyyy-MM-dd&#x27;)</span><br><span class="line">        self.date_edit.setDateRange(QDate(1949, 10, 1), QDate(6666, 6, 6))</span><br><span class="line">        self.date_edit.dateChanged.connect(self.show_text)</span><br><span class="line"></span><br><span class="line">        self.time_edit = QTimeEdit(QTime.currentTime())</span><br><span class="line">        self.time_edit.setDisplayFormat(&#x27;HH:mm:ss&#x27;)</span><br><span class="line">        self.time_edit.setTimeRange(QTime(6, 6, 6), QTime(8, 8, 8))</span><br><span class="line">        self.date_edit.timeChanged.connect(self.show_text)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.datetime_edit)</span><br><span class="line">        v_layout.addWidget(self.date_edit)</span><br><span class="line">        v_layout.addWidget(self.time_edit)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def show_text(self):</span><br><span class="line">        print(self.sender().text())</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="2-7-1定时器控件QTimer"><a href="#2-7-1定时器控件QTimer" class="headerlink" title="2.7.1定时器控件QTimer"></a>2.7.1定时器控件QTimer</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.lcd = QLCDNumber()                            #显示时间</span><br><span class="line">        self.lcd.setSegmentStyle(QLCDNumber.Flat)</span><br><span class="line">        self.lcd.setDigitCount(20)                         #显示最大字符数</span><br><span class="line">        self.update_date_time()                            #显示当前时间（不会动）</span><br><span class="line">        </span><br><span class="line">        self.timer = QTimer()                              #注释2开始</span><br><span class="line">        self.timer.start(1000)                             #每隔1000ms发射一次timeout信号</span><br><span class="line">        self.timer.timeout.connect(self.update_date_time)  #链接的槽函数将新时间显示到QLCDNumber控件上</span><br><span class="line">    </span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.lcd)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def update_date_time(self):</span><br><span class="line">        date_time = QDateTime.currentDateTime().toString(&#x27;yyyy-M-d hh:mm:ss&#x27;)</span><br><span class="line">        self.lcd.display(date_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="2-7-2进度条控件QProgressBar"><a href="#2-7-2进度条控件QProgressBar" class="headerlink" title="2.7.2进度条控件QProgressBar"></a>2.7.2进度条控件QProgressBar</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.value = 0                                 # 用于保存当前进度值</span><br><span class="line"></span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.start(100)</span><br><span class="line">        self.timer.timeout.connect(self.update_progress)</span><br><span class="line"></span><br><span class="line">        self.progress_bar1 = QProgressBar()            #进度条1</span><br><span class="line">        self.progress_bar1.setRange(0, 100)</span><br><span class="line">        #self.progress_bar1.setRange(0, 0)     #使进度条显示繁忙</span><br><span class="line">        </span><br><span class="line">        self.progress_bar2 = QProgressBar()</span><br><span class="line">        self.progress_bar2.setTextVisible(False)       #隐藏进度条2的数字</span><br><span class="line">        self.progress_bar2.setMinimum(0)</span><br><span class="line">        self.progress_bar2.setMaximum(100)</span><br><span class="line">        self.progress_bar2.setInvertedAppearance(True) #使进度条从右向左填满</span><br><span class="line">        </span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.progress_bar1)</span><br><span class="line">        v_layout.addWidget(self.progress_bar2)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def update_progress(self):</span><br><span class="line">        self.value += 1</span><br><span class="line">        self.progress_bar1.setValue(self.value)</span><br><span class="line">        self.progress_bar2.setValue(self.value)</span><br><span class="line"></span><br><span class="line">        if self.value == 100:</span><br><span class="line">            self.timer.stop()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="3-1-1分组框控件QGroupBox"><a href="#3-1-1分组框控件QGroupBox" class="headerlink" title="3.1.1分组框控件QGroupBox"></a>3.1.1分组框控件QGroupBox</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.letter_group_box = QGroupBox(&#x27;字母&#x27;)   #直接放入名称</span><br><span class="line">        self.number_group_box = QGroupBox()</span><br><span class="line">        self.number_group_box.setTitle(&#x27;数字&#x27;)      #使用setTitle放入名称</span><br><span class="line">        </span><br><span class="line">        self.letter1 = QLabel(&#x27;a&#x27;)</span><br><span class="line">        self.letter2 = QLabel(&#x27;b&#x27;)</span><br><span class="line">        self.letter3 = QLabel(&#x27;c&#x27;)</span><br><span class="line">        self.number1 = QLabel(&#x27;1&#x27;)</span><br><span class="line">        self.number2 = QLabel(&#x27;2&#x27;)</span><br><span class="line">        self.number3 = QLabel(&#x27;3&#x27;)</span><br><span class="line"></span><br><span class="line">        letter_v_layout = QVBoxLayout()</span><br><span class="line">        number_v_layout = QVBoxLayout()</span><br><span class="line">        window_v_layout = QVBoxLayout()</span><br><span class="line">        letter_v_layout.addWidget(self.letter1)</span><br><span class="line">        letter_v_layout.addWidget(self.letter2)</span><br><span class="line">        letter_v_layout.addWidget(self.letter3)</span><br><span class="line">        number_v_layout.addWidget(self.number1)</span><br><span class="line">        number_v_layout.addWidget(self.number2)</span><br><span class="line">        number_v_layout.addWidget(self.number3)</span><br><span class="line"></span><br><span class="line">        self.letter_group_box.setLayout(letter_v_layout)   #注释2开始</span><br><span class="line">        self.number_group_box.setLayout(number_v_layout)   #注释2结束</span><br><span class="line">        window_v_layout.addWidget(self.letter_group_box)   #注释3开始</span><br><span class="line">        window_v_layout.addWidget(self.number_group_box)</span><br><span class="line">        self.setLayout(window_v_layout)                    #注释3结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-1-2工具箱控件QToolBox"><a href="#3-1-2工具箱控件QToolBox" class="headerlink" title="3.1.2工具箱控件QToolBox"></a>3.1.2工具箱控件QToolBox</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.letter_group_box = QGroupBox()</span><br><span class="line">        self.number_group_box = QGroupBox()</span><br><span class="line"></span><br><span class="line">        self.letter1 = QLabel(&#x27;a&#x27;)</span><br><span class="line">        self.letter2 = QLabel(&#x27;b&#x27;)</span><br><span class="line">        self.letter3 = QLabel(&#x27;c&#x27;)</span><br><span class="line">        self.number1 = QLabel(&#x27;1&#x27;)</span><br><span class="line">        self.number2 = QLabel(&#x27;2&#x27;)</span><br><span class="line">        self.number3 = QLabel(&#x27;3&#x27;)</span><br><span class="line"></span><br><span class="line">        letter_v_layout = QVBoxLayout()</span><br><span class="line">        number_v_layout = QVBoxLayout()</span><br><span class="line">        window_v_layout = QVBoxLayout()</span><br><span class="line">        letter_v_layout.addWidget(self.letter1)</span><br><span class="line">        letter_v_layout.addWidget(self.letter2)</span><br><span class="line">        letter_v_layout.addWidget(self.letter3)</span><br><span class="line">        number_v_layout.addWidget(self.number1)</span><br><span class="line">        number_v_layout.addWidget(self.number2)</span><br><span class="line">        number_v_layout.addWidget(self.number3)</span><br><span class="line">        self.letter_group_box.setLayout(letter_v_layout)</span><br><span class="line">        self.number_group_box.setLayout(number_v_layout)</span><br><span class="line"></span><br><span class="line">        self.tool_box = QToolBox()                            </span><br><span class="line">        self.tool_box.addItem(self.letter_group_box, &#x27;字母&#x27;)</span><br><span class="line">        self.tool_box.insertItem(0, self.number_group_box, &#x27;数字&#x27;)#0表示插入位置</span><br><span class="line">        self.tool_box.setItemIcon(0, QIcon(&#x27;number.png&#x27;))     #加图标</span><br><span class="line">        self.tool_box.setItemIcon(1, QIcon(&#x27;letter.png&#x27;))     #加图标</span><br><span class="line">        self.tool_box.currentChanged.connect(self.show_current_text) #信号会在抽屉被切换时发射</span><br><span class="line"></span><br><span class="line">        window_v_layout.addWidget(self.tool_box)</span><br><span class="line">        self.setLayout(window_v_layout)</span><br><span class="line"></span><br><span class="line">    def show_current_text(self):</span><br><span class="line">        index = self.tool_box.currentIndex()</span><br><span class="line">        print(self.tool_box.itemText(index))</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="3-2-1控件滚动区域QScrollArea"><a href="#3-2-1控件滚动区域QScrollArea" class="headerlink" title="3.2.1控件滚动区域QScrollArea"></a>3.2.1控件滚动区域QScrollArea</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.pic_scroll_area = QScrollArea()               #实例化对象</span><br><span class="line">        self.btn_scroll_area = QScrollArea()               </span><br><span class="line"></span><br><span class="line">        pic_label = QLabel()</span><br><span class="line">        pic_label.setPixmap(QPixmap(&#x27;pyqt.jpg&#x27;))</span><br><span class="line">        self.pic_scroll_area.setWidget(pic_label)          #显示图片</span><br><span class="line">        self.pic_scroll_area.ensureVisible(750, 750, 100, 100)#（坐标x，坐标y，边距x，边距y）</span><br><span class="line">        </span><br><span class="line">        widget_for_btns = QWidget()                        #注释3开始</span><br><span class="line">        btn_h_layout = QHBoxLayout()</span><br><span class="line">        for i in range(100):</span><br><span class="line">            btn = QPushButton(f&#x27;按钮&#123;i+1&#125;&#x27;)</span><br><span class="line">            btn_h_layout.addWidget(btn)</span><br><span class="line">        widget_for_btns.setLayout(btn_h_layout)</span><br><span class="line">        self.btn_scroll_area.setWidget(widget_for_btns)</span><br><span class="line">        self.btn_scroll_area.setAlignment(Qt.AlignCenter)  #注释3结束</span><br><span class="line"></span><br><span class="line">        window_v_layout = QVBoxLayout()</span><br><span class="line">        window_v_layout.addWidget(self.pic_scroll_area)</span><br><span class="line">        window_v_layout.addWidget(self.btn_scroll_area)</span><br><span class="line">        self.setLayout(window_v_layout)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-2-2滚动条控件QScrollBar"><a href="#3-2-2滚动条控件QScrollBar" class="headerlink" title="3.2.2滚动条控件QScrollBar"></a>3.2.2滚动条控件QScrollBar</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">笔者会隐藏掉QScrollArea自带的水平滚动条，并实例化一个新的QScrollBar对象来代替它</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.scroll_area = QScrollArea()</span><br><span class="line">        self.original_bar = self.scroll_area.horizontalScrollBar()</span><br><span class="line"></span><br><span class="line">        self.pic_label = QLabel()</span><br><span class="line">        self.pic_label.setPixmap(QPixmap(&#x27;pyqt.jpg&#x27;))</span><br><span class="line">        self.scroll_area.setWidget(self.pic_label)</span><br><span class="line"></span><br><span class="line">        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)# 隐藏水平滚动条</span><br><span class="line">        # Qt.ScrollBarAsNeeded  滚动条在鼠标有滚动操作时才会显示（macOS和Linux系统上的默认显示模式。</span><br><span class="line">        # Qt.ScrollBarAlwaysOff 不显示滚动条</span><br><span class="line">        # Qt.ScrollBarAlwaysOn  滚动条会一直显示（windows系统上的默认显示模式）</span><br><span class="line"></span><br><span class="line">        self.scroll_bar = QScrollBar()                #实例化QScrollBar控件对象</span><br><span class="line">        self.scroll_bar.setOrientation(Qt.Horizontal) #设置水平滚动条，默认是垂直滚动条</span><br><span class="line">        self.scroll_bar.valueChanged.connect(self.move_bar) </span><br><span class="line">        self.scroll_bar.setMinimum(self.original_bar.minimum())</span><br><span class="line">        self.scroll_bar.setMaximum(self.original_bar.maximum())#实例化一个新的QScrollBar控件对象，用setOrientation(Qt.Horizontal)将它设置成水平滚动条（默认是垂直滚动条）。valuedChanged信号会在滚动条移动时发射。QScrollBar还有一个sliderMoved信号，它只有在用户使用鼠标按住并移动滚动条时才会发射，用鼠标滚轮移动时不会发射。槽函数通过value()方法获取到滚动条的值后，将其传递给了自带的滚动条original_bar。这样在移动scroll_bar时，original_bar会跟着移动（虽然看不见），图片也就会跟着移动了。自定义的scroll_bar的最大值、最小值要和原先自带的original_bar的一样，所以需要用setMinimum()和setMaximum()方法进行设置</span><br><span class="line">        # self.scroll_area.setHorizontalScrollBar(self.scroll_bar)# 3</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.scroll_area)</span><br><span class="line">        v_layout.addWidget(self.scroll_bar)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def move_bar(self):</span><br><span class="line">        value = self.scroll_bar.value()</span><br><span class="line">        self.original_bar.setValue(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="3-3-1拆分窗口控件QSplitter"><a href="#3-3-1拆分窗口控件QSplitter" class="headerlink" title="3.3.1拆分窗口控件QSplitter"></a>3.3.1拆分窗口控件QSplitter</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.splitter = QSplitter()</span><br><span class="line"></span><br><span class="line">        self.text_edit1 = QTextEdit()</span><br><span class="line">        self.text_edit2 = QTextEdit()</span><br><span class="line">        self.text_edit3 = QTextEdit()</span><br><span class="line">        self.text_edit1.setPlaceholderText(&#x27;edit 1&#x27;)</span><br><span class="line">        self.text_edit2.setPlaceholderText(&#x27;edit 2&#x27;)</span><br><span class="line">        self.text_edit3.setPlaceholderText(&#x27;edit 3&#x27;)</span><br><span class="line"></span><br><span class="line">        self.splitter.addWidget(self.text_edit1)       </span><br><span class="line">        self.splitter.insertWidget(0, self.text_edit2) #需要指定插入位置的索引0</span><br><span class="line">        self.splitter.addWidget(self.text_edit3)</span><br><span class="line">        self.splitter.setSizes([300, 200, 100])        # 列表中元素为各个控件宽度，没有设宽度的控件则不显示</span><br><span class="line">        self.splitter.setOpaqueResize(False)           # False：拖拽动作防守后控件大小才改变  True：控件大小实时改变</span><br><span class="line">        self.splitter.setOrientation(Qt.Vertical)      #垂直布局各个控件</span><br><span class="line">        </span><br><span class="line">        window_h_layout = QHBoxLayout()</span><br><span class="line">        window_h_layout.addWidget(self.splitter)</span><br><span class="line">        self.setLayout(window_h_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-3-2-标签页控件QTabWidget"><a href="#3-3-2-标签页控件QTabWidget" class="headerlink" title="3.3.2 标签页控件QTabWidget"></a>3.3.2 标签页控件QTabWidget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">QTabWidget用来分页显示内容，它上面有一些标签。用户每单击一个标签就能够显示一个选项卡，</span><br><span class="line">这样多个选项卡就可以共享一块区域，可以节省很多空间</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.tab_widget = QTabWidget()</span><br><span class="line"></span><br><span class="line">        self.text_edit1 = QTextEdit()</span><br><span class="line">        self.text_edit2 = QTextEdit()</span><br><span class="line">        self.text_edit3 = QTextEdit()</span><br><span class="line">        self.text_edit1.setPlaceholderText(&#x27;edit 1&#x27;)</span><br><span class="line">        self.text_edit2.setPlaceholderText(&#x27;edit 2&#x27;)</span><br><span class="line">        self.text_edit3.setPlaceholderText(&#x27;edit 3&#x27;)</span><br><span class="line"></span><br><span class="line">        self.tab_widget.addTab(self.text_edit1, &#x27;edit 1&#x27;)    #(控件，选项卡文本)</span><br><span class="line">        self.tab_widget.insertTab(0, self.text_edit2, &#x27;edit 2&#x27;)#（索引，控件，选项卡文本）</span><br><span class="line">        self.tab_widget.addTab(self.text_edit3, QIcon(&#x27;edit.png&#x27;), &#x27;edit 3&#x27;)    #(控件，图标，选项卡文本)</span><br><span class="line">                                                             </span><br><span class="line">        self.tab_widget.currentChanged.connect(self.show_tab_name)</span><br><span class="line">        self.tab_widget.setTabShape(QTabWidget.Triangular)   # 设置选项卡形状，</span><br><span class="line">        # QTabWidget.Rounded     圆角（默认形状）</span><br><span class="line">        # QTabWidget.Triangular  三角</span><br><span class="line">        self.tab_widget.setTabPosition(QTabWidget.South)#设置选项卡位置，无这行代码则默认选项卡在上方</span><br><span class="line">        # QTabWidget.North 选项卡在窗口上方</span><br><span class="line">        # QTabWidget.West  选项卡在窗口左方</span><br><span class="line">        # QTabWidget.East  选项卡在窗口右方</span><br><span class="line">        # QTabWidget.South 选项卡在窗口下方</span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.tab_widget)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_tab_name(self):</span><br><span class="line">        index = self.tab_widget.currentIndex()#获取当前选项卡的索引</span><br><span class="line">        print(self.tab_widget.tabText(index))</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-3-3-堆栈控件QStackedWidget"><a href="#3-3-3-堆栈控件QStackedWidget" class="headerlink" title="3.3.3 堆栈控件QStackedWidget"></a>3.3.3 堆栈控件QStackedWidget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">堆栈控件和标签页控件相似，可以让多个界面共享同一块区域，不同的是，</span><br><span class="line">堆栈控件不提供选项卡，而是将各个界面按照层级顺序上下摆放的。</span><br><span class="line">QStackedWidget通常需要搭配其他控件来实现切换效果</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.stacked_widget = QStackedWidget()</span><br><span class="line"></span><br><span class="line">        self.text_edit1 = QTextEdit()</span><br><span class="line">        self.text_edit2 = QTextEdit()</span><br><span class="line">        self.text_edit3 = QTextEdit()</span><br><span class="line">        self.text_edit1.setPlaceholderText(&#x27;edit 1&#x27;)</span><br><span class="line">        self.text_edit2.setPlaceholderText(&#x27;edit 2&#x27;)</span><br><span class="line">        self.text_edit3.setPlaceholderText(&#x27;edit 3&#x27;)</span><br><span class="line"></span><br><span class="line">        self.stacked_widget.addWidget(self.text_edit1) #注释1， QStackedWidget同样用addWidget()和insertWidget()添加控件</span><br><span class="line">        self.stacked_widget.insertWidget(0, self.text_edit2)</span><br><span class="line">        self.stacked_widget.addWidget(self.text_edit3) #注释1结束</span><br><span class="line">        self.stacked_widget.currentChanged.connect(self.show_text)# 2</span><br><span class="line"></span><br><span class="line">        self.btn1 = QPushButton(&#x27;show edit 1&#x27;)         #注释3开始</span><br><span class="line">        self.btn2 = QPushButton(&#x27;show edit 2&#x27;)</span><br><span class="line">        self.btn3 = QPushButton(&#x27;show edit 3&#x27;)</span><br><span class="line">        self.btn1.clicked.connect(self.change_edit)</span><br><span class="line">        self.btn2.clicked.connect(self.change_edit)</span><br><span class="line">        self.btn3.clicked.connect(self.change_edit)    #注释3结束</span><br><span class="line"></span><br><span class="line">        btn_h_layout = QHBoxLayout()</span><br><span class="line">        window_v_layout = QVBoxLayout()</span><br><span class="line">        btn_h_layout.addWidget(self.btn1)</span><br><span class="line">        btn_h_layout.addWidget(self.btn2)</span><br><span class="line">        btn_h_layout.addWidget(self.btn3)</span><br><span class="line">        window_v_layout.addLayout(btn_h_layout)</span><br><span class="line">        window_v_layout.addWidget(self.stacked_widget)</span><br><span class="line">        self.setLayout(window_v_layout)</span><br><span class="line"></span><br><span class="line">    def show_text(self):</span><br><span class="line">        edit = self.stacked_widget.currentWidget()</span><br><span class="line">        print(edit.placeholderText())  #打印占位符</span><br><span class="line"></span><br><span class="line">    def change_edit(self):</span><br><span class="line">        btn = self.sender()</span><br><span class="line">        if btn.text() == &#x27;show edit 1&#x27;:</span><br><span class="line">            self.stacked_widget.setCurrentIndex(1)</span><br><span class="line">        elif btn.text() == &#x27;show edit 2&#x27;:</span><br><span class="line">            self.stacked_widget.setCurrentIndex(0)</span><br><span class="line">        else:</span><br><span class="line">            self.stacked_widget.setCurrentIndex(2)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-3-4-多文档区域控件QMdiArea"><a href="#3-3-4-多文档区域控件QMdiArea" class="headerlink" title="3.3.4 多文档区域控件QMdiArea"></a>3.3.4 多文档区域控件QMdiArea</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">多文档区域控件QMdiArea(Multi-document Interface，MDI)提供了一块可以显示多个窗口的区域。</span><br><span class="line">区域上的每一个窗口都属于QMdiSubWindow类，我们可以在各个窗口上设置各种控件</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.mdi_area = QMdiArea()                         #实例化了一个多文档区域控件对象和4个按钮控件对象</span><br><span class="line"></span><br><span class="line">        self.new_btn = QPushButton(&#x27;新建窗口&#x27;)</span><br><span class="line">        self.close_btn = QPushButton(&#x27;关闭全部&#x27;)</span><br><span class="line">        self.tile_btn = QPushButton(&#x27;平铺布局&#x27;)</span><br><span class="line">        self.cascade_btn = QPushButton(&#x27;层叠布局&#x27;)          #注释1结束</span><br><span class="line">        self.new_btn.clicked.connect(self.add_new_edit)    # 2</span><br><span class="line">        self.close_btn.clicked.connect(self.close_all)         # 3</span><br><span class="line">        self.tile_btn.clicked.connect(self.mdi_area.tileSubWindows)#注释4开始</span><br><span class="line">        self.cascade_btn.clicked.connect(self.mdi_area.cascadeSubWindows)#注释4结束</span><br><span class="line">        #多文档区域中的窗口有两种布局方式：</span><br><span class="line">        #  一种是平铺布局，窗口就像瓦片一样铺满整个区域，可以用tileSubWindows()方法实现；</span><br><span class="line">        #  另一种是层叠布局，一个窗口放在另一个窗口上，有遮挡关系，可以用cascadeSubWindows()方法实现。</span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.new_btn)</span><br><span class="line">        v_layout.addWidget(self.close_btn)</span><br><span class="line">        v_layout.addWidget(self.cascade_btn)</span><br><span class="line">        v_layout.addWidget(self.tile_btn)</span><br><span class="line">        v_layout.addWidget(self.mdi_area)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def add_new_edit(self):</span><br><span class="line">        new_edit = QTextEdit()</span><br><span class="line">        sub_window = QMdiSubWindow()</span><br><span class="line">        sub_window.setWidget(new_edit)</span><br><span class="line">        self.mdi_area.addSubWindow(sub_window)</span><br><span class="line">        sub_window.show()</span><br><span class="line"></span><br><span class="line">    def close_all(self):</span><br><span class="line">        self.mdi_area.closeAllSubWindows()  #该方法只是关闭窗口而已，窗口对象还是占内存的，所以要用deleterLater()方法将其彻底销毁</span><br><span class="line">        all_windows = self.mdi_area.subWindowList()</span><br><span class="line">        for window in all_windows:</span><br><span class="line">            window.deleteLater()</span><br><span class="line">            #QMdiArea区域中的所有窗口可以通过subWindowList()获取，该方法返回一个列表，其中的窗口元素默认按照创建时间排序</span><br><span class="line">            </span><br><span class="line">            #QMdiArea.CreationOrder 按照创建时间排序(默认排序方式)</span><br><span class="line">            #QMdiAreaStackingOrder  按照堆叠方式排序，最前面的窗口排在列表最后一位</span><br><span class="line">            #QMdiArea.ActivationHistoryOrder 按照历史激活时间排序</span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="3-4-列表视图控件、树形视图控件、表格视图控件"><a href="#3-4-列表视图控件、树形视图控件、表格视图控件" class="headerlink" title="3.4 列表视图控件、树形视图控件、表格视图控件"></a>3.4 列表视图控件、树形视图控件、表格视图控件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#PyQt的MVC结构。M表示模型(Model)，跟数据定义和处理有关的东西全部由该部分完成。</span><br><span class="line">#V表示视图(View)，用来渲染、呈现数据。C表示控制器(Controller)，这部分由代理（Delegate，也可以叫作委托）完成，它用来调节数据在视图上的呈现方式，可以实现更高级的功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#数据模型</span><br><span class="line"></span><br><span class="line"># QStringListModel    存储一个字符串列表</span><br><span class="line"># QStandardltemModel  存储QStandardltem类型的数据，可以将QStandardltem看成一只小蜂·小蜜蜂可能带有花(有数据)，也可能没有·而QStandardltemModel就是蜂巢，是各个小蜜蜂集合工作的场所</span><br><span class="line"># QFileSystemModel    操作文本文件系统·以前用的是QDirModel，它已经被淘太了，建议用QFileSystemModel来代替</span><br><span class="line"># QSqlQueryModel      操作SQL语句</span><br><span class="line"># QSqlTableModel      操作SQL表</span><br><span class="line"># QSqlRelationalTableModel 和QSqlTableModel-样用来操作SQL表，不过该模型还供外键支持</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-1-列表视图控件QListView"><a href="#3-4-1-列表视图控件QListView" class="headerlink" title="3.4.1 列表视图控件QListView"></a>3.4.1 列表视图控件QListView</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">QListView将存储在模型中的数据以列表形式呈现出来，列表中的各项内容一行行从上往下进行排列。</span><br><span class="line">在示例代码3-10中，我们将学习如何使用QListView以及它常用的模型QStringListModel。</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.left_model = QStringListModel()               #注释1开始</span><br><span class="line">        self.right_model = QStringListModel()              #注释1结束</span><br><span class="line"></span><br><span class="line">        self.left_list = [f&#x27;item &#123;i&#125;&#x27; for i in range(20)]  #注释2开始</span><br><span class="line">        self.left_model.setStringList(self.left_list)      #只有left_model通过setStringList()方法设置了数据，所以刚开始只有左边的视图有数据显示</span><br><span class="line"></span><br><span class="line">        self.left_list_view = QListView()</span><br><span class="line">        self.right_list_view = QListView()</span><br><span class="line">        self.left_list_view.setModel(self.left_model)</span><br><span class="line">        self.left_list_view.setEditTriggers(QAbstractItemView.SelectedClicked) #左、右两个视图设置列表各项内容的编辑属性</span><br><span class="line">        # QAbstractltemView.NoEditTriggers   不可编辑</span><br><span class="line">        # QAbstractltemView.CurrentChanged   选中项发生变换时可进行编辑</span><br><span class="line">        # QAbstractltemView.DoubleClicked    双击可进行编辑</span><br><span class="line">        # QAbstractltemView.SelectedClicked  单击已选中项时可进行编辑</span><br><span class="line">        # QAbstractltemView.EditKeyPressed   在选中项上按Enter键后可进行编辑</span><br><span class="line">        # OAbstractltemView.AnyKeyPressed    在选中项上按任何键后可进行编辑</span><br><span class="line">        # QAbstractltemView.AllEditTriggers  任何情况下都可进行编辑</span><br><span class="line"></span><br><span class="line">        self.left_list_view.doubleClicked.connect(self.choose)   # 如果双击发生在左边的视图上，被双击项的内容就会显示到右边的视图上；而如果双击发生在右边的视图上，就会删除被双击项。</span><br><span class="line">        self.right_list_view.setModel(self.right_model)</span><br><span class="line">        self.right_list_view.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        self.right_list_view.doubleClicked.connect(self.cancel)</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.left_list_view)</span><br><span class="line">        h_layout.addWidget(self.right_list_view)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def choose(self):                         #  QModelIndex就是货架上贴着的商品标签，该标签记录着商品所在的行列位置以及其他的商品信息</span><br><span class="line">        index = self.left_list_view.currentIndex() #获取用户当前双击项的QModelIndex索引对象</span><br><span class="line">        data = index.data()</span><br><span class="line"></span><br><span class="line">        row_count = self.right_model.rowCount() #计算行数</span><br><span class="line">        self.right_model.insertRow(row_count)</span><br><span class="line">        row_index = self.right_model.index(row_count) #用index()获取到该行的QModelIndex索引对象</span><br><span class="line">        self.right_model.setData(row_index, data)</span><br><span class="line"></span><br><span class="line">    def cancel(self):                         # 5</span><br><span class="line">        index = self.right_list_view.currentIndex()  #获取到QModelIndex索引对象</span><br><span class="line">        row_numer = index.row()                      #通过它获取到行号</span><br><span class="line">        self.right_model.removeRow(row_numer)        #再调用removeRow()删除对应的行</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-4-2-树形视图控件QTreeVie"><a href="#3-4-2-树形视图控件QTreeVie" class="headerlink" title="3.4.2 树形视图控件QTreeVie"></a>3.4.2 树形视图控件QTreeVie</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">相较于QListView，QTreeView适合用来呈现有层级关系的数据，比如用来呈现某路径下的各个文件和目录。</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.model = QFileSystemModel()    #注释1开始</span><br><span class="line">        self.model.setRootPath(&#x27;.&#x27;)        #确定目标路径，树形视图显示该路径下的文件和目录</span><br><span class="line">        self.model.setReadOnly(True)       #调用setReadOnly(False)方法后，我们就可以通过双击来进行重命名操作了。</span><br><span class="line"></span><br><span class="line">        self.tree_view = QTreeView()       #用来给路径展开和收缩操作添加动画</span><br><span class="line">        self.tree_view.setModel(self.model)#用来给路径展开和收缩操作添加动画</span><br><span class="line">        self.tree_view.setAnimated(True)   #用来给路径展开和收缩操作添加动画</span><br><span class="line">        self.tree_view.header().setStretchLastSection(True) #header()方法获取树形视图的标题栏，setStretchLastSection(True)方法让标题栏的最后一列拉伸至充满表格</span><br><span class="line">        # setHeaderHidden(True)  隐藏标题栏</span><br><span class="line">        self.tree_view.doubleClicked.connect(self.show_info)# 3</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.tree_view)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_info(self):</span><br><span class="line">        index = self.tree_view.currentIndex()  </span><br><span class="line">        self.tree_view.scrollTo(index)         #scrollTo()用来将滚动条移动到文件或目录的位置，确保它能够显示出来</span><br><span class="line">        self.tree_view.expand(index)           #如果单击的是目录，使用expand()方法就会展开它</span><br><span class="line"></span><br><span class="line">        file_name = self.model.fileName(index) #名称</span><br><span class="line">        file_path = self.model.filePath(index) #路径</span><br><span class="line">        file_size = self.model.size(index)     #大小</span><br><span class="line">        print(file_name, file_path, file_size)</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-4-3-表格视图控件QTableView"><a href="#3-4-3-表格视图控件QTableView" class="headerlink" title="3.4.3 表格视图控件QTableView"></a>3.4.3 表格视图控件QTableView</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">QTableView是一个使用频率非常高的控件，它以表格形式呈现内容，通常和QStandardItemModel搭配使用。</span><br><span class="line">我们可以在QStandardItemModel模型上设置行列数，并在特定行列位置上添加QStandardItem对象，该对象中包含目标数据。</span><br><span class="line">表格视图会根据QStandardItemModel的属性生成同等行列数的表格来显示数据</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.model = QStandardItemModel()   #注释1开始</span><br><span class="line">        self.model.setColumnCount(6) #设置行数和列数</span><br><span class="line">        self.model.setRowCount(6)</span><br><span class="line">        self.model.setHorizontalHeaderLabels([&#x27;第1列&#x27;, &#x27;第2列&#x27;, &#x27;第3列&#x27;,&#x27;第4列&#x27;, &#x27;第5列&#x27;, &#x27;第6列&#x27;])#注释1结束</span><br><span class="line">                  #setVerticalHeaderLabels() 行标题栏文本</span><br><span class="line">        for row in range(6):       #注释2开始</span><br><span class="line">            for column in range(6):</span><br><span class="line">                item = QStandardItem(f&#x27;(&#123;row&#125;, &#123;column&#125;)&#x27;)</span><br><span class="line">                item.setTextAlignment(Qt.AlignCenter) #数据在表格的单元格中居中显示</span><br><span class="line">                self.model.setItem(row, column, item)</span><br><span class="line"></span><br><span class="line">        self.new_items = [QStandardItem(f&#x27;(6, &#123;column&#125;)&#x27;) for column in range(6)]</span><br><span class="line">        self.model.appendRow(self.new_items)#  接受一个QStandardItem对象列表，调用该方法会在表格末尾新增一行，</span><br><span class="line">        #如果要新增一列，则要调用appendColumn()</span><br><span class="line"></span><br><span class="line">        self.table = QTableView()           #表格视图有水平和垂直两种标题栏，分别可用verticalHeader()和horizontalHeader()方法获取到</span><br><span class="line">        self.table.setModel(self.model)</span><br><span class="line">        self.table.verticalHeader().hide() #针对垂直标题栏，我们调用hide()方法将其隐藏。针对水平标题栏，我们让它的最后一列自适应拉伸，不然留出空白不好看。</span><br><span class="line">        self.table.horizontalHeader().setStretchLastSection(True)</span><br><span class="line">        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers) #setEditTriggers()用来设置表格中单元格的编辑属性，这里设置为不可编辑</span><br><span class="line">        self.table.clicked.connect(self.show_cell_info) #注释3结束</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.table)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_cell_info(self):</span><br><span class="line">        index = self.table.currentIndex() #在槽函数中，我们先获取到单元格的索引对象，再调用data()方法获取到单元格上的数据</span><br><span class="line">        data = index.data()</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="3-5-1-简化版列表视图控件QListWidge"><a href="#3-5-1-简化版列表视图控件QListWidge" class="headerlink" title="3.5.1 简化版列表视图控件QListWidge"></a>3.5.1 简化版列表视图控件QListWidge</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.left_list_widget = QListWidget()  #注释1开始</span><br><span class="line">        self.right_list_widget = QListWidget()</span><br><span class="line">        self.left_list_widget.doubleClicked.connect(self.choose)</span><br><span class="line">        self.right_list_widget.doubleClicked.connect(self.cancel)</span><br><span class="line">        self.left_list_widget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        self.right_list_widget.setEditTriggers(QAbstractItemView.NoEditTriggers)#注释1结束</span><br><span class="line"></span><br><span class="line">        for i in range(20):        #注释2开始</span><br><span class="line">            item = QListWidgetItem(f&#x27;item &#123;i&#125;&#x27;)</span><br><span class="line">            self.left_list_widget.addItem(item)#注释2结束</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.left_list_widget)</span><br><span class="line">        h_layout.addWidget(self.right_list_widget)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def choose(self):              # 3</span><br><span class="line">        item = self.left_list_widget.currentItem()</span><br><span class="line">        new_item = QListWidgetItem(item)</span><br><span class="line">        self.right_list_widget.addItem(new_item)</span><br><span class="line"></span><br><span class="line">    def cancel(self):              # 4</span><br><span class="line">        row = self.right_list_widget.currentRow()</span><br><span class="line">        self.right_list_widget.takeItem(row)</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-5-2-简化版树形视图控件QTreeWidget"><a href="#3-5-2-简化版树形视图控件QTreeWidget" class="headerlink" title="3.5.2 简化版树形视图控件QTreeWidget"></a>3.5.2 简化版树形视图控件QTreeWidget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.tree = QTreeWidget()</span><br><span class="line">        self.item1 = QTreeWidgetItem()             #注释1开始</span><br><span class="line">        self.item2 = QTreeWidgetItem()</span><br><span class="line">        self.item3 = QTreeWidgetItem()</span><br><span class="line">        self.item1.setText(0, &#x27;第1章&#x27;)</span><br><span class="line">        self.item2.setText(0, &#x27;第1节&#x27;)</span><br><span class="line">        self.item3.setText(0, &#x27;第1段&#x27;)             #注释1结束</span><br><span class="line">        self.item1.setCheckState(0, Qt.Unchecked)  #注 如果一个项调用了setCheckState()方法，那么它前面就会显示一个复选框</span><br><span class="line">        self.item2.setCheckState(0, Qt.Unchecked)</span><br><span class="line">        self.item3.setCheckState(0, Qt.Unchecked)  #注释2结束</span><br><span class="line">        self.item1.addChild(self.item2)            #添加2是1的子类</span><br><span class="line">        self.item2.addChild(self.item3)</span><br><span class="line"></span><br><span class="line">        self.tree.addTopLevelItem(self.item1) #将最顶层的父项添加到树形视图</span><br><span class="line">        self.tree.setHeaderLabel(&#x27;PyQt教程&#x27;)  #setHeaderLabel()用来设置树形视图的标题栏，如果标题栏存在多列，则可以调用setHeaderLabels()方法。</span><br><span class="line">        self.tree.clicked.connect(self.click_slot) #注释3结束</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.tree)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def click_slot(self):                          # 4</span><br><span class="line">        item = self.tree.currentItem() #获取当前单击的项</span><br><span class="line">        print(item.text(0))            #调用text()获取项上的文本</span><br><span class="line"></span><br><span class="line">        if item == self.item1:</span><br><span class="line">            if self.item1.checkState(0) == Qt.Checked:</span><br><span class="line">                self.item2.setCheckState(0, Qt.Checked)</span><br><span class="line">                self.item3.setCheckState(0, Qt.Checked)</span><br><span class="line">            else:</span><br><span class="line">                self.item2.setCheckState(0, Qt.Unchecked)</span><br><span class="line">                self.item3.setCheckState(0, Qt.Unchecked)</span><br><span class="line">        # click_slot()槽函数通过currentItem()方法获取到当前单击的项，然后调用text()获取项上的文本，记得要传入列号。</span><br><span class="line">        # if逻辑判断下的代码实现了全选/全不选的效果，如果用户勾选了最顶层父项左边的复选框，那么子项的复选框也会一并被勾选；</span><br><span class="line">        # 反之，则全部取消勾选。</span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-5-3-简化版表格视图控件QTableWidget"><a href="#3-5-3-简化版表格视图控件QTableWidget" class="headerlink" title="3.5.3 简化版表格视图控件QTableWidget"></a>3.5.3 简化版表格视图控件QTableWidget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.table = QTableWidget()    #注释1开始</span><br><span class="line">        self.table.setColumnCount(6)</span><br><span class="line">        self.table.setRowCount(6)</span><br><span class="line">        self.table.verticalHeader().hide()</span><br><span class="line">        self.table.clicked.connect(self.show_cell_info)</span><br><span class="line">        self.table.horizontalHeader().setStretchLastSection(True)</span><br><span class="line">        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        self.table.setHorizontalHeaderLabels([&#x27;第1列&#x27;, &#x27;第2列&#x27;, &#x27;第3列&#x27;,&#x27;第4列&#x27;, &#x27;第5列&#x27;, &#x27;第6列&#x27;])#注释1结束</span><br><span class="line">        for row in range(6):</span><br><span class="line">            for column in range(6):</span><br><span class="line">                item = QTableWidgetItem(f&#x27;(&#123;row&#125;, &#123;column&#125;)&#x27;)#注释2开始</span><br><span class="line">                item.setTextAlignment(Qt.AlignCenter)</span><br><span class="line">                self.table.setItem(row, column, item)        #注释2结束</span><br><span class="line"></span><br><span class="line">        row_count = self.table.rowCount()                    #获取行数</span><br><span class="line">        self.table.setRowCount(row_count+1)                  #设置总行数</span><br><span class="line">        for column in range(6):</span><br><span class="line">            self.table.setItem(6, column, QTableWidgetItem(f&#x27;(6, &#123;column&#125;)&#x27;))</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.table)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">    def show_cell_info(self):  # 4</span><br><span class="line">        item = self.table.currentItem()</span><br><span class="line">        print(item.text())</span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="3-6-1-颜色对话框控件QColorDialog"><a href="#3-6-1-颜色对话框控件QColorDialog" class="headerlink" title="3.6.1 颜色对话框控件QColorDialog"></a>3.6.1 颜色对话框控件QColorDialog</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">颜色对话框控件用来让用户选择颜色，选择完毕后颜色就会被设置在目标内容（比如文本、背景等）上</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.text_edit = QTextEdit()</span><br><span class="line">        self.btn = QPushButton(&#x27;显示颜色对话框&#x27;)</span><br><span class="line">        self.btn.clicked.connect(self.set_color)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.text_edit)</span><br><span class="line">        v_layout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def set_color(self):   # QColorDialog调用getColor()方法弹出颜色对话框，返回的值是QColor类型的</span><br><span class="line">        color = QColorDialog.getColor()</span><br><span class="line">        if color.isValid():</span><br><span class="line">            print(color.name())</span><br><span class="line">            print(color.red(), color.green(), color.blue())</span><br><span class="line">            self.text_edit.setTextColor(color)</span><br><span class="line">            # 在将颜色设置到文本编辑框之前，需要先调用isValid()方法判断用户是否选择了颜色，</span><br><span class="line">            # 如果没有选择，而是单击“关闭”按钮或“Cancel”按钮，那么isValid()就会返回False。</span><br><span class="line">            # name()方法用于获取颜色的名称，格式是“#RRGGBB”。red()、green()和blue()分别用来获取红、绿、蓝3个颜色通道的值。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-6-2-字体对话框控件QFontDialog"><a href="#3-6-2-字体对话框控件QFontDialog" class="headerlink" title="3.6.2 字体对话框控件QFontDialog"></a>3.6.2 字体对话框控件QFontDialog</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.text_edit = QTextEdit()</span><br><span class="line">        self.btn = QPushButton(&#x27;显示字体对话框&#x27;)</span><br><span class="line">        self.btn.clicked.connect(self.set_font)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.text_edit)</span><br><span class="line">        v_layout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def set_font(self):   # </span><br><span class="line">        font, is_ok = QFontDialog.getFont()  #  QFontDialog调用getFont()方法弹出字体对话框</span><br><span class="line">        if is_ok:                            #  返回元组，元组中的第一个元素是QFont类型的，第二个元素是布尔类型的</span><br><span class="line">            print(font.family())</span><br><span class="line">            print(font.pointSize())</span><br><span class="line">            self.text_edit.setFont(font)     #  如果值为True，表明用户选择了一种字体，如果没有选择，而是单击“关闭”按钮或“Cancel”按钮，那么is_ok的值就是False。</span><br><span class="line">            #  family()和pointSize()方法分别用来返回字体的名称和大小</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-6-3-输入对话框控件QInputDialog"><a href="#3-6-3-输入对话框控件QInputDialog" class="headerlink" title="3.6.3 输入对话框控件QInputDialog"></a>3.6.3 输入对话框控件QInputDialog</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.name_line_edit = QLineEdit()      #注释1开始</span><br><span class="line">        self.gender_line_edit = QLineEdit()</span><br><span class="line">        self.age_line_edit = QLineEdit()</span><br><span class="line">        self.score_line_edit = QLineEdit()</span><br><span class="line">        self.note_text_edit = QTextEdit()</span><br><span class="line"></span><br><span class="line">        self.name_btn = QPushButton(&#x27;姓名&#x27;)</span><br><span class="line">        self.gender_btn = QPushButton(&#x27;性别&#x27;)</span><br><span class="line">        self.age_btn = QPushButton(&#x27;年龄&#x27;)</span><br><span class="line">        self.score_btn = QPushButton(&#x27;分数&#x27;)</span><br><span class="line">        self.note_btn = QPushButton(&#x27;备注&#x27;)     #注释1结束</span><br><span class="line">        self.name_btn.clicked.connect(self.get_name)</span><br><span class="line">        self.gender_btn.clicked.connect(self.get_gender)</span><br><span class="line">        self.age_btn.clicked.connect(self.get_age)</span><br><span class="line">        self.score_btn.clicked.connect(self.get_score)</span><br><span class="line">        self.note_btn.clicked.connect(self.get_note)</span><br><span class="line"></span><br><span class="line">        g_layout = QGridLayout()</span><br><span class="line">        g_layout.addWidget(self.name_btn, 0, 0)</span><br><span class="line">        g_layout.addWidget(self.name_line_edit, 0, 1)</span><br><span class="line">        g_layout.addWidget(self.gender_btn, 1, 0)</span><br><span class="line">        g_layout.addWidget(self.gender_line_edit, 1, 1)</span><br><span class="line">        g_layout.addWidget(self.age_btn, 2, 0)</span><br><span class="line">        g_layout.addWidget(self.age_line_edit, 2, 1)</span><br><span class="line">        g_layout.addWidget(self.score_btn, 3, 0)</span><br><span class="line">        g_layout.addWidget(self.score_line_edit, 3, 1)</span><br><span class="line">        g_layout.addWidget(self.note_btn, 4, 0)</span><br><span class="line">        g_layout.addWidget(self.note_text_edit, 4, 1)</span><br><span class="line">        self.setLayout(g_layout)</span><br><span class="line"></span><br><span class="line">    def get_name(self):    # 2</span><br><span class="line">        name, is_ok = QInputDialog.getText(self, &#x27;姓名&#x27;, &#x27;请输入姓名&#x27;)</span><br><span class="line">        if is_ok:</span><br><span class="line">            self.name_line_edit.setText(name)</span><br><span class="line"></span><br><span class="line">    def get_gender(self):  # 传入一个列表作为下拉列表框的内容选项</span><br><span class="line">        gender_list = [&#x27;Female&#x27;, &#x27;Male&#x27;]</span><br><span class="line">        gender, is_ok = QInputDialog.getItem(self, &#x27;性别&#x27;, &#x27;请选择性别&#x27;,gender_list , 1 ,True) </span><br><span class="line">        # 数值1表示最初显示下拉列表框中索引为1的选项，也就是&#x27;Male&#x27;。False表示下拉列表框中的选项不可被编辑。</span><br><span class="line">        if is_ok:</span><br><span class="line">            self.gender_line_edit.setText(gender)</span><br><span class="line"></span><br><span class="line">    def get_age(self):   </span><br><span class="line">        age, is_ok = QInputDialog.getInt(self, &#x27;年龄&#x27;, &#x27;请输入年龄&#x27;, 18 ,0 ,120 )</span><br><span class="line">        # 数值18是初始值，0是最小值，120是最大值。</span><br><span class="line">        if is_ok:</span><br><span class="line">            self.age_line_edit.setText(str(age))</span><br><span class="line"></span><br><span class="line">    def get_score(self):  # 5</span><br><span class="line">        score, is_ok = QInputDialog.getDouble(self, &#x27;分数&#x27;, &#x27;请输入分数&#x27;)</span><br><span class="line">        # getDouble()方法也可以设置当前值、最小值和最大值，不过需要传入浮点数。</span><br><span class="line">        if is_ok:</span><br><span class="line">            self.score_line_edit.setText(str(score))</span><br><span class="line"></span><br><span class="line">    def get_note(self):</span><br><span class="line">        note, is_ok = QInputDialog.getMultiLineText(self, &#x27;备注&#x27;, &#x27;请输入备注&#x27;)</span><br><span class="line">        if is_ok:</span><br><span class="line">            self.note_text_edit.setText(note)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="3-6-4-文件对话框控件QFileDialog"><a href="#3-6-4-文件对话框控件QFileDialog" class="headerlink" title="3.6.4 文件对话框控件QFileDialog"></a>3.6.4 文件对话框控件QFileDialog</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">文件对话框控件可以帮助我们快速实现打开文件和保存文件的功能，一般桌面应用都会用到文件对话框控件</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.edit = QTextEdit()</span><br><span class="line">        self.open_folder_btn = QPushButton(&#x27;打开文件夹&#x27;)</span><br><span class="line">        self.open_file_btn = QPushButton(&#x27;打开文件&#x27;)</span><br><span class="line">        self.save_as_btn = QPushButton(&#x27;另存为&#x27;)</span><br><span class="line">        self.open_folder_btn.clicked.connect(self.open_folder)</span><br><span class="line">        self.open_file_btn.clicked.connect(self.open_file)</span><br><span class="line">        self.save_as_btn.clicked.connect(self.save_as)</span><br><span class="line"></span><br><span class="line">        btn_h_layout = QHBoxLayout()</span><br><span class="line">        window_v_layout = QVBoxLayout()</span><br><span class="line">        btn_h_layout.addWidget(self.open_folder_btn)</span><br><span class="line">        btn_h_layout.addWidget(self.open_file_btn)</span><br><span class="line">        btn_h_layout.addWidget(self.save_as_btn)</span><br><span class="line">        window_v_layout.addWidget(self.edit)</span><br><span class="line">        window_v_layout.addLayout(btn_h_layout)</span><br><span class="line">        self.setLayout(window_v_layout)</span><br><span class="line"></span><br><span class="line">    def open_folder(self):   # 用来选择一个文件夹，返回值是文件夹路径</span><br><span class="line">        folder_path = QFileDialog.getExistingDirectory(self, &#x27;打开文件夹&#x27;, &#x27;./&#x27;)</span><br><span class="line">        self.edit.setText(folder_path)</span><br><span class="line"></span><br><span class="line">    def open_file(self):     # 2</span><br><span class="line">        file_path, filter = QFileDialog.getOpenFileName(self, &#x27;打开文件&#x27;, &#x27;./&#x27;, &#x27;格式 (*.txt *.log)&#x27;)# 用来选择单个文件，我们可以往该方法中传入一个过滤器。</span><br><span class="line">        if file_path:  # 用户无法选择被过滤掉的文件。“格式 (*.txt *.log)”表示用户只能在对话框中选择.txt和.log格式的文件。</span><br><span class="line">            with open(file_path, &#x27;r&#x27;) as f:  # 如果要设置多个过滤器，可以用“;;”来进行连接，比如：“格式 (*.txt *.log);;Images (*.png *.jpg)”。</span><br><span class="line">                self.edit.setText(f.read())</span><br><span class="line">                # getOpenFileName()方法的返回值是一个元组，它的第一个元素是用户选择的文件路径，第二个元素是过滤器。</span><br><span class="line">                # 如果要打开多个文件，可以使用getOpenFileNames()。</span><br><span class="line">                </span><br><span class="line">    def save_as(self):     # 3</span><br><span class="line">        save_path, filter = QFileDialog.getSaveFileName(self, &#x27;另存为&#x27;, &#x27;./&#x27;,&#x27;格式 (*.txt *.log)&#x27;)</span><br><span class="line">        if save_path:</span><br><span class="line">            with open(save_path, &#x27;w&#x27;) as f:</span><br><span class="line">                f.write(self.edit.toPlainText())</span><br><span class="line">                # getSaveFileName()方法用来获取用户设置的文件保存路径，传入的过滤器“格式 (*.txt *.log)”表示用户只能将文件保存为.txt和.log格式。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="第4章-深入窗口"><a href="#第4章-深入窗口" class="headerlink" title="第4章　深入窗口"></a>第4章　深入窗口</h2><p>在之前的章节中，所有的窗口都是基于QWidget类的。其实在PyQt中，任何一个控件都可以看作一个窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QLineEdit):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.btn = QPushButton(&#x27;button&#x27;)</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-1-1-窗口标题和图标"><a href="#4-1-1-窗口标题和图标" class="headerlink" title="4.1.1 窗口标题和图标"></a>4.1.1 窗口标题和图标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.setWindowTitle(&#x27;我的软件&#x27;)         # 设置窗口标题</span><br><span class="line">        self.setWindowIcon(QIcon(&#x27;code.png&#x27;))  # 设置窗口图标，传入的是一个Qicon对象</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-1-2-窗口大小和位置-1"><a href="#4-1-2-窗口大小和位置-1" class="headerlink" title="4.1.2 窗口大小和位置-1"></a>4.1.2 窗口大小和位置-1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(600, 400)      # 传入宽度值和高度值就可以设置窗口的初始显示大小</span><br><span class="line">        self.move(0, 0)            # 坐标(0, 0)表示窗口显示在计算机桌面左上角</span><br><span class="line">        self.setGeometry(0, 0, 600, 400) # resize()和move()方法合并后等效于setGeometry()</span><br><span class="line">        # setMinimumwidth() 设置最小宽度</span><br><span class="line">        # setMaximumWidth() 设置最大宽度</span><br><span class="line">        # setMinimumHeight()设置最小高度</span><br><span class="line">        # setMaximumHeight()设置最大高度</span><br><span class="line">        # setMinimumSize()  设置最小尺寸</span><br><span class="line">        # setMaximumSize()  设置最大尺寸</span><br><span class="line">        # width()           宽度</span><br><span class="line">        # height()          获取高度</span><br><span class="line">        # size()            获取尺寸</span><br><span class="line">        # minimumWidth()    获取最小宽度</span><br><span class="line">        # maximumWidth()    获取最大宽度</span><br><span class="line">        # minimumHeight()   获取最小高度</span><br><span class="line">        # maximumHeight()   获取最大高度</span><br><span class="line">        # minimumSize()     获取最小尺寸</span><br><span class="line">        # maximumSize()     获取最大尺寸</span><br><span class="line">        # x()               获取x坐标</span><br><span class="line">        # y()               取y坐标</span><br><span class="line">        # pos()             获取X和y坐标，返回一个QPoin类型的对象</span><br><span class="line">        # geometry()        获取坐标和尺寸，返回一个QRec类型的对象</span><br><span class="line">        # frameSize()       获取尺寸 (包含窗口边框)</span><br><span class="line">        # frameGeometry()   获取坐标和尺寸(包含窗口边框)，返回一个QRec类型的对象</span><br><span class="line">        # setFixedSize()    窗口大小固定</span><br><span class="line">        # setFixedWidth()   固定窗口宽度</span><br><span class="line">        # setFixedHeight()  固定窗口高度</span><br><span class="line">        # setFixedSize()    窗口大小固定</span><br><span class="line">        # setFixedWidth()   固定窗口宽度</span><br><span class="line">        # setFixedHeight()  固定窗口高度</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-1-2-窗口大小和位置-2"><a href="#4-1-2-窗口大小和位置-2" class="headerlink" title="4.1.2 窗口大小和位置-2"></a>4.1.2 窗口大小和位置-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(200, 200)                  #注释1开始</span><br><span class="line"></span><br><span class="line">        desktop = QApplication.desktop()       # 获取桌面对象desktop，通过width()和height()方法获取计算机屏幕的宽度和高度</span><br><span class="line">        desktop_width = desktop.width()</span><br><span class="line">        desktop_height = desktop.height()      #注释1结束</span><br><span class="line"></span><br><span class="line">        window_width = self.frameSize().width()#注释2开始</span><br><span class="line">        window_height = self.frameSize().height()</span><br><span class="line"></span><br><span class="line">        x = desktop_width // 2 - window_width // 2   #之所以用整除运算符“//”，是因为move()方法接收整型值，而不是浮点数。</span><br><span class="line">        y = desktop_height // 2 - window_height // 2</span><br><span class="line">        self.move(x, y)                       #注释2结束</span><br><span class="line">        # setMinimumwidth() 设置最小宽度</span><br><span class="line">        # setMaximumWidth() 设置最大宽度</span><br><span class="line">        # setMinimumHeight()设置最小高度</span><br><span class="line">        # setMaximumHeight()设置最大高度</span><br><span class="line">        # setMinimumSize()  设置最小尺寸</span><br><span class="line">        # setMaximumSize()  设置最大尺寸</span><br><span class="line">        # width()           取度</span><br><span class="line">        # height()          获取高度</span><br><span class="line">        # size()            获取尺寸</span><br><span class="line">        # minimumWidth()    获取最小宽度</span><br><span class="line">        # maximumWidth()    获取最大宽度</span><br><span class="line">        # minimumHeight()   获取最小高度</span><br><span class="line">        # maximumHeight()   获取最大高度</span><br><span class="line">        # minimumSize()     获取最小尺寸</span><br><span class="line">        # maximumSize()     获取最大尺寸</span><br><span class="line">        # x()               获取x坐标</span><br><span class="line">        # y()               取y坐标</span><br><span class="line">        # pos()             获取X和y坐标，返回一个QPoin类型的对象</span><br><span class="line">        # geometry()        获取坐标和尺寸，返回一个QRec类型的对象</span><br><span class="line">        # frameSize()       获取尺寸 (包含窗口边框)</span><br><span class="line">        # frameGeometry()   获取坐标和尺寸(包含窗口边框)，返回一个QRec类型的对象</span><br><span class="line">        # setFixedSize()    窗口大小固定</span><br><span class="line">        # setFixedWidth()   固定窗口宽度</span><br><span class="line">        # setFixedHeight()  固定窗口高度</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-1-3-其他窗口属性"><a href="#4-1-3-其他窗口属性" class="headerlink" title="4.1.3 其他窗口属性"></a>4.1.3 其他窗口属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.setWindowOpacity(0.8)                     # 设置窗口的透明度，传入0～1的数，1表示不透明</span><br><span class="line">        self.setWindowFlag(Qt.FramelessWindowHint)     # 将窗口的标题栏和边框都去掉</span><br><span class="line">        self.setAttribute(Qt.WA_TranslucentBackground) # 让窗口背景完全透明（不会影响到窗口上的控件）</span><br><span class="line"></span><br><span class="line">        self.another_window = AnotherWindow()</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;显示另一个窗口&#x27;)</span><br><span class="line">        self.btn.clicked.connect(self.another_window.show)</span><br><span class="line"></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">class AnotherWindow(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(AnotherWindow, self).__init__()</span><br><span class="line">        self.setWindowModality(Qt.ApplicationModal) # 模态类型</span><br><span class="line">        # Qt.NonModal         设置为非棋态，这是窗口的默认模态类型，表示用户可以在应用中的各个窗口之间随意切换</span><br><span class="line">        # Qt.WindowModal      窗口级棋态，  阻塞当前窗口的所有父窗口和祖父窗口，包括与父窗口和祖父窗口同级的其他窗口</span><br><span class="line">        # Qt.ApplicationModal 应用级模态，  阻除当前窗口外的所有窗口，用户只有关闭了当前窗口，才能切换到其他的窗口</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="4-2-1-理解坐标体系"><a href="#4-2-1-理解坐标体系" class="headerlink" title="4.2.1 理解坐标体系"></a>4.2.1 理解坐标体系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PyQt的坐标体系是统一的。不管是计算机屏幕，还是窗口本身，抑或是窗口上的控件，其</span><br><span class="line">坐标原点(0, 0)都在左上角，且向右为x轴正方向，向下为y轴正方向。另外，锚点也统一位于左上角</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(400, 400)</span><br><span class="line">        self.move(0, 0)            # 窗口位于屏幕的坐标原点</span><br><span class="line"></span><br><span class="line">        self.edit = QTextEdit(self)</span><br><span class="line">        self.edit.move(0, 0)       # 文本编辑框位于窗口的坐标原点</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;button&#x27;, self.edit)</span><br><span class="line">        self.btn.move(20, 20)      # 按钮则位于文本编辑框上坐标为(20, 20)的位置</span><br><span class="line"></span><br><span class="line">        # width()           宽度</span><br><span class="line">        # height()          获取高度</span><br><span class="line">        # size()            获取尺寸</span><br><span class="line">        # minimumWidth()    获取最小宽度</span><br><span class="line">        # maximumWidth()    获取最大宽度</span><br><span class="line">        # minimumHeight()   获取最小高度</span><br><span class="line">        # maximumHeight()   获取最大高度</span><br><span class="line">        # minimumSize()     获取最小尺寸</span><br><span class="line">        # maximumSize()     获取最大尺寸</span><br><span class="line">        # x()               获取x坐标</span><br><span class="line">        # y()               取y坐标</span><br><span class="line">        # pos()             获取X和y坐标，返回一个QPoin类型的对象</span><br><span class="line">        # geometry()        获取坐标和尺寸，返回一个QRec类型的对象</span><br><span class="line">        # frameSize()       获取尺寸 (包含窗口边框)</span><br><span class="line">        # frameGeometry()   获取坐标和尺寸(包含窗口边框)，返回一个QRec类型的对象</span><br><span class="line">        # setFixedSize()    窗口大小固定</span><br><span class="line">        # setFixedWidth()   固定窗口宽度</span><br><span class="line">        # setFixedHeight()  固定窗口高度</span><br><span class="line">        # setFixedSize()    窗口大小固定</span><br><span class="line">        # setFixedWidth()   固定窗口宽度</span><br><span class="line">        # setFixedHeight()  固定窗口高度</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        # 窗口坐标原点并不在标题栏的左上角，而是处于放置控件区域（客户区）的左上角，但是窗口锚点在标题栏的左上角。</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="4-3-1-窗口关闭事件"><a href="#4-3-1-窗口关闭事件" class="headerlink" title="4.3.1 窗口关闭事件"></a>4.3.1 窗口关闭事件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.is_saved = True   # 用来存储当前的保存状态，如果edit文本编辑框内容有更新且文本存在，那么is_saved为False</span><br><span class="line">        #当我们单击“保存”按钮后，is_saved变量被设置为True，且项目路径下会出现一个saved.txt文件</span><br><span class="line"></span><br><span class="line">        self.edit = QTextEdit()</span><br><span class="line">        self.edit.textChanged.connect(self.update_save_status)</span><br><span class="line">        self.save_btn = QPushButton(&#x27;保存&#x27;)</span><br><span class="line">        self.save_btn.clicked.connect(self.save)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.edit)</span><br><span class="line">        v_layout.addWidget(self.save_btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def update_save_status(self):</span><br><span class="line">        if self.edit.toPlainText():</span><br><span class="line">            self.is_saved = False</span><br><span class="line">        else:</span><br><span class="line">            self.is_saved = True</span><br><span class="line"></span><br><span class="line">    def save(self):</span><br><span class="line">        self.is_saved = True</span><br><span class="line">        with open(&#x27;saved.txt&#x27;, &#x27;w&#x27;) as f:</span><br><span class="line">            f.write(self.edit.toPlainText())</span><br><span class="line"></span><br><span class="line">    def closeEvent(self, event):            # 重点是closeEvent()，注意因为是重写，所以函数名称必须一样。</span><br><span class="line">        if not self.is_saved:</span><br><span class="line">            choice = QMessageBox.question(self, &#x27;&#x27;, &#x27;是否保存文本内容？&#x27;,QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)</span><br><span class="line">        # 首先判断当前内容是否被保存，如果没有的话，则弹出一个消息框进行询问</span><br><span class="line">        if choice == QMessageBox.Yes:</span><br><span class="line">            self.save()</span><br><span class="line">            event.accept()  # 调用event.accept()接受这次关闭操作</span><br><span class="line">        elif choice == QMessageBox.No:</span><br><span class="line">            event.accept()  </span><br><span class="line">        else:</span><br><span class="line">            event.ignore()  # 调用event.ignore()忽略关闭操作</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-3-2-窗口大小调整事件"><a href="#4-3-2-窗口大小调整事件" class="headerlink" title="4.3.2 窗口大小调整事件"></a>4.3.2 窗口大小调整事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line"></span><br><span class="line">    def resizeEvent(self, event):        # 1</span><br><span class="line">        print(&#x27;调整前大小:&#x27;, event.oldSize())</span><br><span class="line">        print(&#x27;调整后大小:&#x27;, event.size())</span><br><span class="line">        </span><br><span class="line"># 代码很简单，该事件主要有两个方法：oldSize()和size()。</span><br><span class="line"># 前者用来获取窗口调整前的大小，后者用来获取窗口调整后的大小，两个方法返回的都是QSize对象。</span><br><span class="line"># 窗口只要开始显示，就会触发窗口大小调整事件。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-3-3-键盘事件"><a href="#4-3-3-键盘事件" class="headerlink" title="4.3.3 键盘事件"></a>4.3.3 键盘事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">键盘事件分为两种：</span><br><span class="line">键盘按下事件和键盘释放事件，各个事件函数的名称和解释罗列如下。</span><br><span class="line">● keyPressEvent：键盘上的任意键被按下时触发。</span><br><span class="line">● keyReleaseEvent：键盘上的任意键被释放时触发。</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line"></span><br><span class="line">    def keyPressEvent(self, event):     # 1</span><br><span class="line">        if event.key() == Qt.Key_A:</span><br><span class="line">            print(&#x27;a&#x27;)</span><br><span class="line">        if event.text().lower() == &#x27;b&#x27;:  # 如果要获取按键名称，则需要调用text()方法 </span><br><span class="line">            print(&#x27;b&#x27;)                   # 注意，如果开启了大写字母锁定功能，text()方法会返回大写键名</span><br><span class="line">        if event.modifiers()==Qt.ShiftModifier and event.key()==Qt.Key_Q:</span><br><span class="line">            print(&#x27;shift+q&#x27;)</span><br><span class="line">            # modifiers()方法用来获取辅助按键</span><br><span class="line">            </span><br><span class="line">            # QtNoModifier        没有按下辅助按键</span><br><span class="line">            # QtShiftModifier     Shift键</span><br><span class="line">            # Qt.ControlModifier  “Ctrl键(macoS系统上是Command键)</span><br><span class="line">            # Qt.AltModifier      “Alt键(macoS系统上是&quot;option”键)</span><br><span class="line"></span><br><span class="line">    def keyReleaseEvent(self, event):</span><br><span class="line">        print(event.key())</span><br><span class="line">        print(event.text())</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-3-4-鼠标事件-1"><a href="#4-3-4-鼠标事件-1" class="headerlink" title="4.3.4 鼠标事件-1"></a>4.3.4 鼠标事件-1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">鼠标事件分为鼠标按下事件、鼠标移动事件、鼠标释放事件和鼠标双击事件。</span><br><span class="line">在每个鼠标事件中我们都可以获取到鼠标指针在窗口或屏幕上的坐标。</span><br><span class="line"></span><br><span class="line">● mousePressEvent：鼠标按键被按下时触发。</span><br><span class="line">● mouseMoveEvent：鼠标指针在窗口上移动时触发（鼠标需要被追踪到）。</span><br><span class="line">● mouseReleaseEvent：鼠标按键被释放时触发。</span><br><span class="line">● mouseDoubleClickEvent：在窗口上双击时触发。</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.setMouseTracking(True)        # 让窗口始终追踪鼠标</span><br><span class="line">        #如果不调用该方法，那么只有在鼠标按键被按下后，窗口才会开始记录鼠标的移动操作，而按键被释放后，窗口就不会进行记录了</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):      # button()方法获取到当前被按下的鼠标按键。</span><br><span class="line">                                           # 如果用户同时按下多个鼠标按键，可以用buttons()方法获取。</span><br><span class="line">        if event.button() == Qt.LeftButton:  </span><br><span class="line">            print(&#x27;鼠标左键&#x27;)</span><br><span class="line">        elif event.button() == Qt.MiddleButton:</span><br><span class="line">            print(&#x27;鼠标中键&#x27;)</span><br><span class="line">        elif event.button() == Qt.RightButton:</span><br><span class="line">            print(&#x27;鼠标右键&#x27;)</span><br><span class="line"></span><br><span class="line">    def mouseMoveEvent(self, event):   # 3</span><br><span class="line">        print(event.pos())             # 鼠标指针在窗口位置</span><br><span class="line">        print(event.globalPos())       # 鼠标指针在屏幕的坐标位置</span><br><span class="line"></span><br><span class="line">    def mouseReleaseEvent(self, event):# 注释4开始</span><br><span class="line">        print(&#x27;释放&#x27;)</span><br><span class="line"></span><br><span class="line">    def mouseDoubleClickEvent(self, event):# 注释4结束</span><br><span class="line">        print(&#x27;双击&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-3-4-鼠标事件-2"><a href="#4-3-4-鼠标事件-2" class="headerlink" title="4.3.4 鼠标事件-2"></a>4.3.4 鼠标事件-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.setWindowFlag(Qt.FramelessWindowHint)</span><br><span class="line">        self.start_x = None                         # 设置两个变量分别用来保存鼠标按键被按下时鼠标指针对应的x和y坐标</span><br><span class="line">        self.start_y = None</span><br><span class="line">        # 当不释放鼠标左键，并且鼠标指针开始移动时，mouseMoveEvent()事件函数就会不断执行</span><br><span class="line">        # 而鼠标指针离窗口左上角的位置也会不断更新并保存在event.x()和event.y()中。</span><br><span class="line">        </span><br><span class="line">    def mousePressEvent(self, event):      # 1</span><br><span class="line">        if event.button() == Qt.LeftButton:</span><br><span class="line">            self.start_x = event.x()</span><br><span class="line">            self.start_y = event.y()</span><br><span class="line"></span><br><span class="line">    def mouseMoveEvent(self, event):       # 2</span><br><span class="line">        dis_x = event.x() - self.start_x</span><br><span class="line">        dis_y = event.y() - self.start_y</span><br><span class="line">        self.move(self.x()+dis_x, self.y()+dis_y)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-3-5-拖放事件"><a href="#4-3-5-拖放事件" class="headerlink" title="4.3.5 拖放事件"></a>4.3.5 拖放事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">● DragEnterEvent：拖动目标进入窗口时触发。</span><br><span class="line">● DragMoveEvent：在窗口上继续拖动目标时触发。</span><br><span class="line">● DragLeaveEvent：拖动目标离开窗口时触发。</span><br><span class="line">● DropEvent：放下目标时触发。</span><br><span class="line"></span><br><span class="line">QMimeData类与MIME（Multipurpose Internet Mail Extension，多用途互联网邮件扩展）相关，</span><br><span class="line">MIME是描述消息内容类型的互联网标准，可以简单理解为对文件扩展名的详细解释。通过该解释，程序就可以知道以何种方式来处理数据。</span><br><span class="line">每个MIME类型由两部分组成，前面是数据的大类，后面定义具体的类，例如扩展名为.png的MIME类型为image/png。</span><br><span class="line">QMimeData类给记录自身MIME类型的数据提供了一个容器，用于专门处理MIME类型的数据。</span><br><span class="line">针对常见的MIME类型，QMimeData类提供了很多方法</span><br><span class="line"></span><br><span class="line">判断方法        获取方法      设置方法           MIME类型</span><br><span class="line">hasText()      text()        setText()         text/plain</span><br><span class="line">hasHtml()      html()        setHtml()         text/html</span><br><span class="line">hasUrls()      urls()        setUrls()         text/uri-list</span><br><span class="line">haslmage()     imageData()   setlmageData()    image/*</span><br><span class="line">hasColor()     colorData()   setColorData()    applicationx-color</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QLabel):                  # 继承QLabel，并重写了它的拖放事件</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line">        self.setAcceptDrops(True)      # 让窗口或控件接受拖放操作</span><br><span class="line"></span><br><span class="line">    def dragEnterEvent(self, event):   # 3</span><br><span class="line">        print(&#x27;进入&#x27;)</span><br><span class="line">        if event.mimeData().hasUrls(): # event.mimeData()方法获取到当前拖动目标的数据信息</span><br><span class="line">                                       # hasUrls()用来判断数据是否符合text/uri-list类型（即是否为文件）</span><br><span class="line">            event.accept()             # 符合的话，调用accept()方法接受这次拖放操作</span><br><span class="line"></span><br><span class="line">    def dragMoveEvent(self, event):    # 如果拖动目标继续在窗口中移动的话，控制台就会不断输出“移动”文本。</span><br><span class="line">        print(&#x27;移动&#x27;)</span><br><span class="line"></span><br><span class="line">    def dragLeaveEvent(self, event):</span><br><span class="line">        print(&#x27;离开&#x27;)</span><br><span class="line"></span><br><span class="line">    def dropEvent(self, event):        # 5</span><br><span class="line">        print(&#x27;放下&#x27;)</span><br><span class="line">        url = event.mimeData().urls()[0] # 调用urls()方法获取文件的路径信息，返回一个列表，列表元素都是QUrl类型的对象</span><br><span class="line">        file_path = url.toLocalFile()    # 通过QUrl对象的toLocalFile()方法可以获取该文件在当前系统上的路径字符串</span><br><span class="line">        if file_path.endswith(&#x27;.png&#x27;):   # 如果该文件是.png格式的图片，就将它设置在QLabel上</span><br><span class="line">            self.setPixmap(QPixmap(file_path))</span><br><span class="line">            self.setAlignment(Qt.AlignCenter)</span><br><span class="line">            self.setScaledContents(True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-3-6-绘制事件"><a href="#4-3-6-绘制事件" class="headerlink" title="4.3.6 绘制事件"></a>4.3.6 绘制事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line"></span><br><span class="line">        self.btn1 = QPushButton(&#x27;移动&#x27;, self)</span><br><span class="line">        self.btn2 = QPushButton(&#x27;更新&#x27;, self)</span><br><span class="line">        self.btn1.move(0, 0)</span><br><span class="line">        self.btn2.move(50, 50)</span><br><span class="line">        self.btn1.clicked.connect(lambda: self.btn1.move(100, 100)) # 按钮移动到(100, 100)</span><br><span class="line">        self.btn2.clicked.connect(self.update) # 单击“更新”按钮后，窗口会调用update()方法重绘整个窗口。</span><br><span class="line">        # 绘制事件通过rect()方法获取窗口上重绘的矩形区域，返回值是QRect类型的</span><br><span class="line"></span><br><span class="line">    def paintEvent(self, event):            # 3</span><br><span class="line">        print(&#x27;paint&#x27;)</span><br><span class="line">        print(event.rect())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="4-4-1-主窗口的组成部分"><a href="#4-4-1-主窗口的组成部分" class="headerlink" title="4.4.1 主窗口的组成部分"></a>4.4.1 主窗口的组成部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.widget = QWidget()            #注释1开始</span><br><span class="line">        self.edit = QTextEdit()</span><br><span class="line">        self.btn = QPushButton(&#x27;Button&#x27;)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.edit)</span><br><span class="line">        v_layout.addWidget(self.btn)</span><br><span class="line">        self.widget.setLayout(v_layout)    #注释1结束</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(self.widget) # 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-4-2-停靠窗口类QDockWidget"><a href="#4-4-2-停靠窗口类QDockWidget" class="headerlink" title="4.4.2 停靠窗口类QDockWidget"></a>4.4.2 停靠窗口类QDockWidget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">从图4-17可以看出停靠窗口一共有4块，即顶部、底部、左侧、右侧。</span><br><span class="line"></span><br><span class="line">每块区域上都可以放置一个QDockWidget类型的停靠窗口，我们可以在这些停靠窗口上添加任意控件</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.edit1 = QTextEdit()           #注释1开始</span><br><span class="line">        self.edit2 = QTextEdit()</span><br><span class="line">        self.center_edit = QTextEdit()     #注释1结束</span><br><span class="line"></span><br><span class="line">        self.dock1 = QDockWidget(&#x27;停靠区域1&#x27;)</span><br><span class="line">        self.dock2 = QDockWidget(&#x27;停靠区域2&#x27;)</span><br><span class="line">        self.dock1.setWidget(self.edit1)</span><br><span class="line">        self.dock2.setWidget(self.edit2)</span><br><span class="line">        self.dock1.setAllowedAreas(Qt.RightDockWidgetArea) #注释2开始</span><br><span class="line">        self.dock2.setAllowedAreas(Qt.AllDockWidgetAreas)</span><br><span class="line">        # setAllowedAreas()用来设置停靠窗口在停靠区域上允许停靠的位置</span><br><span class="line">        # 可以传入setAllowedAreas()中的参数：</span><br><span class="line">        # Qt.LeftDockWidgetArea   左侧停靠区域</span><br><span class="line">        # QtRightDockWidgetArea   右侧停靠区域</span><br><span class="line">        # Qt.TopDockWidgetArea    顶部停靠区域</span><br><span class="line">        # QtBottomDockWidgetArea  底部停靠区域</span><br><span class="line">        # QtAllDockWidgetAreas    全部停靠区域</span><br><span class="line">        # QtNoDockWidgetArea      不可停靠区域(不显示)</span><br><span class="line"></span><br><span class="line">        self.dock1.setFeatures(QDockWidget.DockWidgetFloatable)</span><br><span class="line">        self.dock2.setFeatures(QDockWidget.DockWidgetMovable)#注释2结束</span><br><span class="line">        # setFeatures()方法用来设置停靠窗口的属性特征。</span><br><span class="line"></span><br><span class="line">        self.addDockWidget(Qt.RightDockWidgetArea, self.dock1)#注释3开始</span><br><span class="line">        self.addDockWidget(Qt.TopDockWidgetArea, self.dock2)#注释3结束</span><br><span class="line">        #  QMainWindow调用addDockWidget()方法将停靠窗口添加到主窗口的停靠区域上，该方法需要传入停靠位置和停靠窗口对象这两个参数值。</span><br><span class="line">        # 同一块停靠区域可以放置多块停靠窗口，此时该区域会显示标签用来切换窗口</span><br><span class="line">        self.setCentralWidget(self.center_edit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-4-3-菜单栏类QMenuBar"><a href="#4-4-3-菜单栏类QMenuBar" class="headerlink" title="4.4.3 菜单栏类QMenuBar"></a>4.4.3 菜单栏类QMenuBar</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用中的所有功能不可能全部显示在窗口上，不然会显得非常拥挤，我们应该把部分功能存放在菜单中。</span><br><span class="line">主窗口的菜单栏区域就是用来放置各个菜单的，我们可以通过menuBar()方法获取到菜单栏实例，并调用该实例的addMenu()方法添加菜单。</span><br><span class="line">菜单上的每个命令则通过QAction来添加</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        menu_bar = self.menuBar()</span><br><span class="line">        file_menu = menu_bar.addMenu(&#x27;文件&#x27;)</span><br><span class="line"></span><br><span class="line">        open_action = QAction(QIcon(&#x27;open.ico&#x27;), &#x27;打开&#x27;, self)# 程序实例化了3个QAction对象作为文件菜单下的命令，它们的功能分别是打开文件、保存文件和退出程序</span><br><span class="line">        save_action = QAction(QIcon(&#x27;save.ico&#x27;), &#x27;保存&#x27;, self)</span><br><span class="line">        quit_action = QAction(QIcon(&#x27;quit.ico&#x27;), &#x27;退出&#x27;, self)#注释1结束</span><br><span class="line">        open_action.triggered.connect(self.open)   # 当用户单击一个QAction对象时，triggered信号会被发射出来。</span><br><span class="line">        save_action.triggered.connect(self.save)</span><br><span class="line">        quit_action.triggered.connect(self.quit)   #注释2结束</span><br><span class="line"></span><br><span class="line">        file_menu.addAction(open_action)           #注释3开始</span><br><span class="line">        file_menu.addAction(save_action)</span><br><span class="line">        file_menu.addSeparator()    # addSeparator()方法用来在菜单中上添加一条分隔线，将部分命令分隔开来，这样在视觉上显得更有条理</span><br><span class="line">        # 如果想要添加子菜单，可以对file_menu菜单对象调用addMenu()方法，我们只需要在返回的子菜单对象上添加QAction对象即可，代码如下所示</span><br><span class="line">        # sub_menu = file_menu.addMenu(&#x27;子菜单&#x27;)</span><br><span class="line">        # sub_menu.addAction(QAction(QIcon(&#x27;xxx.ico&#x27;), &#x27;xxx&#x27;, self))</span><br><span class="line">        </span><br><span class="line">        # 在macOS系统上，菜单栏不在窗口中，而在屏幕左上方。可以调用menu_bar.setNativeMenuBar(False)禁用原生功能，</span><br><span class="line">        # 将菜单栏全部显示在标题栏下方。</span><br><span class="line">        file_menu.addAction(quit_action)           #注释3结束</span><br><span class="line"></span><br><span class="line">        self.edit = QTextEdit()</span><br><span class="line">        self.setCentralWidget(self.edit)</span><br><span class="line"></span><br><span class="line">    def open(self):</span><br><span class="line">        file_path, _ = QFileDialog.getOpenFileName(self, &#x27;打开&#x27;, &#x27;./&#x27;, &#x27;*.txt&#x27;)</span><br><span class="line">        if file_path:</span><br><span class="line">            with open(file_path, &#x27;r&#x27;) as f:</span><br><span class="line">                self.edit.setText(f.read())</span><br><span class="line"></span><br><span class="line">    def save(self):</span><br><span class="line">        text = self.edit.toPlainText()</span><br><span class="line">        if text:</span><br><span class="line">            with open(&#x27;saved.txt&#x27;, &#x27;w&#x27;) as f:</span><br><span class="line">                f.write(text)</span><br><span class="line"></span><br><span class="line">    def quit(self):</span><br><span class="line">        self.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-4-4-工具栏类QToolbar"><a href="#4-4-4-工具栏类QToolbar" class="headerlink" title="4.4.4 工具栏类QToolbar"></a>4.4.4 工具栏类QToolbar</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">我们可以把菜单中的一些常用命令选出来，用图标的方式将其显示在工具栏上，方便用户快速使用。</span><br><span class="line"></span><br><span class="line">我们也可以发现工具栏跟停靠区域一样有多个位置可以使用</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line">        toolbar1 = QToolBar(&#x27;工具栏1&#x27;)            # 实例化两个QToolBar对象，然后将QAction对象添加到QToolBar对象上</span><br><span class="line">        toolbar2 = QToolBar(&#x27;工具栏2&#x27;)</span><br><span class="line"></span><br><span class="line">        open_action = QAction(QIcon(&#x27;open.ico&#x27;), &#x27;打开&#x27;, self)</span><br><span class="line">        save_action = QAction(QIcon(&#x27;save.ico&#x27;), &#x27;保存&#x27;, self)</span><br><span class="line">        quit_action = QAction(QIcon(&#x27;quit.ico&#x27;), &#x27;退出&#x27;, self)</span><br><span class="line"></span><br><span class="line">        toolbar1.addAction(open_action)</span><br><span class="line">        toolbar1.addAction(save_action)</span><br><span class="line">        toolbar1.addSeparator()</span><br><span class="line">        toolbar1.addAction(quit_action)</span><br><span class="line">        toolbar2.addAction(open_action)</span><br><span class="line">        toolbar2.addAction(save_action)</span><br><span class="line">        toolbar2.addSeparator()</span><br><span class="line">        toolbar2.addAction(quit_action)          #注释1结束</span><br><span class="line"></span><br><span class="line">        toolbar1.setAllowedAreas(Qt.TopToolBarArea|Qt.BottomToolBarArea)</span><br><span class="line">        # 可以传入setAllowedAreas()的参数</span><br><span class="line">        # Qt.LeftToolBarArea      左侧工具栏</span><br><span class="line">        # Qt.RightToolBarArea      右侧工具栏</span><br><span class="line">        # Qt.TopToolBarArea       顶工具栏</span><br><span class="line">        # Qt.BottomToolBarArea    底部工具栏</span><br><span class="line">        # Qt.AllToolBarAreas       全部区域</span><br><span class="line">        # Qt.NoToolBarArea         不显示工具栏</span><br><span class="line">        toolbar2.setMovable(False)               # 用来设置工具栏是否可以移动（默认是可以移动的</span><br><span class="line"></span><br><span class="line">        self.addToolBar(Qt.TopToolBarArea, toolbar1) # 调用QMainWindow的addToolBar()方法将工具栏添加到指定区域上</span><br><span class="line">        self.addToolBar(Qt.BottomToolBarArea, toolbar2) #注释3结束</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-4-5-状态栏类QStatusBar-1"><a href="#4-4-5-状态栏类QStatusBar-1" class="headerlink" title="4.4.5 状态栏类QStatusBar-1"></a>4.4.5 状态栏类QStatusBar-1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line">        self.status_bar = QStatusBar()         # 实例化一个QStatusBar对象，然后通过setStatusBar()方法将其设置到窗口上</span><br><span class="line">        self.setStatusBar(self.status_bar)     #注释1结束</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;保存&#x27;, self)</span><br><span class="line">        self.btn.clicked.connect(self.save)</span><br><span class="line"></span><br><span class="line">    def save(self):</span><br><span class="line">        self.status_bar.showMessage(&#x27;已保存&#x27;)   # 当用户单击“保存”按钮后，状态栏通过showMessage()方法显示“已保存”文本提示用户</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-4-5-状态栏类QStatusBar-2"><a href="#4-4-5-状态栏类QStatusBar-2" class="headerlink" title="4.4.5 状态栏类QStatusBar-2"></a>4.4.5 状态栏类QStatusBar-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line"></span><br><span class="line">class Window(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line">        self.status_bar = QStatusBar()</span><br><span class="line">        self.progress_bar = QProgressBar()</span><br><span class="line">        self.status_bar.addWidget(self.progress_bar)     # 实例化了一个QStatusBar对象后，调用addWidget()方法将进度条控件添加到状态栏上</span><br><span class="line">        self.setStatusBar(self.status_bar)</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;计数&#x27;, self)</span><br><span class="line">        self.btn.clicked.connect(self.count)</span><br><span class="line"></span><br><span class="line">        self.value = 0</span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.timeout.connect(self.update_progress_bar)</span><br><span class="line"></span><br><span class="line">    def count(self):</span><br><span class="line">        self.value = 0</span><br><span class="line">        self.timer.start(50)</span><br><span class="line">        self.progress_bar.setValue(0)</span><br><span class="line">        self.status_bar.clearMessage()</span><br><span class="line"></span><br><span class="line">    def update_progress_bar(self): # 单击“计数”按钮后，计时器会每隔50ms更新一次进度条，当value的值为100时，停止计时器，并在状态栏上显示“结束”文本。</span><br><span class="line">        self.value += 1</span><br><span class="line">        self.progress_bar.setValue(self.value)</span><br><span class="line"></span><br><span class="line">        if self.value == 100:</span><br><span class="line">            self.timer.stop()</span><br><span class="line">            self.status_bar.showMessage(&#x27;结束&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="4-4-6-程序启动画面类QSplashScreen"><a href="#4-4-6-程序启动画面类QSplashScreen" class="headerlink" title="4.4.6 程序启动画面类QSplashScreen"></a>4.4.6 程序启动画面类QSplashScreen</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">许多大型程序（例如Photoshop）在打开前都会先展示一个启动画面，这是因为程序运行需要一定时间来准备。</span><br><span class="line">用启动画面来显示模块加载进度，这种方式可以提升用户体验。</span><br><span class="line">如果没有启动画面，且双击程序之后很长一段时间窗口都没有出现，用户可能会觉得哪里有问题。</span><br><span class="line">通常我们会将程序启动画面的代码放在程序入口处，位于sys.exit(app.exec())之前</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line"></span><br><span class="line">class Window(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line"></span><br><span class="line">    def load(self, splash):</span><br><span class="line">        for i in range(101):</span><br><span class="line">            time.sleep(0.05)</span><br><span class="line">            splash.showMessage(f&#x27;加载 &#123;i&#125;%&#x27;, Qt.AlignBottom|Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line"></span><br><span class="line">    splash = QSplashScreen()      </span><br><span class="line">    splash.setPixmap(QPixmap(&#x27;qt.png&#x27;)) # setPixmap()方法用来设置启动画面上的图片，showMessage()方法用来在启动画面上显示文本</span><br><span class="line">    splash.show()</span><br><span class="line">    splash.showMessage(&#x27;加载 0%&#x27;, Qt.AlignBottom|Qt.AlignCenter)#注释1结束</span><br><span class="line"></span><br><span class="line">    window = Window()</span><br><span class="line">    window.load(splash)   # window窗口对象有一个自定义的load()方法，</span><br><span class="line">                          # 我们在其中调用time.sleep()模拟窗口加载数据和配置的耗时过程。</span><br><span class="line">    window.show()</span><br><span class="line">    splash.finish(window) # 当窗口对象调用show()显示后，splash对象调用finish(window)关闭启动画面。</span><br><span class="line">    sys.exit(app.exec())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 不过这个程序有个小bug：当启动画面还存在时，如果直接单击的话会将它隐藏起来。</span><br><span class="line">    # 我们应该自定义一个MySplashScreen类并重写鼠标事件。</span><br><span class="line">    # class MySplashScreen(QSplashScreen):</span><br><span class="line">    # def mousePressEvent(self,event):</span><br><span class="line">        # pass</span><br><span class="line">    # 最后将splash = QSplashScreen()替换成splash = MySplashScreen()就可以了。</span><br></pre></td></tr></table></figure><h2 id="6-1-数据库"><a href="#6-1-数据库" class="headerlink" title="6.1 数据库"></a>6.1 数据库</h2><p>目前市面上数据库的类型有很多，针对不同类型的数据库，PyQt为我们提供了相应的驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QDB2          IBM DB2</span><br><span class="line">QIBASE        Borland InterBase</span><br><span class="line">QMYSQL        MysQL</span><br><span class="line">Qoci          Oracle调用接口驱动</span><br><span class="line">QODBC         ODBC(包括微软SQLServer)</span><br><span class="line">QPSQL         PostgresQL</span><br><span class="line">QSQLITE       SQLite3或更高版本</span><br><span class="line">QSQLITE2      sQLite2</span><br><span class="line">QTDs          Sybase自适应服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-1-1-数据库连接和关闭"><a href="#6-1-1-数据库连接和关闭" class="headerlink" title="6.1.1 数据库连接和关闭"></a>6.1.1 数据库连接和关闭</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.db = QSqlDatabase.addDatabase(&#x27;QSQLITE&#x27;)  # 调用QSqlDatabase类的addDatabase()方法添加QSQLITE数据库驱动，将返回的数据库对象保存在db变量中</span><br><span class="line">        self.connect_db()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    def connect_db(self):                              </span><br><span class="line">        self.db.setDatabaseName(&#x27;./info.db&#x27;)           # 调用setDatabaseName()方法选择要使用的数据库。</span><br><span class="line">        # 如果数据库文件不存在，则会创建一个。</span><br><span class="line">        if not self.db.open():# open()方法打开数据库，如果打开失败，可以使用lastError()获取失败原因并将其显示在消息框上。</span><br><span class="line">            error = self.db.lastError().text()</span><br><span class="line">            QMessageBox.critical(self, &#x27;Database Connection&#x27;, error)</span><br><span class="line"></span><br><span class="line">    def closeEvent(self, event):    # 在closeEvent()事件函数中，我们在关闭窗口前先调用close()方法关闭数据库。</span><br><span class="line">        self.db.close()</span><br><span class="line">        event.accept()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-1-1-数据库连接和关闭-MySQL"><a href="#6-1-1-数据库连接和关闭-MySQL" class="headerlink" title="6.1.1 数据库连接和关闭-MySQL"></a>6.1.1 数据库连接和关闭-MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.db = QSqlDatabase.addDatabase(&#x27;QMYSQL&#x27;)</span><br><span class="line">        self.connect_db()</span><br><span class="line"></span><br><span class="line">    def connect_db(self):</span><br><span class="line">        self.db.setHostName(&#x27;localhost&#x27;)</span><br><span class="line">        self.db.setUserName(&#x27;root&#x27;)</span><br><span class="line">        self.db.setPassword(&#x27;password&#x27;)</span><br><span class="line">        self.db.setDatabaseName(&#x27;info&#x27;)</span><br><span class="line">        if not self.db.open():</span><br><span class="line">            error = self.db.lastError().text()</span><br><span class="line">            QMessageBox.critical(self, &#x27;Database Connection&#x27;, error)</span><br><span class="line"></span><br><span class="line">    def closeEvent(self, event):</span><br><span class="line">        self.db.close()</span><br><span class="line">        event.accept()</span><br></pre></td></tr></table></figure><h2 id="6-2-多线程"><a href="#6-2-多线程" class="headerlink" title="6.2 多线程"></a>6.2 多线程</h2><p>在PyQt中，主线程（也可以称为UI线程）负责界面绘制和更新。<br>当执行某些复杂且耗时的操作时，如果将执行这些操作的代码放在主线程中，界面就会出现停止响应（或卡顿）的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.label = QLabel(&#x27;0&#x27;)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        self.btn = QPushButton(&#x27;计数&#x27;)</span><br><span class="line">        self.btn.clicked.connect(self.count)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.label)</span><br><span class="line">        v_layout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def count(self):           # 我们用while循环来模拟耗时操作。</span><br><span class="line">    # 单击“计数”按钮后，可以发现QLabel标签控件没有更新数字，界面停止响应。</span><br><span class="line">    # 持续了较长一段时间之后，界面才响应，更新了数字。</span><br><span class="line">        num = 0</span><br><span class="line">        while num &lt; 10000000:</span><br><span class="line">            num += 1</span><br><span class="line">            self.label.setText(str(num))</span><br><span class="line">            </span><br><span class="line">    # 针对这种简单的耗时程序，PyQt提供了一种让界面快速响应的方法，</span><br><span class="line">    # 我们只需要在while循环中加入这行代码：QApplication.processEvents()。</span><br><span class="line">    # 该方法会自动处理线程中一些待处理的事件，比方说用来更新界面的绘制事件。</span><br><span class="line">    # 再次运行程序，可以发现界面上的数字是正常更新的。</span><br><span class="line">    # 当然，耗时程序还是放在Qthread子线程中比较好，不要放在主线程中。</span><br><span class="line">    # 这样不仅方便我们管理代码，而且QThread所提供的多种方法也能让我们实现更好的控制。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-2-1-使用QThread线程类-1"><a href="#6-2-1-使用QThread线程类-1" class="headerlink" title="6.2.1 使用QThread线程类-1"></a>6.2.1 使用QThread线程类-1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.label = QLabel(&#x27;0&#x27;)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        self.btn = QPushButton(&#x27;计数&#x27;)</span><br><span class="line">        self.btn.clicked.connect(self.count)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.label)</span><br><span class="line">        v_layout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        self.count_thread = CountThread()# 实例化了一个CountThread线程对象，并将它的自定义信号和update_label()槽函数相连接。</span><br><span class="line">        self.count_thread.count_signal.connect(self.update_label)</span><br><span class="line"></span><br><span class="line">    def count(self):</span><br><span class="line">        self.count_thread.start() # 当我们单击“计数”按钮后，count_thread线程对象就会调用start()方法开启线程。</span><br><span class="line">        # 接着count_signal信号不断将数字发送过来，update_label()槽函数将数字设置到标签控件上。</span><br><span class="line">    def update_label(self, num):</span><br><span class="line">        self.label.setText(str(num))   #注释1结束</span><br><span class="line"></span><br><span class="line">class CountThread(QThread):            # 继承了QThread类，并重写了run()函数。</span><br><span class="line">    count_signal = pyqtSignal(int)     # 这是编写一个线程类的基本操作。在run()函数中。</span><br><span class="line">    # 我们通过count_signal自定义信号将当前数据发送出来至 update_label函数中。</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(CountThread, self).__init__()</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        num = 0</span><br><span class="line">        while num &lt; 10000000:</span><br><span class="line">            num += 1</span><br><span class="line">            self.count_signal.emit(num)#注释2结束</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-2-1-使用QThread线程类-2"><a href="#6-2-1-使用QThread线程类-2" class="headerlink" title="6.2.1 使用QThread线程类-2"></a>6.2.1 使用QThread线程类-2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.label = QLabel(&#x27;0&#x27;)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        self.btn1 = QPushButton(&#x27;计数&#x27;)</span><br><span class="line">        self.btn2 = QPushButton(&#x27;停止&#x27;)</span><br><span class="line">        self.btn1.clicked.connect(self.start_counting)</span><br><span class="line">        self.btn2.clicked.connect(self.stop_counting)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.label)</span><br><span class="line">        v_layout.addWidget(self.btn1)</span><br><span class="line">        v_layout.addWidget(self.btn2)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        self.count_thread = CountThread()      # 注释1开始</span><br><span class="line">        self.count_thread.count_signal.connect(self.update_label)</span><br><span class="line"></span><br><span class="line">    def start_counting(self):</span><br><span class="line">        if not self.count_thread.isRunning(): # 判断count_thread线程是否还在运行，这样可以避免重复启动该线程。</span><br><span class="line">            self.count_thread.start()         # 注释1结束</span><br><span class="line">            # 当“停止”按钮被单击后，线程对象调用自定义的stop()方法将flag值变为了False </span><br><span class="line">            # 这样程序就会跳出while循环，run()函数也就运行结束了，此时线程也会自动关闭。</span><br><span class="line"></span><br><span class="line">    def stop_counting(self):</span><br><span class="line">        self.count_thread.stop()</span><br><span class="line"></span><br><span class="line">    def update_label(self, num):</span><br><span class="line">        self.label.setText(str(num))</span><br><span class="line"></span><br><span class="line">class CountThread(QThread):</span><br><span class="line">    count_signal = pyqtSignal(int)</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(CountThread, self).__init__()</span><br><span class="line">        self.flag = True</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        num = 0</span><br><span class="line">        self.flag = True</span><br><span class="line"></span><br><span class="line">        while num &lt; 10000000:</span><br><span class="line">            if not self.flag:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">            num += 1</span><br><span class="line">            self.count_signal.emit(num)</span><br><span class="line">            self.msleep(100)      #  sleep()方法可以让线程休眠，需要传入整型值，传入1表示休眠1s。</span><br><span class="line">            # 果要进行毫秒级休眠，可以使用msleep()。如果要进行微秒级休眠，则可以使用usleep()。</span><br><span class="line">    def stop(self):               # 2</span><br><span class="line">        self.flag = False</span><br><span class="line">        # 其实QThread线程类本身有让线程停止的方法：exit()、quit()和terminate()。</span><br><span class="line">        # 但是前两个方法经常不起作用，第三个办法则不推荐使用，因为它会强制停止线程。</span><br><span class="line">        # 如果线程正在保存一些数据的话，那使用terminate()可能会导致数据丢失。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-2-2-在线程中获取窗口数据信息"><a href="#6-2-2-在线程中获取窗口数据信息" class="headerlink" title="6.2.2 在线程中获取窗口数据信息"></a>6.2.2 在线程中获取窗口数据信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.label = QLabel(&#x27;0&#x27;)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        self.btn1 = QPushButton(&#x27;计数&#x27;)</span><br><span class="line">        self.btn2 = QPushButton(&#x27;停止&#x27;)</span><br><span class="line">        self.btn1.clicked.connect(self.start_counting)</span><br><span class="line">        self.btn2.clicked.connect(self.stop_counting)</span><br><span class="line"></span><br><span class="line">        self.spin_box = QSpinBox() # 程序会从这个控件中的数字开始计数</span><br><span class="line">        self.spin_box.setRange(0, 10000000)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.label)</span><br><span class="line">        v_layout.addWidget(self.spin_box)</span><br><span class="line">        v_layout.addWidget(self.btn1)</span><br><span class="line">        v_layout.addWidget(self.btn2)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        self.count_thread = CountThread(self)    # 要想在线程中获取QSpinBox控件上的数据，</span><br><span class="line">        # 我们需要在线程实例化时将窗口实例self传入，这样就能在线程中通过该实例获取到窗口上的任何一个控件，</span><br><span class="line">        # 最后调用QSpinBox控件的value()方法。</span><br><span class="line">        self.count_thread.count_signal.connect(self.update_label)</span><br><span class="line"></span><br><span class="line">    def start_counting(self):</span><br><span class="line">        if not self.count_thread.isRunning():</span><br><span class="line">            self.count_thread.start()</span><br><span class="line"></span><br><span class="line">    def stop_counting(self):</span><br><span class="line">        self.count_thread.stop()</span><br><span class="line"></span><br><span class="line">    def update_label(self, num):</span><br><span class="line">        self.label.setText(str(num))</span><br><span class="line"></span><br><span class="line">class CountThread(QThread):</span><br><span class="line">    count_signal = pyqtSignal(int)</span><br><span class="line">    def __init__(self, window):         #注释1开始</span><br><span class="line">        super(CountThread, self).__init__()</span><br><span class="line">        self.flag = True</span><br><span class="line">        self.window = window</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        num = self.window.spin_box.value()#注释1结束</span><br><span class="line">        self.flag = True</span><br><span class="line"></span><br><span class="line">        while num &lt; 10000000:</span><br><span class="line">            if not self.flag:</span><br><span class="line">                break</span><br><span class="line">            num += 1</span><br><span class="line">            self.count_signal.emit(num)</span><br><span class="line">            self.msleep(100)</span><br><span class="line"></span><br><span class="line">    def stop(self):</span><br><span class="line">        self.flag = False</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-2-3-编写一个简单的爬程序"><a href="#6-2-3-编写一个简单的爬程序" class="headerlink" title="6.2.3 编写一个简单的爬程序"></a>6.2.3 编写一个简单的爬程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import requests    # 本程序要导入requests模块用于发送网络请求</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.line_edit = QLineEdit()   # 输入待爬取的网址</span><br><span class="line">        self.text_browser = QTextBrowser() # 用来显示爬取结果</span><br><span class="line">        self.btn = QPushButton(&#x27;爬取&#x27;)  # 用来开启CrawlThread线程</span><br><span class="line"></span><br><span class="line">        self.line_edit.setPlaceholderText(&#x27;待爬取的网址&#x27;)</span><br><span class="line">        self.text_browser.setPlaceholderText(&#x27;爬取结果&#x27;)</span><br><span class="line">        self.btn.clicked.connect(self.crawl)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.line_edit)</span><br><span class="line">        v_layout.addWidget(self.text_browser)</span><br><span class="line">        v_layout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        self.crawl_thread = CrawlThread(self)</span><br><span class="line">        self.crawl_thread.result_signal.connect(self.show_result)</span><br><span class="line"></span><br><span class="line">    def crawl(self):</span><br><span class="line">        if not self.line_edit.text().strip():  # 如果用户没有输入任何网址，就单击了“爬取”按钮，</span><br><span class="line">        # 那窗口会弹出一个消息框提示用户先输入网址。</span><br><span class="line">            QMessageBox.critical(self, &#x27;错误&#x27;, &quot;请输入网址！&quot;)</span><br><span class="line">            return                             #注释2结束</span><br><span class="line"></span><br><span class="line">        if not self.crawl_thread.isRunning():</span><br><span class="line">            self.crawl_thread.start()</span><br><span class="line"></span><br><span class="line">    def show_result(self, text):               # 3</span><br><span class="line">        self.text_browser.setPlainText(text)</span><br><span class="line"></span><br><span class="line">class CrawlThread(QThread):</span><br><span class="line">    result_signal = pyqtSignal(str) # 这是编写一个线程类的基本操作。在run()函数中。</span><br><span class="line">    # 我们通过count_signal将数据通过self.crawl_thread.result_signal.connect(self.show_result)发送出来至 show_result 函数中</span><br><span class="line">    def __init__(self, window):</span><br><span class="line">        super(CrawlThread, self).__init__()</span><br><span class="line">        self.window = window</span><br><span class="line"></span><br><span class="line">    def run(self):                             # 3</span><br><span class="line">        url= self.window.line_edit.text().strip() # 获取用户输入的网址</span><br><span class="line">        result = requests.get(url) # 获取该网址的网页源码</span><br><span class="line">        self.result_signal.emit(result.text) # 将源码文本发送出去，最后在show_result()槽函数中将源码文本显示到文本浏览框上</span><br></pre></td></tr></table></figure><h2 id="6-3-1-画笔类QPen"><a href="#6-3-1-画笔类QPen" class="headerlink" title="6.3.1 画笔类QPen"></a>6.3.1 画笔类QPen</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line"></span><br><span class="line">        self.pen = QPen()          # 实例化一个QPen对象</span><br><span class="line">        self.pen.setWidth(5)       # 设置画笔宽度</span><br><span class="line">        self.pen.setColor(Qt.black)  # 设置画笔颜色</span><br><span class="line">        self.pen.setStyle(Qt.DashLine) # 设置笔线风格</span><br><span class="line">        self.pen.setCapStyle(Qt.RoundCap) # 设置笔帽风格</span><br><span class="line">        self.pen.setJoinStyle(Qt.MiterJoin)  # 设置笔线转折风格</span><br><span class="line"></span><br><span class="line">    def paintEvent(self, event):   # 绘图是在paintEvent()绘制事件函数中进行的。</span><br><span class="line">        painter = QPainter(self)  # 在实例化一个QPainter对象时，我们传入窗口实例self，</span><br><span class="line">        # 表示我们将在当前窗口上进行绘制，窗口这时候就是一个绘制设备。</span><br><span class="line">        painter.setPen(self.pen)  # 设置好画笔</span><br><span class="line">        painter.drawLine(20, 20, 280, 280)   # 通过drawLine()和drawRect()方法分别绘制线段和矩形</span><br><span class="line">        painter.drawRect(20, 20, 260, 260)</span><br><span class="line">        # QPainter类提供了几种常用的绘制方法</span><br><span class="line">        # drawArc()       绘制弧</span><br><span class="line">        # drawChord()     绘制弦</span><br><span class="line">        # drawConvexPolygon() 绘制凸多边形</span><br><span class="line">        # drawEllipse()   绘制椭圆</span><br><span class="line">        # drawLine()      绘制线段</span><br><span class="line">        # drawPath()      绘制自定义路径</span><br><span class="line">        # drawPie()       绘制扇形</span><br><span class="line">        # drawPixmap()    绘制图月</span><br><span class="line">        # drawPoint()     绘制一个点</span><br><span class="line">        # drawPolygon()   绘制多边形</span><br><span class="line">        # drawPolyline()  绘制多段线</span><br><span class="line">        # drawRect()      绘制矩形</span><br><span class="line">        # drawRoundedRect() 绘制圆角矩形</span><br><span class="line">        # drawText()      绘制文本</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-3-2-画刷类QBrush"><a href="#6-3-2-画刷类QBrush" class="headerlink" title="6.3.2 画刷类QBrush"></a>6.3.2 画刷类QBrush</h3><p>画刷就跟油漆桶工具一样，是用来填充的。我们可以设置它的填充颜色和填充风格，也可以设置其用来填充图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line"></span><br><span class="line">        self.brush1 = QBrush()                         #注释1开始</span><br><span class="line">        self.brush1.setColor(Qt.red)                   # 设置画刷的填充颜色</span><br><span class="line">        self.brush1.setStyle(Qt.Dense6Pattern)         # 设置画刷的填充风格</span><br><span class="line"></span><br><span class="line">        gradient = QLinearGradient(100, 100, 200, 200) # 线性渐变类</span><br><span class="line">        gradient.setColorAt(0.3, QColor(255, 0, 0))    # setColorAt()方法传入两个参数，第一个参数代表颜色开始渐变的位置（大小范围为0～1），第二个参数代表颜色值。</span><br><span class="line">        gradient.setColorAt(0.6, QColor(0, 255, 0))</span><br><span class="line">        gradient.setColorAt(1.0, QColor(0, 0, 255))</span><br><span class="line">        self.brush2 = QBrush(gradient)                 #注释2结束</span><br><span class="line">        # PyQt提供了3种渐变类：线性渐变类QLinearGradient、辐射渐变类QRadialGradient和角度渐变类QConicalGradient。</span><br><span class="line"></span><br><span class="line">        self.brush3 = QBrush() #注释3开始</span><br><span class="line">        self.brush3.setTexture(QPixmap(&#x27;smile.png&#x27;))                    </span><br><span class="line">        # setTexture()方法设置用于填充的图片，此时填充风格自动变为Qt.TexturePattern。</span><br><span class="line"></span><br><span class="line">    def paintEvent(self, event):   # 4</span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.setBrush(self.brush1)</span><br><span class="line">        painter.drawRect(0, 0, 100, 100)</span><br><span class="line"></span><br><span class="line">        painter.setBrush(self.brush2)</span><br><span class="line">        painter.drawRect(100, 100, 100, 100)</span><br><span class="line"></span><br><span class="line">        painter.setBrush(self.brush3)</span><br><span class="line">        painter.drawRect(200, 200, 100, 100)</span><br><span class="line">        # 4 在paintEvent()事件函数中，我们绘制了3个矩形，每绘制完一个后就调用setBrush()方法更换画刷。</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-3-3-用鼠标在窗口上绘制矩形"><a href="#6-3-3-用鼠标在窗口上绘制矩形" class="headerlink" title="6.3.3 用鼠标在窗口上绘制矩形"></a>6.3.3 用鼠标在窗口上绘制矩形</h3><p>绘图软件的一项基本功能是让用户在画板上自由绘图。<br>在本小节，我们会用鼠标在窗口上绘制任意数量的矩形，好让大家巩固QPainter类的用法并了解用鼠标绘图的原理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtPrintSupport import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(500, 500)</span><br><span class="line">        self.x1 = None</span><br><span class="line">        self.y1 = None</span><br><span class="line">        self.x2 = None</span><br><span class="line">        self.y2 = None</span><br><span class="line">        self.rect_list = []</span><br><span class="line"></span><br><span class="line">        self.pen = QPen()</span><br><span class="line">        self.pen.setWidth(2)</span><br><span class="line">        self.pen.setColor(Qt.green)</span><br><span class="line"></span><br><span class="line">        self.undo_btn = QPushButton(&#x27;撤销&#x27;, self)          #注释1开始</span><br><span class="line">        self.undo_btn.clicked.connect(self.undo_drawing)   #注释1结束</span><br><span class="line">        self.undo_btn.move(20, 20)</span><br><span class="line">        </span><br><span class="line">        ######  打印   ######</span><br><span class="line">        self.printer = QPrinter()                  # 实例化一个QPrinter打印机对象</span><br><span class="line"></span><br><span class="line">        self.print_btn = QPushButton(&#x27;打印&#x27;, self) # 放置一个“打印”按钮，当用户单击按钮后，print_drawing()槽函数就会启动</span><br><span class="line">        self.print_btn.clicked.connect(self.print_drawing)</span><br><span class="line">        self.print_btn.move(20, 50)                #注释1结束</span><br><span class="line"></span><br><span class="line">    def undo_drawing(self):</span><br><span class="line">        if self.rect_list:</span><br><span class="line">            self.rect_list.pop() # 删除rect_list的最后一个元素，也就是最新绘制的矩形。</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):          # 用x1和y1记录单击时的坐标，也就是当前所绘制矩形左上角的坐标。</span><br><span class="line">        if event.button() == Qt.LeftButton:</span><br><span class="line">            self.x1 = event.pos().x()</span><br><span class="line">            self.y1 = event.pos().y()</span><br><span class="line"></span><br><span class="line">    def mouseMoveEvent(self, event): #在mouseMoveEvent()事件函数中，用x2和y2记录鼠标指针当前的坐标，将其作为所绘制矩形右下角的坐标。</span><br><span class="line">        self.x2 = event.pos().x()</span><br><span class="line">        self.y2 = event.pos().y()</span><br><span class="line"></span><br><span class="line">    def mouseReleaseEvent(self, event): # 将矩形的左上角坐标和宽度、高度添加到了rect_list列表变量中。</span><br><span class="line">        if self.x1 and self.y1 and self.x2 and self.y2:</span><br><span class="line">            self.rect_list.append((self.x1, self.y1,self.x2-self.x1, self.y2-self.y1))</span><br><span class="line"></span><br><span class="line">        self.x1 = None</span><br><span class="line">        self.y1 = None</span><br><span class="line">        self.x2 = None</span><br><span class="line">        self.y2 = None</span><br><span class="line">       # 添加完毕后，我们要重置x1、y1、x2和y2，否则绘制下一个矩形时，就会使用之前的坐标。</span><br><span class="line">       </span><br><span class="line">    def paintEvent(self, event):               # 5</span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.setPen(self.pen)  # 实例化一个QPainter对象并设置好画笔</span><br><span class="line"></span><br><span class="line">        if self.x1 and self.y1 and self.x2 and self.y2:</span><br><span class="line">            painter.drawText(self.x2, self.y2, &#x27;矩形&#x27;) # 矩形右下角绘制“矩形”文本</span><br><span class="line">            painter.drawRect(self.x1, self.y1,self.x2-self.x1, self.y2-self.y1) # 在窗口上实时显示用户当前正在绘制的矩形</span><br><span class="line"></span><br><span class="line">        for rect in self.rect_list: # 循环rect_list列表，显示之前已经画好的各个矩形</span><br><span class="line">            painter.drawRect(rect[0], rect[1], rect[2], rect[3])  </span><br><span class="line">        self.update()</span><br><span class="line">        </span><br><span class="line">        ######  打印   ######</span><br><span class="line">    def print_drawing(self):                      </span><br><span class="line">        print_dialog = QPrintDialog(self.printer)  # 将打印机对象传入QPrinterDialog打印对话框中</span><br><span class="line">        if print_dialog.exec():</span><br><span class="line">            painter = QPainter(self.printer)</span><br><span class="line">            painter.setPen(self.pen)</span><br><span class="line">            for rect in self.rect_list:</span><br><span class="line">                painter.drawRect(rect[0], rect[1], rect[2], rect[3])</span><br><span class="line"># 显示对话框，如果该方法返回值是1，则表示用户单击了对话框上的“打印”按钮；如果该方法返回值是0，则表示用户单击了“撤销”按钮。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-3-4-打印"><a href="#6-3-4-打印" class="headerlink" title="6.3.4 打印"></a>6.3.4 打印</h3><p>有些文本类控件，如QTextEdit和QTextBrowser，本身就提供了print()方法，<br>我们只需要往该方法中传入QPrinter对象就能够快速绘制要打印的文本内容，不需要使用QPainter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtPrintSupport import *  # 打印控件</span><br><span class="line"> </span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.edit = QTextEdit()</span><br><span class="line">        self.print_btn = QPushButton(&#x27;打印&#x27;)</span><br><span class="line">        self.print_btn.clicked.connect(self.print_text)</span><br><span class="line"></span><br><span class="line">        self.printer = QPrinter()</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.edit)</span><br><span class="line">        v_layout.addWidget(self.print_btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def print_text(self):</span><br><span class="line">        print_dialog = QprintDialog(self.printer)</span><br><span class="line">        if print_dialog.exec():</span><br><span class="line">            self.edit.print(self.printer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="6-4-1-属性动画类QPropertyAnimation"><a href="#6-4-1-属性动画类QPropertyAnimation" class="headerlink" title="6.4.1 属性动画类QPropertyAnimation"></a>6.4.1 属性动画类QPropertyAnimation</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(500, 500)</span><br><span class="line"></span><br><span class="line">        self.size_btn = QPushButton(&#x27;大小&#x27;, self)</span><br><span class="line">        self.pos_btn = QPushButton(&#x27;位置&#x27;, self)</span><br><span class="line">        self.color_btn = QPushButton(&#x27;颜色&#x27;, self)</span><br><span class="line">        self.size_btn.move(100, 20)</span><br><span class="line">        self.pos_btn.move(200, 20)</span><br><span class="line">        self.color_btn.move(300, 20)</span><br><span class="line">        self.size_btn.clicked.connect(self.start_anim)</span><br><span class="line">        self.pos_btn.clicked.connect(self.start_anim)</span><br><span class="line">        self.color_btn.clicked.connect(self.start_anim)</span><br><span class="line">        self.size_anim = QPropertyAnimation(self.size_btn, b&#x27;size&#x27;)# 传入动画作用的目标对象和属性名称</span><br><span class="line">        # 注意，属性名称要用字节类型数据，所以要在字符串前面添加b。</span><br><span class="line">        # 读者如果想要使用其他的属性，可以使用Python内置的dir()方法，通过它我们能获取到某对象所有的属性和方法。</span><br><span class="line">        self.size_anim.setDuration(6000) # 设置动画时长（单位为毫秒）。</span><br><span class="line">        self.size_anim.setStartValue(QSize(10, 10)) # 设置动画作用对象的属性初始值</span><br><span class="line">        self.size_anim.setEndValue(QSize(100, 300)) # 设置动画作用对象的属性结束值</span><br><span class="line">        # 如果是改变大小，则传入QSize类型的值；如果是改变坐标位置，则传入QPoint类型的值；如果是改变颜色，则传入QColor类型的值。</span><br><span class="line">        self.size_anim.setLoopCount(2)</span><br><span class="line">        # setLoopCount()方法用来设置动画的循环次数。当动画结束后，finished信号就会发射出来。</span><br><span class="line">        # 我们将这个信号与delete()槽函数进行连接，相应按钮会在动画结束时被删除。</span><br><span class="line">        self.size_anim.finished.connect(self.delete)</span><br><span class="line"></span><br><span class="line">        self.pos_anim = QPropertyAnimation(self.pos_btn, b&#x27;pos&#x27;)</span><br><span class="line">        self.pos_anim.setDuration(5000)</span><br><span class="line">        self.pos_anim.setKeyValueAt(0.1, QPoint(200, 100))</span><br><span class="line">        self.pos_anim.setKeyValueAt(0.5, QPoint(200, 200))</span><br><span class="line">        self.pos_anim.setKeyValueAt(1.0, QPoint(200, 400))</span><br><span class="line">        # 使用setKeyValueAt()能够实现更细化的动画控制，第一个传入的参数值为浮点数，范围为0.0～1.0，表示在动画的相应时刻插入一帧</span><br><span class="line">        # 假如动画时长为5000ms，那传入0.5就表示在第2500ms时插入一帧，该帧的属性值就是我们传入的第二个参数值。</span><br><span class="line">        self.pos_anim.finished.connect(self.delete)</span><br><span class="line"></span><br><span class="line">        self.color_anim = QPropertyAnimation(self.color_btn, b&#x27;color&#x27;)</span><br><span class="line">        self.color_anim.setDuration(5000)</span><br><span class="line">        self.color_anim.setStartValue(QColor(0, 0, 0))</span><br><span class="line">        self.color_anim.setEndValue(QColor(255, 255, 255))</span><br><span class="line">        self.color_anim.finished.connect(self.delete)     #注释1结束</span><br><span class="line"># “大小”按钮和“位置”按钮被单击后都是正常运行动画的，但是对“颜色”按钮来说就不行，</span><br><span class="line"># 单击后控制台会提示“you’re trying to animate a non-existing property color of your QObject”。</span><br><span class="line"># 这句话告诉我们QPushButton按钮控件没有颜色属性！</span><br><span class="line"># 我们可以用print(dir(self. color_btn))这行代码输出“颜色”按钮的所有属性，会发现没有“color”</span><br><span class="line"></span><br><span class="line">    def start_anim(self):               # 2</span><br><span class="line">        if self.sender() == self.size_btn:</span><br><span class="line">            self.size_anim.start()</span><br><span class="line">        elif self.sender() == self.pos_btn:</span><br><span class="line">            self.pos_anim.start()</span><br><span class="line">        else:</span><br><span class="line">            self.color_anim.start()</span><br><span class="line">            # 除了start()，还有以下几种控制动画的方法。</span><br><span class="line">            # ● stop()：停止动画。● pause()：暂停动画。● resume()：继续动画。</span><br><span class="line"></span><br><span class="line">    def delete(self):</span><br><span class="line">        if self.sender() == self.size_anim:</span><br><span class="line">            self.size_btn.deleteLater()</span><br><span class="line">        elif self.sender() == self.pos_anim:</span><br><span class="line">            self.pos_btn.deleteLater()</span><br><span class="line">        else:</span><br><span class="line">            self.color_btn.deleteLater()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-4-1-属性动画类QPropertyAnimation-改变按钮颜色"><a href="#6-4-1-属性动画类QPropertyAnimation-改变按钮颜色" class="headerlink" title="6.4.1 属性动画类QPropertyAnimation-改变按钮颜色"></a>6.4.1 属性动画类QPropertyAnimation-改变按钮颜色</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class ColorButton(QPushButton):</span><br><span class="line">    def __init__(self, text=None, parent=None):</span><br><span class="line">        super(ColorButton, self).__init__(text, parent)</span><br><span class="line">        self._color = QColor()</span><br><span class="line"></span><br><span class="line">    @pyqtProperty(QColor)      # 返回QColor类型的值</span><br><span class="line">    def color(self):</span><br><span class="line">        return self._color</span><br><span class="line"></span><br><span class="line">    @color.setter              # 2</span><br><span class="line">    def color(self, value):</span><br><span class="line">        self._color = value</span><br><span class="line">        red = value.red()</span><br><span class="line">        green = value.green()</span><br><span class="line">        blue = value.blue()</span><br><span class="line">        self.setStyleSheet(f&#x27;background-color: rgb(&#123;red&#125;, &#123;green&#125;, &#123;blue&#125;)&#x27;)</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.color_btn = ColorButton(&#x27;颜色&#x27;, self)</span><br><span class="line">        self.color_btn.move(20, 20)</span><br><span class="line">        self.color_btn.resize(100, 100)</span><br><span class="line">        self.color_btn.clicked.connect(self.start_anim)</span><br><span class="line"></span><br><span class="line">        self.color_anim = QPropertyAnimation(self.color_btn, b&#x27;color&#x27;)</span><br><span class="line">        self.color_anim.setDuration(5000)</span><br><span class="line">        self.color_anim.setStartValue(QColor(0, 0, 0))</span><br><span class="line">        self.color_anim.setEndValue(QColor(255, 255, 255))</span><br><span class="line">        self.color_anim.finished.connect(self.delete)</span><br><span class="line"></span><br><span class="line">    def start_anim(self):</span><br><span class="line">        self.color_anim.start()</span><br><span class="line"></span><br><span class="line">    def delete(self):</span><br><span class="line">        self.color_btn.deleteLater()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-4-2-串行动画组类QSequentialAnimationGroup"><a href="#6-4-2-串行动画组类QSequentialAnimationGroup" class="headerlink" title="6.4.2 串行动画组类QSequentialAnimationGroup"></a>6.4.2 串行动画组类QSequentialAnimationGroup</h3><p>串行动画组就是指按照动画添加顺序来执行动画。<br>我们只用实例化QSequentialAnimationGroup类，<br>然后调用addAnimation()或者insertAnimation()方法把各个属性动画添加到动画组里面就可以了，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(500, 500)</span><br><span class="line"></span><br><span class="line">        self.start_btn = QPushButton(&#x27;开始&#x27;, self)</span><br><span class="line">        self.stop_btn = QPushButton(&#x27;停止&#x27;, self)</span><br><span class="line">        self.pause_resume_btn = QPushButton(&#x27;暂停/继续&#x27;, self)</span><br><span class="line">        self.start_btn.move(20, 20)</span><br><span class="line">        self.stop_btn.move(20, 50)</span><br><span class="line">        self.pause_resume_btn.move(20, 80)</span><br><span class="line">        self.start_btn.clicked.connect(self.control_anim)</span><br><span class="line">        self.stop_btn.clicked.connect(self.control_anim)</span><br><span class="line">        self.pause_resume_btn.clicked.connect(self.control_anim)</span><br><span class="line"></span><br><span class="line">        self.plane = QLabel(self)</span><br><span class="line">        self.plane.move(200, 400)</span><br><span class="line">        self.plane.setPixmap(QPixmap(&#x27;11.png&#x27;))</span><br><span class="line">        self.plane.setScaledContents(True)</span><br><span class="line"></span><br><span class="line">        self.anim1 = QPropertyAnimation(self.plane, b&#x27;pos&#x27;)   # 实例化了两个属性动画</span><br><span class="line">        self.anim1.setDuration(2000)</span><br><span class="line">        self.anim1.setStartValue(QPoint(200, 400))</span><br><span class="line">        self.anim1.setEndValue(QPoint(200, 300))</span><br><span class="line">        self.anim2 = QPropertyAnimation(self.plane, b&#x27;pos&#x27;)</span><br><span class="line">        self.anim2.setDuration(3000)</span><br><span class="line">        self.anim2.setStartValue(QPoint(200, 300))</span><br><span class="line">        self.anim2.setEndValue(QPoint(100, 200))              #注释1结束</span><br><span class="line"></span><br><span class="line">        self.anim_group = QSequentialAnimationGroup()         #注释2开始</span><br><span class="line">        self.anim_group.addAnimation(self.anim1)</span><br><span class="line">        self.anim_group.addPause(1000)                        # 添加了一个暂停1000ms的特殊动画</span><br><span class="line">        self.anim_group.addAnimation(self.anim2)</span><br><span class="line">        self.anim_group.stateChanged.connect(self.get_info)</span><br><span class="line">        print(self.anim_group.totalDuration())                #注释2结束</span><br><span class="line"></span><br><span class="line">    def get_info(self):                                     </span><br><span class="line">        print(self.anim_group.currentAnimation())  # 取当前正在播放的动画对象</span><br><span class="line">        print(self.anim_group.currentTime())       # 取当前正在播放的动画时间</span><br><span class="line"></span><br><span class="line">    def control_anim(self):                                   # 4 开始播放和停止播放动画 </span><br><span class="line">        if self.sender() == self.start_btn:</span><br><span class="line">            self.anim_group.start()</span><br><span class="line">        elif self.sender() == self.stop_btn:</span><br><span class="line">            self.anim_group.stop()</span><br><span class="line">        else:</span><br><span class="line">            if self.anim_group.state() == QAbstractAnimation.Paused: # 获取当前的动画状态</span><br><span class="line">                self.anim_group.resume() # 继续动画</span><br><span class="line">            else:</span><br><span class="line">                self.anim_group.pause() # 暂停动画</span><br><span class="line">            # 动画状态有3种</span><br><span class="line">            # QAbstractAnimation.Stopped      停止状态</span><br><span class="line">            # QAbstractAnimation.Paused       暂停状态</span><br><span class="line">            # QAbstractAnimation.Running      播放状态</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-4-3-并行动画组类QParallelAnimationGroup"><a href="#6-4-3-并行动画组类QParallelAnimationGroup" class="headerlink" title="6.4.3 并行动画组类QParallelAnimationGroup"></a>6.4.3 并行动画组类QParallelAnimationGroup</h3><p>串行动画组就是指按照动画添加顺序来执行动画。<br>我们只用实例化QSequentialAnimationGroup类，<br>然后调用addAnimation()或者insertAnimation()方法把各个属性动画添加到动画组里面就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(500, 500)</span><br><span class="line"></span><br><span class="line">        self.start_btn = QPushButton(&#x27;开始&#x27;, self)</span><br><span class="line">        self.stop_btn = QPushButton(&#x27;停止&#x27;, self)</span><br><span class="line">        self.pause_resume_btn = QPushButton(&#x27;暂停/继续&#x27;, self)</span><br><span class="line">        self.start_btn.move(20, 20)</span><br><span class="line">        self.stop_btn.move(20, 50)</span><br><span class="line">        self.pause_resume_btn.move(20, 80)</span><br><span class="line">        self.start_btn.clicked.connect(self.control_anim)</span><br><span class="line">        self.stop_btn.clicked.connect(self.control_anim)</span><br><span class="line">        self.pause_resume_btn.clicked.connect(self.control_anim)</span><br><span class="line"></span><br><span class="line">        self.plane = QLabel(self)</span><br><span class="line">        self.plane.move(200, 400)</span><br><span class="line">        self.plane.setPixmap(QPixmap(&#x27;11.png&#x27;))</span><br><span class="line">        self.plane.setScaledContents(True)</span><br><span class="line"></span><br><span class="line">        self.anim1 = QPropertyAnimation(self.plane, b&#x27;pos&#x27;)# 属性动画anim1和anim2分别用来修改飞机的位置和大小。</span><br><span class="line">        self.anim1.setDuration(2000)                       # 但在并行动画组中，这两个动画会同时运行。</span><br><span class="line">        self.anim1.setStartValue(QPoint(200, 400))</span><br><span class="line">        self.anim1.setEndValue(QPoint(200, 300))</span><br><span class="line">        self.anim2 = QPropertyAnimation(self.plane, b&#x27;size&#x27;)</span><br><span class="line">        self.anim2.setDuration(3000)</span><br><span class="line">        self.anim2.setStartValue(QSize(200, 200))</span><br><span class="line">        self.anim2.setEndValue(QSize(60, 60))</span><br><span class="line"></span><br><span class="line">        self.anim_group = QParallelAnimationGroup()</span><br><span class="line">        self.anim_group.addAnimation(self.anim1)</span><br><span class="line">        self.anim_group.addAnimation(self.anim2)</span><br><span class="line">        self.anim_group.stateChanged.connect(self.get_info)</span><br><span class="line">        print(self.anim_group.totalDuration())</span><br><span class="line">        # 并行动画组没有addPause()方法，因为不能让暂停动画和其他动画一起播放，这样没有意义。</span><br><span class="line">        # currentAnimation()方法也不适用，因为同一时间段总是有多个动画。</span><br><span class="line">        </span><br><span class="line">    def get_info(self):</span><br><span class="line">        print(self.anim_group.currentTime())             #注释1结束</span><br><span class="line">        </span><br><span class="line">    def control_anim(self):                                   # 4 开始播放和停止播放动画 </span><br><span class="line">        if self.sender() == self.start_btn:</span><br><span class="line">            self.anim_group.start()</span><br><span class="line">        elif self.sender() == self.stop_btn:</span><br><span class="line">            self.anim_group.stop()</span><br><span class="line">        else:</span><br><span class="line">            if self.anim_group.state() == QAbstractAnimation.Paused: # 获取当前的动画状态</span><br><span class="line">                self.anim_group.resume() # 继续动画</span><br><span class="line">            else:</span><br><span class="line">                self.anim_group.pause() # 暂停动画</span><br><span class="line">            # 动画状态有3种</span><br><span class="line">            # QAbstractAnimation.Stopped      停止状态</span><br><span class="line">            # QAbstractAnimation.Paused       暂停状态</span><br><span class="line">            # QAbstractAnimation.Running      播放状态</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-4-4-时间轴类QTimeline"><a href="#6-4-4-时间轴类QTimeline" class="headerlink" title="6.4.4 时间轴类QTimeline"></a>6.4.4 时间轴类QTimeline</h3><p>一个动画由多张静态图片组成，每一张静态图片为一帧。<br>如果每隔一定时间显示一帧，且时间间隔非常短的话，那这些静态图片就会构成一个连续影像，动画由此而来。<br>QTimeLine提供了用于控制动画的时间轴，我们可以用它来快速实现动画效果。<br>示例代码QTimeLine给按钮添加了一段移动动画，同时用QProgressBar显示了动画进度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(500, 130)</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;开始&#x27;, self)</span><br><span class="line">        self.btn.resize(100, 100)</span><br><span class="line">        self.btn.move(0, 0)</span><br><span class="line">        self.btn.clicked.connect(self.start_anim)</span><br><span class="line"></span><br><span class="line">        self.progress_bar = QProgressBar(self)</span><br><span class="line">        self.progress_bar.setRange(0, 100)</span><br><span class="line">        self.progress_bar.resize(500, 20)</span><br><span class="line">        self.progress_bar.move(0, 100)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.time_line = QTimeLine(1000)           # 实例化QTimeLine对象时候需传时间值（单位是毫秒）作为动画的运行时长</span><br><span class="line">        self.time_line.setFrameRange(0, 100)       # 设置动画帧数范围，表示在动画运行时长内要播放多少帧</span><br><span class="line">        self.time_line.frameChanged.connect(self.move_btn)  # 帧数发生改变时，frameChanged信号就会发射</span><br><span class="line">        self.time_line.finished.connect(self.change_direction) </span><br><span class="line">        # # QTimeLine默认使用的缓动曲线(Easing Curve)为QEasingCurve.InOutSine</span><br><span class="line">        # self.time_line.setEasingCurve(QEasingCurve.OutQuart)  # 调用setEasingCurve()方法来修改缓动曲线的类型，比如改成QEasingCurve. OutQuart</span><br><span class="line">        # 可以在官方文档中搜索QEasingCurve来查看所有的缓动曲线。</span><br><span class="line">        </span><br><span class="line">    def start_anim(self):</span><br><span class="line">        if self.time_line.state() == QTimeLine.NotRunning:</span><br><span class="line">            self.time_line.start()</span><br><span class="line"></span><br><span class="line">    def move_btn(self):                        # 2</span><br><span class="line">        frame = self.time_line.currentFrame()  # 获取动画当前的帧数来确定按钮的目标位置和进度条的进度</span><br><span class="line">        self.btn.move(frame*4, 0)</span><br><span class="line">        self.progress_bar.setValue(frame) </span><br><span class="line"></span><br><span class="line">    def change_direction(self):                # 3 </span><br><span class="line">        if self.time_line.direction() == QTimeLine.Forward: # 通过direction()获取当前的播放方向</span><br><span class="line">            self.time_line.setDirection(QTimeLine.Backward) # setDirection()方法改变播放方向</span><br><span class="line">        else:</span><br><span class="line">            self.time_line.setDirection(QTimeLine.Forward)</span><br><span class="line">    # QTimeLine中的动画状态一共有3种</span><br><span class="line">    # QTimeLine.NoRunning   动画未开始或已结束</span><br><span class="line">    # QTimeLine.Running     动画正在播放</span><br><span class="line">    # QTimeLine.Paused      动画被暂停</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="6-5-1-声音类QSound"><a href="#6-5-1-声音类QSound" class="headerlink" title="6.5.1 声音类QSound"></a>6.5.1 声音类QSound</h2><p>如果只是想简单地播放一段音频，那用QSound类就够了，我们只需要调用它的play()方法，不过它只能播放.wav格式的音频文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtMultimedia import * # 导入多媒体模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(100, 30)</span><br><span class="line"></span><br><span class="line">        self.sound = QSound(&#x27;audio.wav&#x27;)   </span><br><span class="line">        self.sound.setLoops(2)             # 设置播放音频的循环次数，如果想要无限循环，可以传入QSound.Infinite</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;播放/停止&#x27;, self)</span><br><span class="line">        self.btn.clicked.connect(self.play_or_stop)</span><br><span class="line"></span><br><span class="line">    def play_or_stop(self):                # 2</span><br><span class="line">        if self.sound.isFinished(): # 判断音频是否处于结束状态</span><br><span class="line">            self.sound.play()</span><br><span class="line">        else:</span><br><span class="line">            self.sound.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-5-2-音效类QSoundEffect"><a href="#6-5-2-音效类QSoundEffect" class="headerlink" title="6.5.2 音效类QSoundEffect"></a>6.5.2 音效类QSoundEffect</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">QSoundEffect可以用来播放无压缩的音频文件（典型的是.wav文件）。</span><br><span class="line">通过它我们不仅能够以低延迟的方式来播放音频，还能够对音频进行更进一步的操作（比如控制音量）。</span><br><span class="line">该类非常适合用来播放交互音效，如弹出框的提示音、游戏音效等。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtMultimedia import * # 导入多媒体模块</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(80, 60)</span><br><span class="line"></span><br><span class="line">        self.sound_effect = QSoundEffect()     # 实例化一个QSoundEffect对象</span><br><span class="line">        self.sound_effect.setSource(QUrl.fromLocalFile(&#x27;click.wav&#x27;)) # 设置音频源，传入一个QUrl类型的参数。</span><br><span class="line">        self.sound_effect.setLoopCount(1)    # 设置音频播放的循环次数，如果想要无限循环，可以传入QSoundEffect.Infinite。</span><br><span class="line">        self.sound_effect.setVolume(0.8)       #设置声音的音量，范围为0.0～1.0</span><br><span class="line"></span><br><span class="line">        self.btn1 = QPushButton(&#x27;播放&#x27;, self)</span><br><span class="line">        self.btn2 = QPushButton(&#x27;关闭声音&#x27;, self)</span><br><span class="line">        self.btn1.move(0, 0)</span><br><span class="line">        self.btn2.move(0, 30)</span><br><span class="line">        self.btn1.clicked.connect(self.play)</span><br><span class="line">        self.btn2.clicked.connect(self.mute_unmute)</span><br><span class="line"></span><br><span class="line">    def play(self):</span><br><span class="line">        self.sound_effect.play()</span><br><span class="line"></span><br><span class="line">    def mute_unmute(self):      </span><br><span class="line">        if self.sound_effect.isMuted():       # 判断当前音频是否为静音</span><br><span class="line">            self.sound_effect.setMuted(False) </span><br><span class="line">            self.btn2.setText(&#x27;关闭声音&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            self.sound_effect.setMuted(True)</span><br><span class="line">            self.btn2.setText(&#x27;开启声音&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-5-3-媒体播放机类QMediaPlayer-播放视频"><a href="#6-5-3-媒体播放机类QMediaPlayer-播放视频" class="headerlink" title="6.5.3 媒体播放机类QMediaPlayer-播放视频"></a>6.5.3 媒体播放机类QMediaPlayer-播放视频</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtMultimedia import * # 导入多媒体模块</span><br><span class="line">from PyQt5.Qt import QVideoWidget # 导入视频模块</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(600, 400)</span><br><span class="line"></span><br><span class="line">        video1 = QUrl.fromLocalFile(&#x27;./video1.mp4&#x27;)</span><br><span class="line">        video2 = QUrl.fromLocalFile(&#x27;./video2.mp4&#x27;)</span><br><span class="line">        video3 = QUrl.fromLocalFile(&#x27;./video3.mp4&#x27;)</span><br><span class="line"></span><br><span class="line">        self.playlist = QMediaPlaylist()           #注释1开始</span><br><span class="line">        self.playlist.addMedia(QMediaContent(video1))</span><br><span class="line">        self.playlist.addMedia(QMediaContent(video2))</span><br><span class="line">        self.playlist.addMedia(QMediaContent(video3))</span><br><span class="line">        self.playlist.setCurrentIndex(0)</span><br><span class="line">        self.playlist.setPlaybackMode(QMediaPlaylist.Loop)</span><br><span class="line">        self.playlist.currentMediaChanged.connect(self.show_info)</span><br><span class="line"></span><br><span class="line">        self.video_widget = QVideoWidget()</span><br><span class="line"></span><br><span class="line">        self.player = QMediaPlayer()</span><br><span class="line">        self.player.setPlaylist(self.playlist)</span><br><span class="line">        self.player.setVideoOutput(self.video_widget)#注释1结束</span><br><span class="line"></span><br><span class="line">        self.btn1 = QPushButton(&#x27;上一个&#x27;, self)</span><br><span class="line">        self.btn2 = QPushButton(&#x27;播放/停止&#x27;, self)</span><br><span class="line">        self.btn3 = QPushButton(&#x27;下一个&#x27;, self)</span><br><span class="line">        self.btn1.clicked.connect(self.control)</span><br><span class="line">        self.btn2.clicked.connect(self.control)</span><br><span class="line">        self.btn3.clicked.connect(self.control)</span><br><span class="line"></span><br><span class="line">        btn_h_layout = QHBoxLayout()</span><br><span class="line">        window_v_layout = QVBoxLayout()</span><br><span class="line">        btn_h_layout.addWidget(self.btn1)</span><br><span class="line">        btn_h_layout.addWidget(self.btn2)</span><br><span class="line">        btn_h_layout.addWidget(self.btn3)</span><br><span class="line">        window_v_layout.addWidget(self.video_widget)</span><br><span class="line">        window_v_layout.addLayout(btn_h_layout)</span><br><span class="line">        self.setLayout(window_v_layout)</span><br><span class="line"></span><br><span class="line">    def show_info(self):</span><br><span class="line">        print(&#x27;索引：&#x27;, self.playlist.currentIndex())</span><br><span class="line">        print(&#x27;当前媒体：&#x27;, self.playlist.currentMedia())</span><br><span class="line"></span><br><span class="line">    def control(self):</span><br><span class="line">        print(&#x27;媒体状态：&#x27;, self.player.mediaStatus())</span><br><span class="line"></span><br><span class="line">        if self.sender() == self.btn1:</span><br><span class="line">            self.playlist.previous()</span><br><span class="line">        elif self.sender() == self.btn2:</span><br><span class="line">            if self.player.state() == QMediaPlayer.StoppedState:</span><br><span class="line">                self.player.play()</span><br><span class="line">            else:</span><br><span class="line">                self.player.stop()</span><br><span class="line">        else:</span><br><span class="line">            self.playlist.next()</span><br><span class="line"># 如果无法播放视频，可能是没有视频解码器，安装LAV Filters就可以了。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-5-3-媒体播放机类QMediaPlayer-播放音频"><a href="#6-5-3-媒体播放机类QMediaPlayer-播放音频" class="headerlink" title="6.5.3 媒体播放机类QMediaPlayer-播放音频"></a>6.5.3 媒体播放机类QMediaPlayer-播放音频</h3><p>QMediaPlayer是一个高级的媒体播放机类，它的功能非常强大，通过它我们既可以播放音频（可以是.mp3格式的文件），也可以播放视频。<br>该类可以和播放列表类QMediaPlayList一同使用，播放列表用来存放待播放的音频和视频源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtMultimedia import * # 导入多媒体模块</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(320, 50)</span><br><span class="line"></span><br><span class="line">        audio1 = QUrl.fromLocalFile(&#x27;./audio1.wav&#x27;)       # 首先将音频源保存在audio1、audio2和audio3变量中</span><br><span class="line">        audio2 = QUrl.fromLocalFile(&#x27;./audio2.mp3&#x27;)</span><br><span class="line">        audio3 = QUrl.fromLocalFile(&#x27;./audio3.mp3&#x27;)</span><br><span class="line"></span><br><span class="line">        self.playlist = QMediaPlaylist()    # 实例化一个QMediaPlaylist对象</span><br><span class="line">        self.playlist.addMedia(QMediaContent(audio1)) # 将各个音频源添加到播放列表中</span><br><span class="line">        self.playlist.addMedia(QMediaContent(audio2)) # 该方法接收一个QMediaContent类型的参数</span><br><span class="line">        self.playlist.addMedia(QMediaContent(audio3))</span><br><span class="line">        self.playlist.setCurrentIndex(0)              # 设置当前要播放的音频，传入0表示播放第一个音频</span><br><span class="line">        # 如果需要切换到上一个音频或下一个音频，我们可以直接调用previous()或next()来实现</span><br><span class="line">        self.playlist.setPlaybackMode(QMediaPlaylist.Loop)</span><br><span class="line">        self.playlist.currentMediaChanged.connect(self.show_info)</span><br><span class="line">        # 当一个音频播放完毕，要切换时，currentMediaChanged信号会发射出来</span><br><span class="line">        </span><br><span class="line">        # setPlaybackMode()方法用来设置播放模式</span><br><span class="line">        # QMediaPlaylist.CurrentltemOnce    当前音频只播放一次</span><br><span class="line">        # QMediaPlaylist.CurrentlteminLoop  单曲循环</span><br><span class="line">        # QMediaPlaylist.Sequential          顺序播放</span><br><span class="line">        # QMediaPlaylist.Loop               列表循环</span><br><span class="line">        # QMediaPlaylist.Random              随机播放</span><br><span class="line"></span><br><span class="line">        self.player = QMediaPlayer()   </span><br><span class="line">        self.player.setPlaylist(self.playlist) # 设置媒体播放机要播放的音频列表。</span><br><span class="line">        self.player.setVolume(90)              # setVolume()用来设置音量，范围为0～100。</span><br><span class="line"></span><br><span class="line">        self.btn1 = QPushButton(&#x27;上一个&#x27;, self)</span><br><span class="line">        self.btn2 = QPushButton(&#x27;播放/停止&#x27;, self)</span><br><span class="line">        self.btn3 = QPushButton(&#x27;下一个&#x27;, self)</span><br><span class="line">        self.btn1.move(0, 0)</span><br><span class="line">        self.btn2.move(90, 0)</span><br><span class="line">        self.btn3.move(190, 0)</span><br><span class="line">        self.btn1.clicked.connect(self.control)</span><br><span class="line">        self.btn2.clicked.connect(self.control)</span><br><span class="line">        self.btn3.clicked.connect(self.control)</span><br><span class="line"></span><br><span class="line">    def show_info(self):               # 3</span><br><span class="line">        print(&#x27;当前媒体：&#x27;, self.playlist.currentMedia())  # 获取媒体对象</span><br><span class="line">        print(&#x27;索引：&#x27;, self.playlist.currentIndex())      # 获取媒体对象在列表中的索引</span><br><span class="line"></span><br><span class="line">    def control(self):                     # 4</span><br><span class="line">        print(&#x27;媒体状态：&#x27;, self.player.mediaStatus()) # 获取当前音频文件的加载状态</span><br><span class="line">        # 共有9种加载状态</span><br><span class="line">        # 常量                              值       描述</span><br><span class="line">        # QMediaPlayer.UnknownMediaStatus   0    未知媒体状态</span><br><span class="line">        # QMediaPlayer.NoMedia              1    无媒体文件，QMediaPlayer必于stoppedState播放状态</span><br><span class="line">        # MediaPlayer.LoadingMedia          2    正在加载媒体文件，QMediaPlayer可以必于任何状态</span><br><span class="line">        # QMediaPlayer.LoadedMedia          3    已加载媒体文件，QMediaPlayer必于stoppedState播放状态</span><br><span class="line">        # QMediaPlayer.StalledMedia         4    媒体文件由于缓中不足或其他原因处于卡顿的加载状态，QMediaPlayer必于PlavingState(正在播放)或PausedState(暂停播放)状态</span><br><span class="line">        # QMediaPlayer.BufferingMedia       5    在缓中数据，QMediaPlayer必于PlayingState(正在播放)或PausedState (暂停播放)状态</span><br><span class="line">        # OMediaPlaver.BufferedMedia        6    正已完成缓冲，QMediaPlayer必于PlayingState (正在播放)或PausedState (暂停播放)状态</span><br><span class="line">        # QMediaPlayer.EndOfMedia           7    媒体文件播放结束，QMediaPlayer必于StoppedState (停止播放)状态</span><br><span class="line">        # QMediaPlayerInvalidMedia          8    非法的媒体文件，QMediaPlayer必于StoppedState   (停止播放)状态</span><br><span class="line">        </span><br><span class="line">        # QMediaPlayer的播放状态有以下3种</span><br><span class="line">        # QMediaPlayer.StoppedState 停止播放状态</span><br><span class="line">        # QMediaPlayer.PlayingState  正在播放状态</span><br><span class="line">        # QMediaPlayer.PausedState   暂停播放状态</span><br><span class="line"></span><br><span class="line">        if self.sender() == self.btn1:</span><br><span class="line">            self.playlist.previous()</span><br><span class="line">        elif self.sender() == self.btn2:</span><br><span class="line">            if self.player.state() == QMediaPlayer.StoppedState:</span><br><span class="line">                self.player.play()</span><br><span class="line">            else:</span><br><span class="line">                self.player.stop()</span><br><span class="line">        else:</span><br><span class="line">            self.playlist.next()</span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="6-6-1-了解QWebEngineView"><a href="#6-6-1-了解QWebEngineView" class="headerlink" title="6.6.1 了解QWebEngineView"></a>6.6.1 了解QWebEngineView</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">from PyQt5.QtWebEngineWidgets import QWebEngineView</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.web_view = QWebEngineView()               #注释1开始</span><br><span class="line">        self.web_view.load(QUrl(&#x27;https://www.baidu.com&#x27;))  # 加载一个网页，需要传入一个QUrl类型的参数</span><br><span class="line">        self.web_view.loadStarted.connect(self.start)      # loadStarted信号会在网页开始加载时发射；</span><br><span class="line">        self.web_view.loadProgress.connect(self.progress)</span><br><span class="line">        self.web_view.loadFinished.connect(self.finish)</span><br><span class="line">        self.web_view.urlChanged.connect(self.show_url)#注释1结束</span><br><span class="line">        # loadProgress信号会在网页加载过程中不断发射，连接的progress()槽函数会不断输出当前的加载进度，如果进度为100，则表示加载完毕；</span><br><span class="line">        # loadFinished信号会在网页加载结束后发射，在finish()槽函数中，我们可以通过title()获取网页的标题；</span><br><span class="line">        # 最后一个urlChanged信号会在网页地址发生改变时发射。</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;更改网址&#x27;)              #注释2开始</span><br><span class="line">        self.btn.clicked.connect(self.change_url)      #注释2结束</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.web_view)</span><br><span class="line">        v_layout.addWidget(self.btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def start(self):</span><br><span class="line">        print(&#x27;开始加载&#x27;)</span><br><span class="line"></span><br><span class="line">    def progress(self, value):</span><br><span class="line">        print(value)</span><br><span class="line"></span><br><span class="line">    def finish(self):</span><br><span class="line">        print(&#x27;加载结束&#x27;)</span><br><span class="line">        print(self.web_view.title())</span><br><span class="line">        print(self.web_view.icon())</span><br><span class="line"></span><br><span class="line">    def show_url(self):</span><br><span class="line">        print(self.web_view.url())</span><br><span class="line"></span><br><span class="line">    def change_url(self):</span><br><span class="line">        self.web_view.setUrl(QUrl(&#x27;https://www.ptpress.com.cn/&#x27;)) #调用了setUrl()方法显示出新的网页。</span><br><span class="line">        # 如果想要显示自定义的HTML页面，可以调用setHtml()方法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-6-2-制作一款简单的浏览器"><a href="#6-6-2-制作一款简单的浏览器" class="headerlink" title="6.6.2 制作一款简单的浏览器"></a>6.6.2 制作一款简单的浏览器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtWebEngineWidgets import QWebEngineView</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(1000, 600)</span><br><span class="line">        self.url_input = QLineEdit()       #注释1开始</span><br><span class="line">        self.back_btn = QPushButton()      # 后退</span><br><span class="line">        self.forward_btn = QPushButton()   # 前进</span><br><span class="line">        self.refresh_btn = QPushButton()   # 刷新</span><br><span class="line">        self.zoom_in_btn = QPushButton()   # 放大网页</span><br><span class="line">        self.zoom_out_btn = QPushButton()  # 缩小网页</span><br><span class="line">        self.web_view = QWebEngineView()   </span><br><span class="line"></span><br><span class="line">        self.init_ui()</span><br><span class="line"></span><br><span class="line">    def init_ui(self):</span><br><span class="line">        self.init_widgets()</span><br><span class="line">        self.init_signals()</span><br><span class="line">        self.init_layouts()</span><br><span class="line"></span><br><span class="line">    def init_widgets(self):</span><br><span class="line">        self.back_btn.setEnabled(False) </span><br><span class="line">        self.forward_btn.setEnabled(False)</span><br><span class="line">        self.back_btn.setIcon(QIcon(&#x27;back.png&#x27;))</span><br><span class="line">        self.forward_btn.setIcon(QIcon(&#x27;forward.png&#x27;))</span><br><span class="line">        self.refresh_btn.setIcon(QIcon(&#x27;refresh.png&#x27;))</span><br><span class="line">        self.zoom_in_btn.setIcon(QIcon(&#x27;zoom-in.png&#x27;))</span><br><span class="line">        self.zoom_out_btn.setIcon(QIcon(&#x27;zoom-out.png&#x27;))</span><br><span class="line">        self.url_input.setText(&#x27;about:blank&#x27;)</span><br><span class="line">        self.url_input.setPlaceholderText(&#x27;请输入网址&#x27;)</span><br><span class="line">        self.web_view.setUrl(QUrl(&#x27;about:blank&#x27;))</span><br><span class="line"></span><br><span class="line">    def init_signals(self):                 # 2</span><br><span class="line">        self.back_btn.clicked.connect(self.web_view.back) </span><br><span class="line">        self.forward_btn.clicked.connect(self.web_view.forward)</span><br><span class="line">        self.refresh_btn.clicked.connect(self.web_view.reload)</span><br><span class="line">        self.zoom_in_btn.clicked.connect(self.zoom_in)</span><br><span class="line">        self.zoom_out_btn.clicked.connect(self.zoom_out)</span><br><span class="line">        self.web_view.loadFinished.connect(self.update_state) # 当网页加载完毕，loadFinished信号就会发射</span><br><span class="line">        # 在放大和缩小网页时，先调用zoomFactor()方法获取到当前网页的缩放值，</span><br><span class="line">        # 在这个基础上再通过setZoomFactor()方法设置新的缩放值（范围为0.25～5.0）。</span><br><span class="line">        </span><br><span class="line">    def init_layouts(self):</span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        h_layout.addWidget(self.back_btn)</span><br><span class="line">        h_layout.addWidget(self.forward_btn)</span><br><span class="line">        h_layout.addWidget(self.refresh_btn)</span><br><span class="line">        h_layout.addWidget(self.url_input)</span><br><span class="line">        h_layout.addWidget(self.zoom_in_btn)</span><br><span class="line">        h_layout.addWidget(self.zoom_out_btn)</span><br><span class="line">        v_layout.addLayout(h_layout)</span><br><span class="line">        v_layout.addWidget(self.web_view)</span><br><span class="line">        v_layout.setContentsMargins(0, 8, 0, 0)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">    def update_state(self):</span><br><span class="line">        url = self.web_view.url().toString()  # 将url_input控件中的文本设置为当前所加载的网址。</span><br><span class="line">        self.url_input.setText(url)</span><br><span class="line"></span><br><span class="line">        if self.web_view.history().canGoBack(): # 获取到网页历史对象，它保留了当前用户的浏览记录</span><br><span class="line">            self.back_btn.setEnabled(True)</span><br><span class="line">        else:</span><br><span class="line">            self.back_btn.setEnabled(False)</span><br><span class="line"></span><br><span class="line">        if self.web_view.history().canGoForward():# 调用该对象的canGoBack()和canGoForward()方法就可以知道当前是否能够后退或前进。</span><br><span class="line">            self.forward_btn.setEnabled(True)</span><br><span class="line">        else:</span><br><span class="line">            self.forward_btn.setEnabled(False)</span><br><span class="line"></span><br><span class="line">    def zoom_in(self):</span><br><span class="line">        zoom_factor = self.web_view.zoomFactor()</span><br><span class="line">        self.web_view.setZoomFactor(zoom_factor + 0.1)</span><br><span class="line"></span><br><span class="line">    def zoom_out(self):</span><br><span class="line">        zoom_factor = self.web_view.zoomFactor()</span><br><span class="line">        self.web_view.setZoomFactor(zoom_factor - 0.1)</span><br><span class="line"></span><br><span class="line">    def keyPressEvent(self, event):     # 当用户在文本框中输完URL并按“Enter”键后，我们要先判断文本框是否有焦点（部分用户输入完毕后可能会先单击窗口其他地方，导致文本框失去焦点）</span><br><span class="line">        if event.key() == Qt.Key_Enter:</span><br><span class="line">            if not self.url_input.hasFocus():</span><br><span class="line">                return</span><br><span class="line">            # 假如不进行判断，那每当用户在窗口上按“Enter”键后，网页就会直接重新加载。</span><br><span class="line">            url = self.url_input.text() # 判断用户输入的URL是否以“https://”或“http://”开头，不是的话就先加上“https://”再进行加载。</span><br><span class="line">            if url.startswith(&#x27;https://&#x27;) or url.startswith(&#x27;http://&#x27;):</span><br><span class="line">                self.web_view.load(QUrl(url))</span><br><span class="line">            else:</span><br><span class="line">                url = &#x27;https://&#x27; + url</span><br><span class="line">                self.web_view.load(QUrl(url))</span><br><span class="line"></span><br><span class="line">            self.url_input.setText(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="6-7-1-QUdpSocket-开发多人聊天室应用"><a href="#6-7-1-QUdpSocket-开发多人聊天室应用" class="headerlink" title="6.7.1 QUdpSocket 开发多人聊天室应用"></a>6.7.1 QUdpSocket 开发多人聊天室应用</h2><p>PyQt提供了QUdpSocket、QTcpSocket、QTcpServer这3个类，它们封装了许多功能，能够帮助我们快速实现基于UDP和TCP的应用程序。<br>它们相较于Python标准库中的socket模块使用起来也更加方便。这3个类都在QtNetwork模块中，使用前要先导入它们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Client(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Client, self).__init__()</span><br><span class="line">        self.resize(600, 500)</span><br><span class="line"></span><br><span class="line">        self.browser = QTextBrowser()          # 用来显示当前用户发送和接收到的各种信息</span><br><span class="line">        self.edit = QTextEdit()                # QTextEdit控件用来输入信息</span><br><span class="line">        self.edit.setPlaceholderText(&#x27;请输入消息&#x27;) </span><br><span class="line">        self.splitter = QSplitter(Qt.Vertical) </span><br><span class="line">        self.splitter.addWidget(self.browser) </span><br><span class="line">        self.splitter.addWidget(self.edit)</span><br><span class="line">        self.splitter.setSizes([200, 100])</span><br><span class="line"></span><br><span class="line">        self.send_btn = QPushButton(&#x27;发送&#x27;)</span><br><span class="line">        self.send_btn.clicked.connect(self.send)</span><br><span class="line">        </span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.splitter)</span><br><span class="line">        v_layout.addWidget(self.send_btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        self.name = f&#x27;用户&#123;id(self)&#125;&#x27;   # 通过id(self)获取到当前窗口对象的内存地址后，将它作为用户名称保存到name变量中</span><br><span class="line">        print(f&#x27;我是&#123;self.name&#125;.&#x27;)      # </span><br><span class="line"></span><br><span class="line">        self.udp = QUdpSocket()        # </span><br><span class="line">        data = f&#x27;&#123;self.name&#125;\n**%%加入%%**&#x27; # </span><br><span class="line">        self.udp.writeDatagram(data.encode(), QHostAddress(&#x27;127.0.0.1&#x27;), 6666) # 将数据报发送到服务端IP地址（为QHostAddress类型），告诉它用户已加入聊天</span><br><span class="line">        self.udp.readyRead.connect(self.receive)</span><br><span class="line">        self.browser.append(&#x27;您已加入聊天。\n&#x27;)  #注释2结束</span><br><span class="line">        # PyQt提供了几种常用的IP地址</span><br><span class="line">        # QHostAddress.Null           空地址，等同于QHostAddress()</span><br><span class="line">        # QHostAddress.LocalHost      IPv4本地主机地址，等同于QHostAddress(127.0.0.1)</span><br><span class="line">        # QHostAddress.LocalHostlPv6  IPv6本地主机地址，等同于QHostAddress(.:1</span><br><span class="line">        # QHostAddress.Broadcast      IPv4广播地址，等同于QHostAddress(255.255.255.255 </span><br><span class="line">        # QHostAddress.AnyIPv4        任何IPv4地址，等同于QHostAdress(0.0.0.0，与该常量绑定的套接字只监听IPV4接</span><br><span class="line">        # QHostAddress.AnylPv6        任何IPv6地址，等同于QHostAdress(::)，与该常量绑定的套接字只监听IPV6接口</span><br><span class="line">        # QHostAddress.Any            任何双协议栈地址，与该常量绑定的套接字可以监听IPV4接口和IPV6接口</span><br><span class="line"></span><br><span class="line">    def send(self):</span><br><span class="line">        if not self.edit.toPlainText():</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        message = self.edit.toPlainText()</span><br><span class="line">        data = f&#x27;&#123;self.name&#125;\n&#123;message&#125;\n&#x27;</span><br><span class="line"></span><br><span class="line">        self.edit.clear()</span><br><span class="line">        self.browser.append(data)</span><br><span class="line">        self.udp.writeDatagram(data.encode(), QHostAddress(&#x27;127.0.0.1&#x27;), 6666)</span><br><span class="line"></span><br><span class="line">    def receive(self):                         </span><br><span class="line">        while self.udp.hasPendingDatagrams():                    # 判断是否存在任何待读取的数据报</span><br><span class="line">            data_size = self.udp.pendingDatagramSize()           # 获取到数据报的大小</span><br><span class="line">            data, host, port = self.udp.readDatagram(data_size)  # 读取数据，数据报内容、发送者IP地址和发送者端口</span><br><span class="line">            if data:</span><br><span class="line">                data = data.decode()</span><br><span class="line">                self.browser.append(data)</span><br><span class="line"></span><br><span class="line">    def closeEvent(self, event):               # 发送一条信息到服务端，告诉它当前用户已下线。</span><br><span class="line">        data = f&#x27;&#123;self.name&#125;\n**%%离开%%**&#x27;</span><br><span class="line">        self.udp.writeDatagram(data.encode(), QHostAddress(&#x27;127.0.0.1&#x27;), 6666)</span><br><span class="line">        event.accept()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Client()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-7-2-QTcpSocket和QTcpServer-使用QTcpServer编写服务端"><a href="#6-7-2-QTcpSocket和QTcpServer-使用QTcpServer编写服务端" class="headerlink" title="6.7.2 QTcpSocket和QTcpServer-使用QTcpServer编写服务端"></a>6.7.2 QTcpSocket和QTcpServer-使用QTcpServer编写服务端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Server(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Server, self).__init__()</span><br><span class="line">        self.resize(400, 200)</span><br><span class="line">        self.browser = QTextBrowser()</span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.browser)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        self.tcp = QTcpServer()                                #  实例化一个QTcpServer对象</span><br><span class="line">        if self.tcp.listen(QHostAddress.LocalHost, 6666):      # 调用listen()方法对指定IP地址和端口进行监听</span><br><span class="line">        # 如果监听正常，则返回True，否则返回False。</span><br><span class="line">            self.browser.append(&#x27;已准备好与客户端进行连接。\n&#x27;)  # </span><br><span class="line">            self.tcp.newConnection.connect(self.handle_connection) </span><br><span class="line">            # 每当有来自客户端的新的连接请求时，QTcpServer就会发射newConnection信号。</span><br><span class="line">        else:</span><br><span class="line">            error = self.tcp.errorString()     # 可以调用errorString()方法来获取监听失败的原因。</span><br><span class="line">            self.browser.append(error)      </span><br><span class="line"></span><br><span class="line">        self.client_set = set()</span><br><span class="line"></span><br><span class="line">    def handle_connection(self):               </span><br><span class="line">        sock = self.tcp.nextPendingConnection() </span><br><span class="line">        # 调用nextPendingConnection()方法来获取一个连接到客户端的QTcpSocket对象，通过它我们就可以和客户端通信了</span><br><span class="line">        self.client_set.add(sock)</span><br><span class="line">        sock.readyRead.connect(lambda: self.receive(sock))</span><br><span class="line">        sock.disconnected.connect(lambda: self.handle_disconnection(sock))# 如果客户端与服务端断开连接，disconnected信号就会发射。</span><br><span class="line">        address, port = self.get_address_and_port(sock)</span><br><span class="line">        data = f&#x27;&#123;address&#125;:&#123;port&#125;已加入聊天。\n&#x27;</span><br><span class="line">        self.browser.append(data)</span><br><span class="line">        self.send_to_other_clients(sock, data.encode())</span><br><span class="line"></span><br><span class="line">    def receive(self, sock):</span><br><span class="line">        while sock.bytesAvailable():</span><br><span class="line">            data_size = sock.bytesAvailable()</span><br><span class="line">            data = sock.read(data_size)</span><br><span class="line">            self.send_to_other_clients(sock, data)</span><br><span class="line"></span><br><span class="line">    def handle_disconnection(self, sock):</span><br><span class="line">        self.client_set.remove(sock)</span><br><span class="line"></span><br><span class="line">        address, port = self.get_address_and_port(sock)</span><br><span class="line">        data = f&#x27;&#123;address&#125;:&#123;port&#125;离开。\n&#x27;</span><br><span class="line">        self.browser.append(data)</span><br><span class="line">        self.send_to_other_clients(sock, data.encode())</span><br><span class="line"></span><br><span class="line">    def send_to_other_clients(self, current_client, data):</span><br><span class="line">        for target in self.client_set:</span><br><span class="line">            if target != current_client:</span><br><span class="line">                target.write(data)</span><br><span class="line">                address, port = self.get_address_and_port(target)</span><br><span class="line">                self.browser.append(f&#x27;已将消息发送给&#123;address&#125;:&#123;port&#125;。\n&#x27;)</span><br><span class="line"></span><br><span class="line">    def get_address_and_port(self, sock):# 过peerAddress()和peerPort()方法分别获取到客户端使用的IP地址和端口。</span><br><span class="line">        address = sock.peerAddress().toString() # 获取客户端ip地址</span><br><span class="line">        port = sock.peerPort()                  # 获取客服端端口</span><br><span class="line">        return address, port</span><br><span class="line">    # 这个修改后的多人聊天室应用的使用方法和6.7.1小节中的一样，也是先运行服务端代码，再运行客户端代码</span><br><span class="line"></span><br><span class="line">    def closeEvent(self,event):</span><br><span class="line">        self.tcp.close()</span><br><span class="line">        event.accept()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Server()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-7-2-QTcpSocket和QTcpServer-使用QTcpSocket编写客户端"><a href="#6-7-2-QTcpSocket和QTcpServer-使用QTcpSocket编写客户端" class="headerlink" title="6.7.2 QTcpSocket和QTcpServer-使用QTcpSocket编写客户端"></a>6.7.2 QTcpSocket和QTcpServer-使用QTcpSocket编写客户端</h3><p>QTcpSocket和QTcpServer这两个类可以用来开发基于TCP的应用，前者用来开发客户端，后者用来开发服务端。<br>我们将使用这两个类来开发6.7.1小节中的多人聊天室应用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Client(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Client, self).__init__()</span><br><span class="line">        self.resize(600, 500)</span><br><span class="line"></span><br><span class="line">        self.browser = QTextBrowser()</span><br><span class="line">        self.edit = QTextEdit()</span><br><span class="line">        self.edit.setPlaceholderText(&#x27;请输入消息&#x27;)</span><br><span class="line">        self.splitter = QSplitter(Qt.Vertical)</span><br><span class="line">        self.splitter.addWidget(self.browser)</span><br><span class="line">        self.splitter.addWidget(self.edit)</span><br><span class="line">        self.splitter.setSizes([200, 100])</span><br><span class="line"></span><br><span class="line">        self.send_btn = QPushButton(&#x27;发送&#x27;)</span><br><span class="line">        self.send_btn.clicked.connect(self.send)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.splitter)</span><br><span class="line">        v_layout.addWidget(self.send_btn)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        self.name = f&#x27;用户&#123;id(self)&#125;&#x27;</span><br><span class="line">        print(f&#x27;我是&#123;self.name&#125;.&#x27;)</span><br><span class="line"></span><br><span class="line">        self.tcp = QTcpSocket()                              # 实例化一个QTcpSockset对象</span><br><span class="line">        self.tcp.connectToHost(QHostAddress.LocalHost, 6666) # 连接服务端（三次握手）。</span><br><span class="line">        self.tcp.connected.connect(self.handle_connection)   # 如果客户端和服务端连接成功，connected信号就会发射出来。</span><br><span class="line">        self.tcp.readyRead.connect(self.receive)             # 当有新数据等待读取时，readyRead信号就会发射。</span><br><span class="line"></span><br><span class="line">    def handle_connection(self):</span><br><span class="line">        self.browser.append(&#x27;已连接到服务器！\n&#x27;)</span><br><span class="line">        self.browser.append(&#x27;您已加入聊天。\n&#x27;)</span><br><span class="line"></span><br><span class="line">    def send(self):</span><br><span class="line">        if not self.edit.toPlainText():</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        message = self.edit.toPlainText()</span><br><span class="line">        data = f&#x27;&#123;self.name&#125;\n&#123;message&#125;\n&#x27;</span><br><span class="line"></span><br><span class="line">        self.edit.clear()</span><br><span class="line">        self.browser.append(data)</span><br><span class="line">        self.tcp.write(data.encode())</span><br><span class="line"></span><br><span class="line">    def receive(self):             </span><br><span class="line">        while self.tcp.bytesAvailable(): # 判断是否还有数据等待接收，如果有的话则调用read()方法将其读取出来。</span><br><span class="line">            data_size = self.tcp.bytesAvailable()</span><br><span class="line">            data = self.tcp.read(data_size)</span><br><span class="line">            if data:</span><br><span class="line">                self.browser.append(data.decode())</span><br><span class="line"></span><br><span class="line">    def closeEvent(self, event):   # 如果用户关闭了聊天窗口，则调用close()方法关闭连接，释放系统资源。</span><br><span class="line">        self.tcp.close()</span><br><span class="line">        event.accept()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Client()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="6-8-QSS-QSS样读取式"><a href="#6-8-QSS-QSS样读取式" class="headerlink" title="6.8 QSS-QSS样读取式"></a>6.8 QSS-QSS样读取式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line"></span><br><span class="line">        with open(&#x27;./style.qss&#x27;, &#x27;r&#x27;) as f: # 文件中的样式不能有其他注释</span><br><span class="line">            qss = f.read()</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;button&#x27;, self)</span><br><span class="line">        self.btn.setStyleSheet(qss)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-8-QSS-调用QApplication对象的setStyleSheet-方法将样式作用于整个应用程序"><a href="#6-8-QSS-调用QApplication对象的setStyleSheet-方法将样式作用于整个应用程序" class="headerlink" title="6.8 QSS-调用QApplication对象的setStyleSheet()方法将样式作用于整个应用程序"></a>6.8 QSS-调用QApplication对象的setStyleSheet()方法将样式作用于整个应用程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.btn = QPushButton(&#x27;button&#x27;, self)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with open(&#x27;style.qss&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">        qss = f.read()</span><br><span class="line"></span><br><span class="line">    app = QApplication([])</span><br><span class="line">    app.setStyleSheet(qss)</span><br><span class="line"></span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="6-8-QSS-改变按钮控件上文本字体的大小"><a href="#6-8-QSS-改变按钮控件上文本字体的大小" class="headerlink" title="6.8 QSS-改变按钮控件上文本字体的大小"></a>6.8 QSS-改变按钮控件上文本字体的大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        qss = &quot;QPushButton &#123;font-size: 50px;&#125;&quot;   # 文本字体大小变为50像素</span><br><span class="line">        self.btn = QPushButton(&#x27;button&#x27;, self)   # </span><br><span class="line">        self.btn.setStyleSheet(qss)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-8-2-QSS基本规则"><a href="#6-8-2-QSS基本规则" class="headerlink" title="6.8.2 QSS基本规则"></a>6.8.2 QSS基本规则</h3><p>每个QSS样式都由选择器和声明这两部分组成，前者用来指定样式所作用的控件对象，后者用来指定样式使用的属性和值。<br>比方说“QPushButton {font-size:50px;}”这个样式，选择器“QPushButton”指定将样式作用于所有QPushButton按钮控件以及继承这个类的控件。<br>声明部分则指定“font-size”文本字体大小属性，并将值设置成了50像素。<br>我们可以声明多个属性和值，每对属性和值之间需要用英文分号间隔开来。</p><h1 id="QPushButton-font-size-50px-color-red"><a href="#QPushButton-font-size-50px-color-red" class="headerlink" title="QPushButton {    font-size: 50px;    color: red;}"></a>QPushButton {<br>    font-size: 50px;<br>    color: red;<br>}</h1><h1 id="当然也可以同时指定多个选择器。QPushButton-QLabel-QLineEdit-font-size-50px-color-red"><a href="#当然也可以同时指定多个选择器。QPushButton-QLabel-QLineEdit-font-size-50px-color-red" class="headerlink" title="当然也可以同时指定多个选择器。QPushButton, QLabel, QLineEdit {    font-size: 50px;    color: red;}"></a>当然也可以同时指定多个选择器。<br>QPushButton, QLabel, QLineEdit {<br>    font-size: 50px;<br>    color: red;<br>}</h1><p>把选择器部分拆开<br>QPushButton {<br>    font-size: 50px;<br>    color: red;<br>}<br>QLabel {<br>    font-size: 50px;<br>    color: red;<br>}<br>QLineEdit {<br>    font-size: 50px;<br>    color: red;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(&#x27;QPushButton&#x27;)</span><br><span class="line">        self.label = QLabel(&#x27;QLabel&#x27;)</span><br><span class="line">        self.line_edit = QLineEdit()</span><br><span class="line">        self.text_edit = QTextEdit()</span><br><span class="line">        self.line_edit.setText(&#x27;QLineEdit&#x27;)</span><br><span class="line">        self.text_edit.setText(&#x27;QTextEdit&#x27;) # 1 由于QTextEdit没有在QSS样式的选择器中出现，所以它的文本字体大小和颜色是不会改变的</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.btn)</span><br><span class="line">        v_layout.addWidget(self.label)</span><br><span class="line">        v_layout.addWidget(self.line_edit)</span><br><span class="line">        v_layout.addWidget(self.text_edit)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with open(&#x27;style.qss&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">        qss = f.read()</span><br><span class="line"></span><br><span class="line">    app = QApplication([])</span><br><span class="line">    app.setStyleSheet(qss)</span><br><span class="line"></span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="6-8-3-选择器的类型"><a href="#6-8-3-选择器的类型" class="headerlink" title="6.8.3 选择器的类型"></a>6.8.3 选择器的类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">选择器的类型有很多种，下面总结了几种常用的选择器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类型                示例                         描述</span><br><span class="line"></span><br><span class="line">通用选择器             *                     匹配所有控件</span><br><span class="line">类型选择器        QPushButton               匹配所有QPushButton控件及其子类(即上文中演示的那种)</span><br><span class="line">属性选择器       QPushButton[name=&quot;btn&quot;]    匹配所有name属性的值为“bn的QPushButlon控件~=代表匹所有name性的值中包含“bn的QPushButon控件。</span><br><span class="line">                QPushButton[name~=&quot;btn&quot;]   可以通过etPropert/0方法设属性以及对应的值，而如果要获取某属性值，使用property0方法，传入属性名就可以了</span><br><span class="line">类名选择器       .QPushButton               匹配所有QPushButton控件，但不匹配其子类。也可以这样写:*[class~=&quot;QPushButton&quot;]</span><br><span class="line">ID选择器        QPushButton#btn            匹配所有对象名称(ObjectName)为&quot;btn&quot;的QPushButon控件，可以调用setobjectName()方法设置对象名称。虽然不同的控件可以设置相同的对象名称，但是不建议这样做</span><br><span class="line">后代选择器      QWidget.QPushButton        匹配所有QWidget控件中包含(无论是直接包合还是间接包合)的QPushButton控件</span><br><span class="line">子选择器        QWidget&gt;QPushButton        匹配所有QWidget控件中直接包合的QPushButton控件</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.btn1 = QPushButton(&#x27;button1&#x27;, self)</span><br><span class="line">        self.btn2 = QPushButton(&#x27;button2&#x27;, self)</span><br><span class="line">        self.btn2.setProperty(&#x27;name&#x27;, &#x27;btn&#x27;) #设置了一个自定义属性name，并将该属性的值设为“btn”，所以property(&#x27;name&#x27;)输出的值就是“btn”，“button2”按钮的背景颜色就为绿色。</span><br><span class="line">        print(self.btn2.property(&#x27;name&#x27;))          #注释1结束</span><br><span class="line"></span><br><span class="line">        self.line_edit1 = QLineEdit(self)</span><br><span class="line">        self.line_edit1.setPlaceholderText(&#x27;line edit&#x27;)</span><br><span class="line">        self.line_edit2 = SubLineEdit()</span><br><span class="line"></span><br><span class="line">        self.combo_box = QComboBox(self)           # 下拉框</span><br><span class="line">        self.combo_box.addItems([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;]) # 下拉列表</span><br><span class="line">        self.combo_box.setObjectName(&#x27;cb&#x27;)         #下拉列表框调用了setObjectName()方法将对象名称设置为“cb”</span><br><span class="line">        # 这样就匹配到了QComboBox#cb &#123;color: blue;&#125;</span><br><span class="line"></span><br><span class="line">        self.group_box = QGroupBox()               # label1是直接被添加到QGroupBox中</span><br><span class="line">        self.label1 = QLabel(&#x27;label1&#x27;)             # 匹配的是“QGroupBox QLabel &#123;color:blue;&#125;”和“QGroupBox &gt; QLabel &#123;font: 30px;&#125;”这两个样式</span><br><span class="line">        self.label2 = QLabel(&#x27;label2&#x27;)             # 通过一个QStackWidget被添加到QGroupBox中的，所以算是间接包含，只匹配前者。</span><br><span class="line">        self.stack = QStackedWidget()</span><br><span class="line">        self.stack.addWidget(self.label2)          #而label2则是通过一个QStackWidget被添加到QGroupBox中的</span><br><span class="line"></span><br><span class="line">        gb_layout = QVBoxLayout()</span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        gb_layout.addWidget(self.label1)</span><br><span class="line">        gb_layout.addWidget(self.stack)</span><br><span class="line">        self.group_box.setLayout(gb_layout)</span><br><span class="line">        v_layout.addWidget(self.btn1)</span><br><span class="line">        v_layout.addWidget(self.btn2)</span><br><span class="line">        v_layout.addWidget(self.line_edit1)</span><br><span class="line">        v_layout.addWidget(self.line_edit2)</span><br><span class="line">        v_layout.addWidget(self.combo_box)</span><br><span class="line">        v_layout.addWidget(self.group_box)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">class SubLineEdit(QLineEdit):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SubLineEdit, self).__init__()</span><br><span class="line">        self.setPlaceholderText(&#x27;sub line edit&#x27;)</span><br><span class="line">        </span><br><span class="line">    # 明明“* &#123;color: red&#125;”这个样式是把所有的文本颜色设为红色，但是有些控件的文本颜色并没有改变，</span><br><span class="line">    # 比如QComboBox上的文本颜色就是蓝色。这里就涉及“具体与笼统”的概念，当选择器写得越具体时，</span><br><span class="line">    # 选择器的优先程度就越高。通配符*这一选择器写法非常笼统，而之后几个样式的选择器都是指定了控件名称的，</span><br><span class="line">    # 比通配符更加具体，所以优先程度更高。再比如这两个样式：</span><br><span class="line">    </span><br><span class="line">    # QPushButton &#123;background-color: blue;&#125;</span><br><span class="line">    # QPushButton[name=&#x27;btn&#x27;] &#123;background-color: green;&#125;</span><br><span class="line">    </span><br><span class="line">    # 第一个样式规定所有QPushButton控件及其子类的背景颜色变为蓝色，</span><br><span class="line">    # 但第二个样式指定了name属性，比第一个样式更加具体，所以匹配到该选择器的按钮控件背景颜色为绿色，不会遵循第一个样式。</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with open(&#x27;style1.qss&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">        qss = f.read()</span><br><span class="line"></span><br><span class="line">    app = QApplication([])</span><br><span class="line">    app.setStyleSheet(qss)</span><br><span class="line"></span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="6-8-4-子控制器"><a href="#6-8-4-子控制器" class="headerlink" title="6.8.4 子控制器"></a>6.8.4 子控制器</h3><p>PyQt提供的原生控件其实可以被细分成不同的子控件，比如QSpinBox数字调节框控件，<br>它就包含一个单行文本框控件、向上调节按钮控件和向下调节按钮控件。<br>QSS中有丰富的属性用来修改输入框样式或其中的文本样式，但是这两个调节按钮控件似乎不那么容易被获取到。<br>此时就应该使用子控制器，它是QSS中独有的（CSS中没有子控制器这一概念），用来设置窗口或控件的子控件样式。<br>子控制器的出现能够让QSS更深入地改变界面样式。<br>QSpinBox的向上调节按钮控件和向下调节按钮控件可以分别通过::up-button和::down-button获取到（子控制器用两个冒号::获取）。<br>示例代码通过子控制器改变了这两个按钮控件的样式，首先我们在style.qss中输入以下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.spin_box = QSpinBox(self)</span><br><span class="line">        self.spin_box.resize(100, 30)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with open(&#x27;style2.qss&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">        qss = f.read()</span><br><span class="line"></span><br><span class="line">    app = QApplication([])</span><br><span class="line">    app.setStyleSheet(qss)</span><br><span class="line"></span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="6-8-5-伪状态"><a href="#6-8-5-伪状态" class="headerlink" title="6.8.5 伪状态"></a>6.8.5 伪状态</h3><p>控件会根据用户的不同操作呈现出不同的状态，这些状态也被称为“伪状态”。<br>比方说QPushButton按钮控件，当我们单击按钮时，它处于被按下的状态(pressed)。<br>如果调用setEnabled(False)禁用按钮，那它就处于禁用状态(disabled)。<br>PyQt提供了很多伪状态选择器以方便我们对不同状态下的控件样式进行修改，<br>比如要修改按钮被禁用时的样式，就可以先用:disabled获取到禁用状态（伪状态用一个冒号:获取）。<br>示例代码通过伪状态选择器改变了按钮在不同状态下的样式，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">from PyQt5.QtNetwork import *</span><br><span class="line">        </span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.btn = QPushButton(&#x27;button&#x27;, self)</span><br><span class="line">        self.btn.clicked.connect(lambda: self.btn.setEnabled(False))</span><br><span class="line"></span><br><span class="line"># 我们可以在伪状态前加一个英文格式的感叹号“!”来表示相反的状态，比方说在悬停状态前加一个“!”，像下面这样。</span><br><span class="line">#QPushButton:!hover &#123;</span><br><span class="line">#     background-color: red;</span><br><span class="line"># &#125;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with open(&#x27;style3.qss&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">        qss = f.read()</span><br><span class="line"></span><br><span class="line">    app = QApplication([])</span><br><span class="line">    app.setStyleSheet(qss)</span><br><span class="line"></span><br><span class="line">    window = Window()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="6-8-6-QSS第三方库"><a href="#6-8-6-QSS第三方库" class="headerlink" title="6.8.6 QSS第三方库"></a>6.8.6 QSS第三方库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 1.Qt-Material  提供了许多仿Material的界面样式          pip install qt-material</span><br><span class="line"># 导入   from qt_material import apply_stylesheet </span><br><span class="line"># =============================================================================</span><br><span class="line"># class Window(QWidget):</span><br><span class="line">#     def __init__(self):</span><br><span class="line">#         super(Window, self).__init__()</span><br><span class="line">#         self.btn = QPushButton(&#x27;BUTTON&#x27;, self)</span><br><span class="line"># 　</span><br><span class="line"># if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">#     app = QApplication([])</span><br><span class="line">#     apply_stylesheet(app, theme=&#x27;dark_teal.xml&#x27;)# 1</span><br><span class="line"># 　</span><br><span class="line">#     window = Window()</span><br><span class="line">#     window.show()</span><br><span class="line">#     sys.exit(app.exec())</span><br><span class="line"># =============================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2.QDarkStyleSheet 它提供了完整的明暗系列主题          pip install qdarkstyle</span><br><span class="line"># 导入    import qdarkstyle</span><br><span class="line"># =============================================================================</span><br><span class="line"># class Window(QWidget):</span><br><span class="line">#     def __init__(self):</span><br><span class="line">#         super(Window, self).__init__()</span><br><span class="line">#         self.btn = QPushButton(&#x27;button&#x27;, self)</span><br><span class="line"># 　</span><br><span class="line"># if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">#     app = QApplication([])</span><br><span class="line">#     qss = qdarkstyle.load_stylesheet() #注释1开始</span><br><span class="line">#     app.setStyleSheet(qss)             #注释1结束</span><br><span class="line"># 　</span><br><span class="line">#     window = Window()</span><br><span class="line">#     window.show()</span><br><span class="line">#     sys.exit(app.exec())</span><br><span class="line"># =============================================================================</span><br><span class="line"></span><br><span class="line"># #1 程序首先调用load_stylesheet()方法获取QSS样式，然后将它传入QApplication对象的setStyleSheet()方法中。</span><br><span class="line"># 如果要切换为明亮主题，只需要往load_stylesheet()方法中传入qdarkstyle.LightPalette，</span><br><span class="line"># 该方法默认使用的是黑暗主题qdarkstyle.DarkPalette。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-9-1-国际化-使用translate-方法"><a href="#6-9-1-国际化-使用translate-方法" class="headerlink" title="6.9.1 国际化-使用translate()方法"></a>6.9.1 国际化-使用translate()方法</h2><p>当我们给控件设置文本时，会调用setText()方法并传入相应的文本。<br>为了能让PyQt提取出要翻译的文本，我们要先对各个文本字符串使用QCoreApplication.translate()方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.combo_box = QComboBox()</span><br><span class="line">        self.combo_box.addItems([&#x27;English&#x27;, &#x27;中文&#x27;])</span><br><span class="line">        self.button = QPushButton()</span><br><span class="line">        self.label = QLabel()</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        v_layout.addWidget(self.combo_box)</span><br><span class="line">        v_layout.addWidget(self.button)</span><br><span class="line">        v_layout.addWidget(self.label)</span><br><span class="line">        self.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi() </span><br><span class="line"></span><br><span class="line">    def retranslateUi(self):             # 专门定义了一个retranslateUi()函数来更新控件的文本。</span><br><span class="line">        _translate = QCoreApplication.translate  # 将QCoreApplication.translate保存到_translate变量中，这样可以让我们更加方便使用它</span><br><span class="line">        self.setWindowTitle(_translate(&#x27;Window&#x27;, &#x27;Switch&#x27;)) # _translate()方法接收的第一个参数是待翻译文本所在的类名称，第二个参数是待翻译文本</span><br><span class="line">        self.button.setText(_translate(&#x27;Window&#x27;, &#x27;Start&#x27;))</span><br><span class="line">        self.label.setText(_translate(&#x27;Window&#x27;, &#x27;Hello World!&#x27;))</span><br><span class="line">        # 当我们将设计师生成的.ui文件转换为.py文件后，其实也可以看到这个名称为retranslateUi的函数，</span><br><span class="line">        # 它是专门用来更新界面上的文本的。</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="6-9-2-制作-ts文件"><a href="#6-9-2-制作-ts文件" class="headerlink" title="6.9.2 制作.ts文件"></a>6.9.2 制作.ts文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"> #跳过</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="7-1-图形图元类QGraphicsItem-标准图元"><a href="#7-1-图形图元类QGraphicsItem-标准图元" class="headerlink" title="7.1 图形图元类QGraphicsItem-标准图元"></a>7.1 图形图元类QGraphicsItem-标准图元</h2><p>第7章　<br>图形视图框架PyQt提供的图形视图框架可以让我们方便地管理大量的自定义2D图元并与之进行交互。<br>该框架使用BSP（Binary Space Partitioning，二叉空间剖分）树，能够快速查找图形元素。<br>因此，就算视图中包含大量的内容，我们也可以在界面上快速地操作它们。除此之外，<br>该框架还提供了图元放大、缩小、旋转和碰撞检测的相关方法，非常适合用来开发游戏。</p><p>图形视图框架主要包含3个类：<br>图形图元类QGraphicsItem、图形场景类QGraphicsScene和图形视图类QGraphicsView。</p><p>用简单的一句话来概括一下三者的关系：<br>图元是放在场景上的，而场景内容则是通过视图显示出来的。</p><p>PyQt标准图元：<br>● 椭圆图元QGraphicsEllipseItem。<br>● 直线图元QGraphicsLineItem。<br>● 路径图元QGraphicsPathItem。<br>● 图片图元QGraphicsPixmapItem。<br>● 多边形图元QGraphicsPolygonItem。<br>● 矩形图元QGraphicsRectItem。<br>● 纯文本图元QGraphicsSimpleTextItem。<br>● 富文本图元QGraphicsTextItem。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView): # 场景内容通过视图显示出来，所以我们直接继承QGraphicsView来开发这个窗口</span><br><span class="line">    def __init__(self): </span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.ellipse = QGraphicsEllipseItem() # 矩形图元</span><br><span class="line">        self.ellipse.setRect(0, 100, 50, 100)</span><br><span class="line"></span><br><span class="line">        self.line = QGraphicsLineItem()  # 直线图元</span><br><span class="line">        self.line.setLine(100, 100, 100, 200)</span><br><span class="line"></span><br><span class="line">        self.path = QGraphicsPathItem()  # 路径图元</span><br><span class="line">        tri_path = QPainterPath()</span><br><span class="line">        tri_path.moveTo(150, 100)</span><br><span class="line">        tri_path.lineTo(200, 100)</span><br><span class="line">        tri_path.lineTo(200, 200)</span><br><span class="line">        tri_path.lineTo(150, 100)</span><br><span class="line">        tri_path.closeSubpath()</span><br><span class="line">        self.path.setPath(tri_path)</span><br><span class="line"></span><br><span class="line">        self.pixmap = QGraphicsPixmapItem()   # 图片图元</span><br><span class="line">        self.pixmap.setPixmap(QPixmap(&#x27;11.png&#x27;).scaled(100, 100))  # 设置图片图元</span><br><span class="line">        self.pixmap.setPos(250, 100)                        # # 设置图元位置</span><br><span class="line">        self.pixmap.setFlags(QGraphicsItem.ItemIsMovable)   # 设置图元特征，传入参数QGraphicsItem.ItemIsMovable表示图元能够用鼠标来移动</span><br><span class="line">        # 所有图元都可以使用setFlags()来设置特征</span><br><span class="line">        # QGraphicsitem.ltemlsMovable        可以移动图元</span><br><span class="line">        # QGraphicsltem.ltemlsSelectable     可以选择图元，选择时图元周围会有一圈虚线</span><br><span class="line">        # QGraphicsltem.ltemlsFocusable      图元可以接收焦点</span><br><span class="line">        # QGraphicsltem.ltemClipsToShape     根据图元形状进行裁剪形状区域之外的区域无法被绘制，也不会触发鼠标事件、拖放事件</span><br><span class="line">        # QGraphicsltem.ltemClipsChildrenToShape    根据当前图元的形状进裁剪，该图元的直接或间接子图元都将限制在该形状区域内，无法在形状区域之外的区域进行绘制</span><br><span class="line">        # QGraphicsltem.ltemlgnoresParentOpacity    忽略父图元的透明度</span><br><span class="line">        # QGraphicsltem.ltemStacksBehindParent      当一个父图元添加子图时，子图元会被放置在父图元下面(默认是置于父图元上面的)。该特征很适合用来制作阴影效果</span><br><span class="line"></span><br><span class="line">        self.polygon = QGraphicsPolygonItem()  # 图片旁边的线图</span><br><span class="line">        point1 = QPointF(400.0, 100.0)</span><br><span class="line">        point2 = QPointF(420.0, 150.0)</span><br><span class="line">        point3 = QPointF(430.0, 200.0)</span><br><span class="line">        point4 = QPointF(380.0, 110.0)</span><br><span class="line">        point5 = QPointF(350.0, 110.0)</span><br><span class="line">        point6 = QPointF(400.0, 100.0)</span><br><span class="line">        self.polygon.setPolygon(QPolygonF([point1, point2, point3,point4, point5, point6]))</span><br><span class="line"></span><br><span class="line">        self.rect = QGraphicsRectItem() # 矩形图元</span><br><span class="line">        self.rect.setRect(450, 100, 50, 100)</span><br><span class="line"></span><br><span class="line">        self.simple_text = QGraphicsSimpleTextItem() # 纯文本图元</span><br><span class="line">        self.simple_text.setText(&#x27;Hello PyQt!&#x27;)</span><br><span class="line">        self.simple_text.setPos(550, 100)</span><br><span class="line"></span><br><span class="line">        self.rich_text = QGraphicsTextItem()  # 富文本图元</span><br><span class="line">        self.rich_text.setHtml(&#x27;&lt;p style=&quot;font-size:10px&quot;&gt;Hello PyQt!&lt;/p&gt;&#x27;)</span><br><span class="line">        self.rich_text.setPos(650, 100)</span><br><span class="line">        self.rich_text.setTextInteractionFlags(Qt.TextEditorInteraction) </span><br><span class="line">        # 文本图元有一个独有的setTextInteractionFlags()方法，它用来设置文本的交互特征，传入Qt.TextEditorInteraction表示用户能够直接通过双击来编辑文本</span><br><span class="line">        # Qt.NoTextlnteraction            无任何交互</span><br><span class="line">        # Qt.TextSelectableByMouse        文本可以通过鼠标或键盘选择和复制</span><br><span class="line">        # Qt.TextSelectableByKeyboard     文本可以通过键盘上的方向键选择</span><br><span class="line">        # Qt.LinksAccessibleByMouse        可以通过单击访问超链接</span><br><span class="line">        # Qt.LinksAccessibleByKeyboard    可以通过“Tab”键获取焦点并用“Enter键访问超链接</span><br><span class="line">        # Qt.TextEditable                 文本能够被完全编辑</span><br><span class="line">        # Qt.TextEditorlnteraction        行为与QTextEdit控件相同</span><br><span class="line">        # Qt.TextBrowserlnteraction       行为与QTextBrowser控件相同</span><br><span class="line">        self.rich_text.setDefaultTextColor(QColor(100, 100, 100)) # 设置文本颜色,只有富文本图元才拥有，纯文本图元无法设置文本颜色</span><br><span class="line"></span><br><span class="line">        self.graphics_scene = QGraphicsScene()             # 图元是要放到场景中的，所以需要实例化一个QGraphicsScene对象</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 750, 300)   # 设置场景大小</span><br><span class="line">        self.graphics_scene.addItem(self.ellipse)          # addItem()方法用来添加图元</span><br><span class="line">        self.graphics_scene.addItem(self.line)</span><br><span class="line">        self.graphics_scene.addItem(self.path)</span><br><span class="line">        self.graphics_scene.addItem(self.pixmap)</span><br><span class="line">        self.graphics_scene.addItem(self.polygon)</span><br><span class="line">        self.graphics_scene.addItem(self.rect)</span><br><span class="line">        self.graphics_scene.addItem(self.simple_text)</span><br><span class="line">        self.graphics_scene.addItem(self.rich_text)   </span><br><span class="line"></span><br><span class="line">        self.resize(750, 300)                          # 场景内容通过视图显示出来，所以我们直接继承QGraphicsView来开发这个窗口，resize()方法用来设置视图大小</span><br><span class="line">        self.setScene(self.graphics_scene)             # setScene()用来确定要显示的场景</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-1-2-图元层级"><a href="#7-1-2-图元层级" class="headerlink" title="7.1.2 图元层级"></a>7.1.2 图元层级</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.rect1 = QGraphicsRectItem()        # 程序实例化了3个矩形图元</span><br><span class="line">        self.rect1.setRect(0, 0, 200, 200)</span><br><span class="line">        self.rect1.setBrush(QBrush(QColor(255, 0, 0)))</span><br><span class="line">        self.rect1.setFlags(QGraphicsItem.ItemIsMovable)</span><br><span class="line">        self.rect1.setZValue(1.0)     # rect1矩形图元对象调用了setZValue()方法改变了自身的层级大小</span><br><span class="line"></span><br><span class="line">        self.rect2 = QGraphicsRectItem()</span><br><span class="line">        self.rect2.setRect(0, 0, 100, 100)</span><br><span class="line">        self.rect2.setBrush(QBrush(QColor(0, 255, 0)))</span><br><span class="line">        self.rect2.setFlags(QGraphicsItem.ItemIsMovable)</span><br><span class="line"></span><br><span class="line">        self.rect3 = QGraphicsRectItem()</span><br><span class="line">        self.rect3.setRect(0, 0, 50, 50)</span><br><span class="line">        self.rect3.setBrush(QBrush(QColor(0, 0, 255)))</span><br><span class="line">        self.rect3.setFlags(QGraphicsItem.ItemIsMovable)  </span><br><span class="line">        # 默认rect3会遮挡rect2，rect2会遮挡rect1。</span><br><span class="line">        # 但是rect1矩形图元对象调用了setZValue()方法改变了自身的层级大小，且层级大于rect2和rec3，</span><br><span class="line">        # 也就是rect1会遮挡住rect2和rect3。</span><br><span class="line"></span><br><span class="line">        print(self.rect1.zValue()) #  zValue()方法用来获取一个图元的层级大小</span><br><span class="line">        print(self.rect2.zValue())</span><br><span class="line">        print(self.rect3.zValue()) </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 500,500)</span><br><span class="line">        self.graphics_scene.addItem(self.rect1)</span><br><span class="line">        self.graphics_scene.addItem(self.rect2)</span><br><span class="line">        self.graphics_scene.addItem(self.rect3)</span><br><span class="line"></span><br><span class="line">        self.resize(500, 500)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line">        # 添加到场景中的顺序为rect1、rect2、rect3，所以默认rect3会遮挡rect2，rect2会遮挡rect1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-1-2-图元层级—父图元会被子图元遮挡"><a href="#7-1-2-图元层级—父图元会被子图元遮挡" class="headerlink" title="7.1.2 图元层级—父图元会被子图元遮挡"></a>7.1.2 图元层级—父图元会被子图元遮挡</h3><p>父图元会被子图元遮挡，而且父图元无法通过setZValue()方法改变这种遮挡情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.rect1 = QGraphicsRectItem()</span><br><span class="line">        self.rect1.setRect(0, 0, 200, 200)</span><br><span class="line">        self.rect1.setBrush(QBrush(QColor(255, 0, 0)))</span><br><span class="line">        self.rect1.setFlags(QGraphicsItem.ItemIsMovable)</span><br><span class="line">        self.rect1.setZValue(2.0)</span><br><span class="line"></span><br><span class="line">        self.rect2 = QGraphicsRectItem()</span><br><span class="line">        self.rect2.setRect(0, 0, 100, 100)</span><br><span class="line">        self.rect2.setBrush(QBrush(QColor(0, 255, 0)))</span><br><span class="line">        self.rect2.setFlags(QGraphicsItem.ItemIsMovable)</span><br><span class="line">        self.rect2.setParentItem(self.rect1)   # rect2和rect3通过setParentItem()方法确定rect1为它们的父图元</span><br><span class="line">        self.rect2.setZValue(1.0)</span><br><span class="line">        # rect2比rect3先被添加到父图元上，所以目前的遮挡情况是：rect3遮挡rect2，rect2遮挡rect1</span><br><span class="line">        self.rect3 = QGraphicsRectItem()</span><br><span class="line">        self.rect3.setRect(0, 0, 50, 50)</span><br><span class="line">        self.rect3.setBrush(QBrush(QColor(0, 0, 255)))</span><br><span class="line">        self.rect3.setFlags(QGraphicsItem.ItemIsMovable)</span><br><span class="line">        self.rect3.setParentItem(self.rect1)   # rect2和rect3通过setParentItem()方法确定rect1为它们的父图元</span><br><span class="line"></span><br><span class="line">        print(self.rect1.zValue())</span><br><span class="line">        print(self.rect2.zValue())</span><br><span class="line">        print(self.rect3.zValue())</span><br><span class="line"></span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 500,500)</span><br><span class="line">        self.graphics_scene.addItem(self.rect1)# 在往场景中添加图元时，我们只需要添加rect1即可，剩下的几个矩形图元都会根据父子关系自动被添加到场景中。</span><br><span class="line"></span><br><span class="line">        self.resize(500, 500)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line">        # 可以通过QGraphicsItem.ItemStacksBehindParent来改变父子图元的遮挡情况。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-1-3-图元变换"><a href="#7-1-3-图元变换" class="headerlink" title="7.1.3 图元变换"></a>7.1.3 图元变换</h3><p>学习如何将平移、缩放和旋转这3种变换应用到图元上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        </span><br><span class="line">        self.rect1 = QGraphicsRectItem()</span><br><span class="line">        self.rect1.setRect(0, 0, 200, 200)</span><br><span class="line">        self.rect1.setBrush(QBrush(QColor(255, 0, 0)))</span><br><span class="line">        self.rect1.moveBy(100, 100)    # 平移图元（图元在场景上的x轴和y轴上的移动距离）</span><br><span class="line">        self.rect1.setScale(1.5)       # 缩放图元 传入0会将图元缩小成一个点，传入负数则会返回图元翻转和镜像化后的样子</span><br><span class="line">        self.rect1.setRotation(45)     # 旋转图元 [-360, 360]</span><br><span class="line">        self.rect1.setTransformOriginPoint(100,100)   # 改变图元的中心点 缩放和旋转的中心点默认为(0, 0)，也就是图元的左上角</span><br><span class="line"># setTransformOriginPoint()方法是根据图元的原始大小来设置中心点的，缩放操作不会对该方法产生影响。</span><br><span class="line"></span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 500, 500)</span><br><span class="line">        self.graphics_scene.addItem(self.rect1)</span><br><span class="line"></span><br><span class="line">        self.resize(500, 500)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-1-4-图元分组"><a href="#7-1-4-图元分组" class="headerlink" title="7.1.4 图元分组"></a>7.1.4 图元分组</h3><p>分组就是指对各个图元进行分类，分到一起的图元会共同行动（选中、移动或复制等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView): # rect1和ellipse1为一组，rect2和ellipse2为另一组</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.rect1 = QGraphicsRectItem() # 实例化矩形图元</span><br><span class="line">        self.rect2 = QGraphicsRectItem()</span><br><span class="line">        self.ellipse1 = QGraphicsEllipseItem() # 实例化椭圆图元</span><br><span class="line">        self.ellipse2 = QGraphicsEllipseItem()</span><br><span class="line">        self.rect1.setRect(10, 10, 100, 100)</span><br><span class="line">        self.rect1.setBrush(QBrush(QColor(255, 0, 0)))</span><br><span class="line">        self.rect2.setRect(150, 10, 100, 100)</span><br><span class="line">        self.rect2.setBrush(QBrush(QColor(0, 0, 255)))</span><br><span class="line">        self.ellipse1.setRect(10, 150, 100, 50)</span><br><span class="line">        self.ellipse1.setBrush(QBrush(QColor(255, 0, 0)))</span><br><span class="line">        self.ellipse2.setRect(150, 150, 100, 50)</span><br><span class="line">        self.ellipse2.setBrush(QBrush(QColor(0, 0, 255)))</span><br><span class="line"></span><br><span class="line">        self.group1 = QGraphicsItemGroup()                # 实例化两个QGraphicsItemGroup分组对象</span><br><span class="line">        self.group2 = QGraphicsItemGroup()</span><br><span class="line">        self.group1.addToGroup(self.rect1)</span><br><span class="line">        self.group1.addToGroup(self.ellipse1)</span><br><span class="line">        self.group1.setFlags(QGraphicsItem.ItemIsSelectable | QGraphicsItem.ItemIsMovable)</span><br><span class="line">        self.group2.addToGroup(self.rect2)</span><br><span class="line">        self.group2.addToGroup(self.ellipse2)</span><br><span class="line">        self.group2.setFlags(QGraphicsItem.ItemIsSelectable | QGraphicsItem.ItemIsMovable) #注释1结束</span><br><span class="line"></span><br><span class="line">        print(self.group1.boundingRect())                 #注释2开始</span><br><span class="line">        print(self.group2.boundingRect())                 #注释2结束</span><br><span class="line">        # 选中时，分组边界的大小是由组内的图元整体决定的，边界的位置和大小可以通过boundingRect()方法获取到。</span><br><span class="line"></span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 500, 500)</span><br><span class="line">        self.graphics_scene.addItem(self.group1)          # 调用场景对象的addItem()方法将分组添加到场景中</span><br><span class="line">        self.graphics_scene.addItem(self.group2)          </span><br><span class="line"></span><br><span class="line">        self.resize(500, 500)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-1-5-碰撞检测"><a href="#7-1-5-碰撞检测" class="headerlink" title="7.1.5 碰撞检测"></a>7.1.5 碰撞检测</h3><p>碰撞检测通常会在游戏中出现，比如在《飞机大战》游戏中，程序会对子弹和敌机进行碰撞检测。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.rect = QGraphicsRectItem()                      # 界面上有一个矩形图元和一个椭圆图元，两者都可以被移动和选中。</span><br><span class="line">        self.ellipse = QGraphicsEllipseItem()</span><br><span class="line">        self.rect.setRect(100, 100, 150, 130)</span><br><span class="line">        self.rect.setFlags(QGraphicsItem.ItemIsMovable | QGraphicsItem.ItemIsSelectable)</span><br><span class="line">        self.ellipse.setRect(100, 300, 150, 100)</span><br><span class="line">        self.ellipse.setFlags(QGraphicsItem.ItemIsMovable | QGraphicsItem.ItemIsSelectable)#注释1结束</span><br><span class="line"></span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 500, 500)</span><br><span class="line">        self.graphics_scene.addItem(self.rect)</span><br><span class="line">        self.graphics_scene.addItem(self.ellipse)</span><br><span class="line"></span><br><span class="line">        self.resize(500, 500)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line">    def mouseMoveEvent(self, event):       # 2</span><br><span class="line">        super(Window, self).mouseMoveEvent(event)</span><br><span class="line">        if self.ellipse.collidesWithItem(self.rect, Qt.IntersectsItemShape): # 当ellipse本身的轮廓与rect的轮廓相交时，collidesWithItem()方法就会返回True。</span><br><span class="line">            print(self.ellipse.collidingItems(Qt.IntersectsItemShape))  # collidingItems()方法会返回与ellipse图元发生碰撞的图元列表。</span><br><span class="line">            # 碰撞的检测方式</span><br><span class="line">            # Qt.ContainsItemShape          以形状为范围，当前图元被其他图元完全包含</span><br><span class="line">            # Qt.IntersectsItemShape        以形状为范围，当前图元被完全包含或者与其他图元有重圣</span><br><span class="line">            # Qt.ContainsItemBoundingRect   以矩形边界为范围，当前图元被其他图元完全包合</span><br><span class="line">            # Qt.IntersectsItemBoundingRect 以矩形进界为范围，当前图元被完全包含或者与其他图元有重叠</span><br><span class="line">            </span><br><span class="line">            # 矩形边界就是当我们选中某图元时周围显示的矩形虚线，可以用boundingRect()方法获取到</span><br><span class="line">            # 而形状就是图元本身的轮廓，可以用shape()方法获取到</span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-1-6-给图元添加信号和动画"><a href="#7-1-6-给图元添加信号和动画" class="headerlink" title="7.1.6 给图元添加信号和动画"></a>7.1.6 给图元添加信号和动画</h3><p>QGraphicsItem不继承QObject，所以本身并不能使用信号和槽机制，我们也无法给它添加动画，<br>不过PyQt提供了QGraphicsObject类好让我们解决这一问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">            </span><br><span class="line">class MyRectItem(QGraphicsObject):                     # 继承QGraphicsObject</span><br><span class="line">    my_signal = pyqtSignal()</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(MyRectItem, self).__init__()</span><br><span class="line"></span><br><span class="line">    def boundingRect(self):                            # 重写</span><br><span class="line">        return QRectF(0, 0, 100, 30)                   # 返回一个QRectF类型的值来确定矩形图元的初始位置和大小</span><br><span class="line"></span><br><span class="line">    def paint(self, painter, styles, widget=None):     # 重写</span><br><span class="line">        painter.drawRect(self.boundingRect())          # 调用drawRect()方法将矩形画到界面上。</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.rect = MyRectItem()                       # 实例化一个MyRectItem对象</span><br><span class="line">        self.rect.my_signal.connect(lambda: print(&#x27;signal and slot&#x27;)) # 应用信号</span><br><span class="line">        self.rect.my_signal.emit()</span><br><span class="line"></span><br><span class="line">        self.animation = QPropertyAnimation(self.rect, b&#x27;pos&#x27;) # 动画</span><br><span class="line">        self.animation.setDuration(3000)</span><br><span class="line">        self.animation.setStartValue(QPointF(100, 30))</span><br><span class="line">        self.animation.setEndValue(QPointF(100, 200))</span><br><span class="line">        self.animation.setLoopCount(-1)</span><br><span class="line">        self.animation.start()  #注释4结束</span><br><span class="line"></span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 500, 500)</span><br><span class="line">        self.graphics_scene.addItem(self.rect)</span><br><span class="line"></span><br><span class="line">        self.resize(500, 500)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="7-2-图形场景类QGraphicsScene"><a href="#7-2-图形场景类QGraphicsScene" class="headerlink" title="7.2 图形场景类QGraphicsScene"></a>7.2 图形场景类QGraphicsScene</h2><p>我们可以把场景看作一个大容器，它能够容纳大量的图元，并提供相应的方法来对图元进行管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-2-1-管理图元"><a href="#7-2-1-管理图元" class="headerlink" title="7.2.1 管理图元"></a>7.2.1 管理图元</h3><p>QGraphicsScene类提供了快速添加、查找和删除图元的相关方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">            </span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()     # 实例化场景</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 300, 300)</span><br><span class="line">        self.graphics_scene.focusItemChanged.connect(self.show_item)# 1</span><br><span class="line">        # 场景有一个focusItemChanged信号，当我们选中不同的图元时，该信号就会发射，并传递两个值：</span><br><span class="line">        # 第一个是新选中的图元，第二个是之前选中的图元</span><br><span class="line">        # 注意，该信号只针对设置了ItemIsFocusable特征的图元。场景也提供了focusItem()方法让我们直接获取到当前新选中的图元。</span><br><span class="line"></span><br><span class="line">        self.ellipse = self.graphics_scene.addEllipse(50, 100, 50, 100) # 直接调用场景的相应方法来添加不同类型的图元  椭圆图元</span><br><span class="line">        self.ellipse.setFlags(QGraphicsItem.ItemIsFocusable)</span><br><span class="line">        self.rect = self.graphics_scene.addRect(150, 100, 100, 100)   # 矩形图元</span><br><span class="line">        self.rect.setFlags(QGraphicsItem.ItemIsFocusable)  </span><br><span class="line"></span><br><span class="line">        print(self.graphics_scene.items())                 </span><br><span class="line">        # items()方法会以列表形式返回场景中的所有图元，且默认按照降序方式(Qt.DescendingOrder)进行排列，即最顶层的图元排在列表最前面。</span><br><span class="line">        # 如果要按照升序方式进行排列，只需要往items()方法中传入Qt.AscendingOrder这个值</span><br><span class="line">        print(self.graphics_scene.itemsBoundingRect())     #  itemsBoundingRect()方法会返回包含所有图元的最小矩形边界</span><br><span class="line"></span><br><span class="line">        self.resize(300, 300)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line">    def show_item(self, new_item, old_item):</span><br><span class="line">        print(f&#x27;new item: &#123;new_item&#125;&#x27;)</span><br><span class="line">        print(f&#x27;old item: &#123;old_item&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):                      # 鼠标按下事件函数</span><br><span class="line">        super(Window, self).mousePressEvent(event)</span><br><span class="line">        pos = event.pos()                                      # 获取单击时鼠标指针的位置</span><br><span class="line">        item = self.graphics_scene.itemAt(pos, QTransform())   # 获取到当前单击的图元</span><br><span class="line">        # 第二个参数是QTransform类型的值，表示应用到视图上的变换，目前只需要传入QTranform()（也就是不应用任何变换）。</span><br><span class="line">        print(item)</span><br><span class="line"></span><br><span class="line">    def mouseDoubleClickEvent(self, event):                # 鼠标双击事件函数</span><br><span class="line">        super(Window, self).mouseDoubleClickEvent(event)</span><br><span class="line">        pos = event.pos()</span><br><span class="line">        item = self.graphics_scene.itemAt(pos, QTransform())   # itemAt()获取到当前双击的图元</span><br><span class="line">        if item:</span><br><span class="line">            self.graphics_scene.removeItem(item)  # 用removeItem()方法将其删除</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-2-2-嵌入控件"><a href="#7-2-2-嵌入控件" class="headerlink" title="7.2.2 嵌入控件"></a>7.2.2 嵌入控件</h3><p>我们还可以向场景中添加不同类型的控件，QGraphicsScene场景类专门提供了addWidget()方法用于实现此功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 220, 100)</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(&#x27;label&#x27;)</span><br><span class="line">        self.button = QPushButton(&#x27;button&#x27;)</span><br><span class="line"></span><br><span class="line">        self.label_proxy = self.graphics_scene.addWidget(self.label) # 调用了addWidget()方法将QLabel和QPushButton控件添加到场景中</span><br><span class="line">       # 该方法返回一个QGraphicsProxyWidget控件代理对象，它可以被看作场景中的一个图元，而我们可以通过控制代理对象来操作控件。</span><br><span class="line">        self.button_proxy = self.graphics_scene.addWidget(self.button)</span><br><span class="line">        self.label_proxy.setPos(10, 20)</span><br><span class="line">        self.button_proxy.setPos(50, 20)</span><br><span class="line">        </span><br><span class="line">        # 控件的背景是灰色的，与场景的白色背景不搭。可以在程序中添加以下两行代码使控件背景透明化</span><br><span class="line">        self.label.setAttribute(Qt.WA_TranslucentBackground)</span><br><span class="line">        self.button.setAttribute(Qt.WA_TranslucentBackground)</span><br><span class="line"></span><br><span class="line">        self.resize(220, 80)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line">            </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-2-2-嵌入控件-使用布局管理器排列控件"><a href="#7-2-2-嵌入控件-使用布局管理器排列控件" class="headerlink" title="7.2.2 嵌入控件-使用布局管理器排列控件"></a>7.2.2 嵌入控件-使用布局管理器排列控件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">            </span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 260, 80)</span><br><span class="line"></span><br><span class="line">        self.user_label = QLabel(&#x27;Username:&#x27;)</span><br><span class="line">        self.pass_label = QLabel(&#x27;Password:&#x27;)</span><br><span class="line">        self.user_line = QLineEdit()</span><br><span class="line">        self.pass_line = QLineEdit()</span><br><span class="line">        self.user_label.setAttribute(Qt.WA_TranslucentBackground)</span><br><span class="line">        self.pass_label.setAttribute(Qt.WA_TranslucentBackground)</span><br><span class="line">        self.user_line.setAttribute(Qt.WA_TranslucentBackground)</span><br><span class="line">        self.pass_line.setAttribute(Qt.WA_TranslucentBackground)</span><br><span class="line">        self.user_label_proxy = self.graphics_scene.addWidget(self.user_label)</span><br><span class="line">        self.pass_label_proxy = self.graphics_scene.addWidget(self.pass_label)</span><br><span class="line">        self.user_line_proxy = self.graphics_scene.addWidget(self.user_line)</span><br><span class="line">        self.pass_line_proxy = self.graphics_scene.addWidget(self.pass_line)</span><br><span class="line"></span><br><span class="line">        linear_layout1 = QGraphicsLinearLayout()   # 使用线性布局管理器，默认水平布局方向</span><br><span class="line">        linear_layout2 = QGraphicsLinearLayout()</span><br><span class="line">        linear_layout3 = QGraphicsLinearLayout()</span><br><span class="line">        linear_layout3.setOrientation(Qt.Vertical) # 通过setOrientation()方法改变布局方向。</span><br><span class="line">        # 图形视图框架还提供了QGraphicsGridLayout网格布局管理器和QGraphicsAnchorLayout锚点布局管理器。</span><br><span class="line">        </span><br><span class="line">        linear_layout1.addItem(self.user_label_proxy)</span><br><span class="line">        linear_layout1.addItem(self.user_line_proxy)</span><br><span class="line">        linear_layout2.addItem(self.pass_label_proxy)</span><br><span class="line">        linear_layout2.addItem(self.pass_line_proxy)</span><br><span class="line">        linear_layout3.addItem(linear_layout1)</span><br><span class="line">        linear_layout3.addItem(linear_layout2)</span><br><span class="line"></span><br><span class="line">        graphics_widget = QGraphicsWidget()           # 将布局设置到QGraphicsWidget对象上</span><br><span class="line">        graphics_widget.setLayout(linear_layout3)</span><br><span class="line">        self.graphics_scene.addItem(graphics_widget)  # 将QGraphicsWidget对象添加到场景</span><br><span class="line"></span><br><span class="line">        self.resize(260, 80)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="7-3-图形视图类QGraphicsView"><a href="#7-3-图形视图类QGraphicsView" class="headerlink" title="7.3 图形视图类QGraphicsView"></a>7.3 图形视图类QGraphicsView</h2><p>QGraphicsView用来显示场景内容，它是一个提供了滚动条的视窗。<br>多个场景可以通过同一个图形视图来切换显示，而同一个场景也可以应用多个图形视图，让我们能够从不同的角度同时进行观察</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-3-1-视图和场景的大小关系"><a href="#7-3-1-视图和场景的大小关系" class="headerlink" title="7.3.1 视图和场景的大小关系"></a>7.3.1 视图和场景的大小关系</h3><p>在之前的示例代码中，场景和视图的大小都是一样的。如果场景大小大于等于视图大小，<br>视图则会显示垂直或水平滚动条供用户浏览剩余场景内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window1(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window1, self).__init__()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 300, 300)# 1</span><br><span class="line"></span><br><span class="line">        self.rect = QGraphicsRectItem()</span><br><span class="line">        self.rect.setRect(220, 220, 50, 50)</span><br><span class="line">        self.graphics_scene.addItem(self.rect)</span><br><span class="line"></span><br><span class="line">        self.resize(200, 200)                           # 2</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line"># 当场景大小等于视图大小时，如果我们想要去掉滚动条，只需要用QSS把QGraphicsView的边框border属性的值设置为0即可</span><br><span class="line">class Window2(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window2, self).__init__()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 400, 400)</span><br><span class="line"></span><br><span class="line">        self.rect = QGraphicsRectItem()</span><br><span class="line">        self.rect.setRect(0, 0, 50, 50)</span><br><span class="line">        self.graphics_scene.addItem(self.rect)</span><br><span class="line"></span><br><span class="line">        self.graphics_view = QGraphicsView(self)</span><br><span class="line">        self.graphics_view.resize(200, 200)</span><br><span class="line">        self.graphics_view.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line">        qss = &quot;QGraphicsView &#123; border: 0px; &#125;&quot;</span><br><span class="line">        self.graphics_view.setStyleSheet(qss)</span><br><span class="line">        </span><br><span class="line"># 如果场景大小小于视图大小，那视图就会默认居中显示场景内容</span><br><span class="line">class Window3(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window3, self).__init__()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 100, 100)</span><br><span class="line"></span><br><span class="line">        self.rect1 = QGraphicsRectItem()</span><br><span class="line">        self.rect1.setRect(0, 0, 50, 50)</span><br><span class="line">        self.rect1.setBrush(QBrush(QColor(255, 0, 0)))</span><br><span class="line">        self.rect2 = QGraphicsRectItem()</span><br><span class="line">        self.rect2.setRect(0, 50, 50, 50)</span><br><span class="line">        self.rect2.setBrush(QBrush(QColor(0, 255, 0)))</span><br><span class="line">        self.rect3 = QGraphicsRectItem()</span><br><span class="line">        self.rect3.setRect(50, 0, 50, 50)</span><br><span class="line">        self.rect3.setBrush(QBrush(QColor(0, 0, 255)))</span><br><span class="line">        self.rect4 = QGraphicsRectItem()</span><br><span class="line">        self.rect4.setRect(50, 50, 50, 50)</span><br><span class="line">        self.rect4.setBrush(QBrush(QColor(255, 0, 255)))</span><br><span class="line"></span><br><span class="line">        self.graphics_scene.addItem(self.rect1)</span><br><span class="line">        self.graphics_scene.addItem(self.rect2)</span><br><span class="line">        self.graphics_scene.addItem(self.rect3)</span><br><span class="line">        self.graphics_scene.addItem(self.rect4)</span><br><span class="line"></span><br><span class="line">        self.resize(200, 200)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window3()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-3-2-视图变换"><a href="#7-3-2-视图变换" class="headerlink" title="7.3.2 视图变换"></a>7.3.2 视图变换</h3><p>在视图上执行的平移、缩放和旋转变换会作用在所有图元上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 300, 300)</span><br><span class="line"></span><br><span class="line">        self.rect = QGraphicsRectItem()</span><br><span class="line">        self.rect.setRect(50, 50, 50, 50)</span><br><span class="line">        self.rect.setBrush(QBrush(QColor(255, 0, 0)))</span><br><span class="line">        self.ellipse = QGraphicsEllipseItem()</span><br><span class="line">        self.ellipse.setRect(100, 100, 50, 50)</span><br><span class="line">        self.ellipse.setBrush(QBrush(QColor(0, 255, 0)))</span><br><span class="line"></span><br><span class="line">        self.graphics_scene.addItem(self.rect)</span><br><span class="line">        self.graphics_scene.addItem(self.ellipse)</span><br><span class="line"></span><br><span class="line">        self.move(10, 10)</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):      #  调用rotate(10)将视图顺时针旋转10°</span><br><span class="line">        self.rotate(10)</span><br><span class="line"></span><br><span class="line">    def wheelEvent(self, event):           # 鼠标滚轮事件函数</span><br><span class="line">        if event.angleDelta().y() &lt; 0:</span><br><span class="line">            self.scale(0.9, 0.9)          # 通过scale()方法改变视图大小</span><br><span class="line">        else:</span><br><span class="line">            self.scale(1.1, 1.1)</span><br><span class="line">        # 平移视图可以使用move()方法，平移视图也就是指改变窗口在计算机屏幕上的位置</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="7-4-1-事件传递顺序"><a href="#7-4-1-事件传递顺序" class="headerlink" title="7.4.1 事件传递顺序"></a>7.4.1 事件传递顺序</h2><p>现在编写3个类，让它们分别继承QGraphicsView、QGraphicsScene和QGraphicsItem，<br>然后重写mousePressEvent()事件函数，观察一下事件的传递顺序是怎么样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class ParentItem(QGraphicsRectItem):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(ParentItem, self).__init__()</span><br><span class="line">        self.setRect(100, 30, 100, 50)</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):      # 1</span><br><span class="line">        print(&#x27;event from parent QGraphicsItem&#x27;)</span><br><span class="line">        super().mousePressEvent(event)     # 视图→场景→子图元→父图元</span><br><span class="line">        # 需要注意的一点是：调用父类的事件处理接口不能省略，否则事件就会停止传递。</span><br><span class="line">        # 比如删掉Window类下mousePressEvent()事件函数中的super().mousePressEvent(event)，</span><br><span class="line">        # 那么控制台就只会输出“event from QGraphicsView”文本了</span><br><span class="line">        </span><br><span class="line">class ChildItem(QGraphicsRectItem):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(ChildItem, self).__init__()</span><br><span class="line">        self.setRect(100, 30, 50, 30)</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):      # 1</span><br><span class="line">        print(&#x27;event from child QGraphicsItem&#x27;)</span><br><span class="line">        super().mousePressEvent(event)</span><br><span class="line"></span><br><span class="line">class Scene(QGraphicsScene):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Scene, self).__init__()</span><br><span class="line">        self.setSceneRect(0, 0, 300, 300)</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):      # 1</span><br><span class="line">        print(&#x27;event from QGraphicsScene&#x27;)</span><br><span class="line">        super().mousePressEvent(event)</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.resize(300, 300)</span><br><span class="line"></span><br><span class="line">        self.scene = Scene()</span><br><span class="line">        self.setScene(self.scene)</span><br><span class="line"></span><br><span class="line">        self.parent_item = ParentItem()</span><br><span class="line">        self.child_item = ChildItem()</span><br><span class="line">        self.child_item.setParentItem(self.parent_item)</span><br><span class="line">        self.scene.addItem(self.parent_item)</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):      # 1</span><br><span class="line">        print(&#x27;event from QGraphicsView&#x27;)</span><br><span class="line">        super().mousePressEvent(event)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="7-4-2-坐标转换"><a href="#7-4-2-坐标转换" class="headerlink" title="7.4.2 坐标转换"></a>7.4.2 坐标转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line">class Window(QGraphicsView):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Window, self).__init__()</span><br><span class="line">        self.graphics_scene = QGraphicsScene()</span><br><span class="line">        self.graphics_scene.setSceneRect(0, 0, 300, 300)</span><br><span class="line"></span><br><span class="line">        self.ellipse = self.graphics_scene.addEllipse(50, 100, 50, 100)</span><br><span class="line">        self.rect = self.graphics_scene.addRect(150, 100, 100, 100)</span><br><span class="line"></span><br><span class="line">        self.resize(500, 500)</span><br><span class="line">        self.setScene(self.graphics_scene)</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self, event):</span><br><span class="line">        super(Window, self).mousePressEvent(event)</span><br><span class="line">        pos = event.pos()     # # 在窗口上单击时，通过event.pos()获取到的坐标是视图内的坐标</span><br><span class="line">        # 如果场景大小和视图大小一样的话，那么event.pos()获取到的坐标也可以被看作场景内的坐标</span><br><span class="line">        # 但是如果它们的大小不一样，那我们就需要把event.pos()获取到的视图内的坐标转换成场景内的坐标</span><br><span class="line">        # 否则我们无法通过QGraphicsScene. itemAt()方法正确获取到场景中的图元</span><br><span class="line">        item = self.graphics_scene.itemAt(pos, QTransform())</span><br><span class="line">        # itemAt()方法无法通过传给它的视图坐标找到这两个图元，它需要一个场景坐标</span><br><span class="line">        print(item)</span><br><span class="line">        # 此时，我们应该将这个视图坐标映射到场景中。图形视图框架提供了视图、场景和图元坐标之间的转换方法，以及图元与图元坐标之间的转换方法</span><br><span class="line">        # QGraphicsView.mapToScene()        将视图内的坐标转换为场景内的坐标</span><br><span class="line">        # QGraphicsView.mapFromScene()      将场景内的坐标转换为视图内的坐标</span><br><span class="line">        # QGraphicsltem.mapFromScene()      将场景内的坐标转换为图元内的坐标</span><br><span class="line">        # QGraphicsltem.mapToScene()        将图元内的坐标转换为场景内的坐标</span><br><span class="line">        # QGraphicsltem.mapToParent()       将子图元内的坐标转换为父图元内的坐标</span><br><span class="line">        # QGraphicsltem.mapFromParent()     将父图元内的坐标转换为子图元内的坐标</span><br><span class="line">        # QGraphicsltem.mapToltem()         将当前图元内的坐标转换为其他图元内的坐标</span><br><span class="line">        # QGraphicsitem.mapFromltem()       将其他图元内的坐标转换为当前图元内的坐标</span><br><span class="line">        </span><br><span class="line">        # 坐标转换代码</span><br><span class="line">        # def mousePressEvent(self, event):</span><br><span class="line">            # super(Window, self).mousePressEvent(event)</span><br><span class="line">            # pos = self.mapToScene(event.pos())</span><br><span class="line">            # item = self.graphics_scene.itemAt(pos, QTransform())</span><br><span class="line">            # print(item)</span><br><span class="line">            </span><br><span class="line">        # GraphicsView也提供了itemAt()方法，我们只需要给该方法传入视图内的坐标就能获取到图元，</span><br><span class="line">        # 不需要传入第二个QTransform类型的参数。</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    finance_app = Window()</span><br><span class="line">    finance_app.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="8-1-PyInstaller"><a href="#8-1-PyInstaller" class="headerlink" title="8.1 PyInstaller"></a>8.1 PyInstaller</h2><p>PyInstaller的用法非常简单，而且它的打包速度很快。<br>通过它我们能够将程序打包成Windows、macOS和Linux上的可执行文件。<br>PyInstaller已经成功运用在一些不常见的系统上，比如AIX、Solaris、FreeBSD和OpenBSD。<br>PyInstaller官方也在不断更新，所以能够被PyInstaller打包的第三方库也越来越多，“坑”也越来越少。</p><h3 id="8-1-1-环境配置"><a href="#8-1-1-环境配置" class="headerlink" title="8.1.1 环境配置"></a>8.1.1 环境配置</h3><p>环境配置<br>pip install pyinstaller</p><h3 id="8-1-2-PyInstaller多文件和单文件打包模式"><a href="#8-1-2-PyInstaller多文件和单文件打包模式" class="headerlink" title="8.1.2 PyInstaller多文件和单文件打包模式"></a>8.1.2 PyInstaller多文件和单文件打包模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 在命令提示符窗口中执行“pyinstaller -v”命令后发现有以下文字时，执行pip uninstall pathlib命令 卸载掉过时的路径包</span><br><span class="line"># The &#x27;pathlib&#x27; package is an obsolete backport of a standard library package and is incompatible with PyInstaller. Please remove this package (located in C:\Users\11298\AppData\Local\Programs\Python\Python311\Lib\site-packages) using</span><br><span class="line">#     &quot;C:\Users\11298\AppData\Local\Programs\Python\Python311\python.exe&quot; -m pip uninstall pathlib</span><br><span class="line"># then try again.</span><br><span class="line"></span><br><span class="line">接着，打开demo文件夹，在路径栏中输入“cmd”并按“Enter”键。在出现的命令提示符窗口中输入以下命令。</span><br><span class="line"></span><br><span class="line">pyinstaller hello.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">打包结束后，demo文件夹下出现了build和dist两个文件夹，以及一个.spec文件。</span><br><span class="line"></span><br><span class="line">build文件夹中存放着一些编译文件，可以直接删除。</span><br><span class="line">hello.spec是一个打包配置文件，我们也可以通过该文件来打包程序，但效果与命令提示符窗口中执行命令是一样的。</span><br><span class="line"></span><br><span class="line">2.单文件打包模式</span><br><span class="line"></span><br><span class="line">dist文件夹中只会生成一个hello.exe可执行文件，全部的依赖文件都已经被打包到这个文件中了。</span><br><span class="line">只需要添加一个“-F”就可以使用单文件打包模式。   pyinstaller -F hello.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">采用单文件打包模式生成的hello.exe在运行时，会先花费一点儿时间把依赖文件解压出来，再显示运行结果。</span><br><span class="line">这就是为什么通过单文件打包模式打包出来的程序在运行时会比较慢。</span><br><span class="line"></span><br><span class="line">可以使用“--runtime-tmpdir”命令改变_MEI临时文件夹的生成位置，语法格式如下</span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">pyinstaller -F --runtime-tmpdir=/another/path/ hello.py</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">_MEI文件夹会在程序关闭时自动被删除掉。但是如果程序运行崩溃或者被强制退出（比如使用任务管理器强制退出）的话，</span><br><span class="line">那么这个文件夹是不会自动被删除的！这就会导致磁盘内存被占用，需要我们手动进行删除。</span><br></pre></td></tr></table></figure><h3 id="8-1-3-黑框的调试作用"><a href="#8-1-3-黑框的调试作用" class="headerlink" title="8.1.3 黑框的调试作用"></a>8.1.3 黑框的调试作用</h3><p>黑框指的是命令提示符窗口。当我们运行可执行文件后，黑框中会显示程序的输出内容。<br>但是如果可执行文件运行失败，那么黑框中就会显示报错信息。通过这个信息，我们就能知道如何调试程序</p><p>调试程序： 打开一个新的命令提示符窗口，然后将hello.exe拖入，按“Enter”键运行</p><p>在确保程序运行无误后，我们可以在打包命令中加上“-w”来去掉黑框。<br>pyinstaller -w hello.py</p><p>当我们在打包一个程序时，先不要加“-w”，因为黑框能够告诉我们报错信息。若可执行文件运行成功，且内部功能正常，再加上“-w”重新打包。<br>如果程序本身就需要用到命令提示符窗口来输入或输出一些内容，那就不用加“-w”了。</p><h3 id="8-1-4-给可执行文件加上图标"><a href="#8-1-4-给可执行文件加上图标" class="headerlink" title="8.1.4 给可执行文件加上图标"></a>8.1.4 给可执行文件加上图标</h3><p>如果要给可执行文件添加图标，我们可以在打包时加上“-i”命令，并在“-i”后面加上图标文件的路径，使用格式如下。<br>pyinstaller -i &#x2F;path&#x2F;to&#x2F;xxx.ico hello.py</p><p>在macOS系统上打包时，必须要使用.icns格式的图标文件。</p><p>一些读者用了“-i”命令后，可执行文件的图标并没有发生改变，可能原因有以下两点。<br>① 图标文件是无效的。请不要用修改扩展名的方式来获取.ico格式的文件，比如直接把.png改成.ico，我们应该使用专业的格式转换软件（如格式工厂）来改变格式。<br>② 缓存原因。把可执行文件移动到其他路径下后，就会发现图标是正常显示的。当然也可以重启计算机。</p><h3 id="8-1-5-打包资源文件"><a href="#8-1-5-打包资源文件" class="headerlink" title="8.1.5 打包资源文件"></a>8.1.5 打包资源文件</h3><p>资源文件（即icon.ico）相对于可执行文件的路径必须要正确，这样程序才能正常运行。</p><p>把资源文件手动复制到hello文件夹中的方法只适用于多文件打包模式。</p><p>如果用单文件打包模式打包，包含依赖文件的文件夹只有在可执行文件运行后才被解压出来，<br>而程序会因为找不到资源文件立即报错，所以我们是没有时间去复制的。</p><p>在打包时直接把资源文件添加到生成的hello文件夹（单文件打包模式下是_MEI文件夹）中：<br>pyinstaller –add-data&#x3D;SRC;DEST hello.py</p><p>SRC表示资源文件所在的路径（绝对路径和相对路径都可以），<br>DEST表示在打包后资源文件在hello文件夹中的相对路径，<br>在Windows系统上两个路径之间用英文分号“;”隔开，<br>在macOS和Linux系统上两个路径之间用英文冒号“:”隔开</p><p>我们现在用多文件打包模式重新打包示例代码8-2，使用如下打包命令。<br>pyinstaller –add-data&#x3D;.&#x2F;icon.ico;. hello.py</p><p>icon.ico在当前路径下，所以在SRC处填写“.&#x2F;icon.ico”的话就可以让PyIsntaller找到它。<br>我们要在打包后将icon.ico放在hello文件夹中，所以在DEST处填写“.”。<br>打包结束后，可以发现icon.ico出现在了hello文件夹中，程序运行也没有问题</p><p>我们可以使用通配符“<em>”来添加多个资源文件。<br>比如“–add-data&#x3D;</em>;.&#x2F;folder&#x2F;”就表示将当前路径下的所有文件放在hello文件夹下名为folder的文件夹中。<br>我们也可以添加同种格式的多个文件，比如“–add-data&#x3D;*.jpg;.&#x2F;image&#x2F;”就表示将当前路径下的所有.jpg格式的文件放到hello文件夹下名为image的文件夹中。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>现在使用单文件打包模式打包hello.py文件，命令如下。<br>pyinstaller -F –add-data&#x3D;.&#x2F;icon.ico;. hello.py</p><p>打包结束后，我们运行hello.exe，发现报错了，但是解压出来的_MEI临时文件夹中确实有icon.ico！这是怎么回事？先来看一下这行代码。<br>win.iconbitmap(‘.&#x2F;icon.ico’)  #设置窗口图标</p><p>程序会在当前路径下寻找icon.ico文件，但是hello.exe在dist文件夹中，而icon.ico在_MEI文件夹中，所以才会报错。<br>可以将示例代码8-2修改一下，让程序能够找到_MEI文件夹中的icon.ico，详见示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import tkinter</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">　</span><br><span class="line">def res_path(relative_path):   # </span><br><span class="line">    &quot;&quot;&quot;获取资源路径&quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        # 获取_MEI文件夹所在路径</span><br><span class="line">        base_path = sys._MEIPASS  # 通过sys模块的_MEIPASS属性来获取_MEI文件夹的位置</span><br><span class="line">    except Exception: </span><br><span class="line">        # 没有_MEI文件夹的话使用当前路径</span><br><span class="line">        base_path = os.path.abspath(&quot;.&quot;)</span><br><span class="line"></span><br><span class="line">    return os.path.join(base_path, relative_path)</span><br><span class="line">　</span><br><span class="line">win = tkinter.Tk()</span><br><span class="line">win.iconbitmap(res_path(&#x27;./icon.ico&#x27;))  # 设置窗口图标</span><br><span class="line">win.mainloop()</span><br></pre></td></tr></table></figure><p>在用单文件打包模式打包前，需要修改程序代码，将res_path()函数套在各个路径上。</p><h3 id="8-1-6-减小打包后的文件大小"><a href="#8-1-6-减小打包后的文件大小" class="headerlink" title="8.1.6 减小打包后的文件大小"></a>8.1.6 减小打包后的文件大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PyInstaller会把Python环境和程序使用到的库打包进来，有时候还会打包一些明明没有用到的第三方库，</span><br><span class="line">导致打包所花的时间越来越多，包也越来越大。</span><br><span class="line"></span><br><span class="line">第一个减小包体的方法就是使用干净的打包环境。所谓干净，指的是计算机上只安装了程序运行所必需的库。</span><br><span class="line">通常，我们会使用虚拟环境，或者在虚拟机中打包。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二个方法：如果目前无法在干净的环境中打包，那么可以使用“--exclude-module”命令，</span><br><span class="line">它的作用是在打包时排除指定的库或模块，这样就不会把无关的文件包含进来了，使用格式如下。</span><br><span class="line">pyinstaller --exclude-module=NAME hello.py</span><br><span class="line">在NAME处填写要排除的库或模块名称。</span><br><span class="line"></span><br><span class="line">比方说我们现在要打包一个程序，该程序仅仅使用到了操作Excel文件的openpyxl库</span><br><span class="line">from openpyxl import Workbook</span><br><span class="line"></span><br><span class="line"># 创建文件对象</span><br><span class="line">wb = Workbook()</span><br><span class="line"></span><br><span class="line"># 获取当前正使用的工作表</span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line"># 为工作表添加一些字段</span><br><span class="line">ws.append([&#x27;test1&#x27;, &#x27;test2&#x27;, &#x27;test3&#x27;])</span><br><span class="line"></span><br><span class="line"># 保存为test.xlsx</span><br><span class="line">wb.save(&#x27;test.xlsx&#x27;)</span><br><span class="line"></span><br><span class="line">假如我们计算机上还装有NumPy和pandas，那这两个没有用到的库也可能会被打包进来。所以我们应该用“--exclude-module”命令排除这两个库，使用以下命令打包。</span><br><span class="line">pyinstaller --exclude-module=numpy --exclude-module=pandas hello.py</span><br><span class="line"></span><br><span class="line">第三个方法就是使用UPX工具，它可以进一步压缩可执行文件。我们首先去UPX官网下载对应系统版本的UPX工具。</span><br><span class="line">笔者使用的是Windows 10 64位的计算机，所以需要下载win64版本的UPX</span><br></pre></td></tr></table></figure><h3 id="8-1-7-其他常用的命令"><a href="#8-1-7-其他常用的命令" class="headerlink" title="8.1.7 其他常用的命令"></a>8.1.7 其他常用的命令</h3><p>1.pyinstaller -h  查看PyInstaller所有命令的解释和用法<br>2. pyinstaller -n&#x3D;good hello.py 用来修改生成的可执行文件名称  原来生成的可执行文件名称为hello.exe，现在就变成good.exe了</p><p>3.-y<br>当打包完毕后，我们可能会想修改一下源码然后重新打包。<br>那么第二次打包时PyInstaller会询问是否要删除之前打包生成的文件，此时需要我们往命令提示符窗口中输入y或者N<br>如果在打包命令中加上“-y”，那PyInstaller会直接删除上次打包遗留下的文件，不会询问</p><p>4.–clean<br>删除前一次打包留下的缓存文件，不过在删除前PyInstaller会先询问是否确认执行，所以我们可以加上“-y”命令<br>pyinstaller –clean -y hello.py</p><p>5.–hidden-import<br>我们经常会碰到“ModuleNotFoundError: No module named xxx”这种报错。<br>出现这种报错的原因无非就两种。<br>① 没有安装相应的库或模块。<br>② 已经安装相应的库或模块了，代码中也导入了，但是PyInstaller在打包时没有找到。<br>如果是第一种原因，我们用pip命令下载相应库或模块就可以解决了。<br>如果是第二种原因，在打包时添加“–hidden-import”命令就可以解决了，其使用格式如下（xxx就是库或模块的名称）。<br>pyinstaller –hidden-import&#x3D;xxx hello.py</p><p>6.–noupx代表不使用UPX工具。</p><p>7.–runtime-hook当我们双击可执行文件后，程序就会执行。<br>“–runtime-hook”命令能够让我们在程序运行前先执行一段代码，非常有用。<br>在hello.py中，我们想要读取data.txt的文本内容。<br>但是data.txt在data.zip压缩文件中，所以必须先执行extract_data.py中的程序将data.txt解压出来。打包命令如下所示。<br>pyinstaller –runtime-hook&#x3D;extract_data.py –add-data&#x3D;data.zip;. hello.py</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>saleor安装历程</title>
      <link href="/2023/10/02/saleor%E5%AE%89%E8%A3%85/"/>
      <url>/2023/10/02/saleor%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="windows系统基于docker安装"><a href="#windows系统基于docker安装" class="headerlink" title="windows系统基于docker安装"></a>windows系统基于docker安装</h1><h2 id="✍首先安装docker："><a href="#✍首先安装docker：" class="headerlink" title="✍首先安装docker："></a>✍<strong>首先安装docker：</strong></h2><p>参考docker安装 <a href="https://zhuanlan.zhihu.com/p/430259634">Windows 容器化-安装 docker - 知乎 (zhihu.com)</a><br><strong>1.windows 的docker安装完毕后，会报错</strong><br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230926230245.png"><br><strong>原因</strong>：window自带的Linux的 WSL版本过低<br><strong>解决</strong>：win+r ，打开命令提示符，输入 wsl –update<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230926225959.png"><br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230926230610.png"></p><p>2.重启，正常。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230926230811.png"></p><h2 id="1-克隆项目"><a href="#1-克隆项目" class="headerlink" title="1.克隆项目"></a>1.克隆项目</h2><ol><li><p>进入想建立项目的文件夹，在地址栏中输入cmd<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929213821.png"><br>显示这个界面：<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929213902.png"></p></li><li><p>在终端内输入以下命令：</p></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/saleor/saleor-platform.git</span><br><span class="line">cd saleor-platform</span><br><span class="line">docker compose build #此命令需要提前将docker启动</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929214338.png"></p><h2 id="2-开启代码实时代码重加载"><a href="#2-开启代码实时代码重加载" class="headerlink" title="2.开启代码实时代码重加载"></a>2.开启代码实时代码重加载</h2><p>在 Windows 中使用 Docker 时，你可以通过目录映射来共享主机上的文件夹到 Docker 容器内。这样，你就可以在容器内操作主机上的文件，也可以将容器内的文件保存到主机上。</p><h3 id="1-共享文件夹"><a href="#1-共享文件夹" class="headerlink" title="1.共享文件夹"></a>1.共享文件夹</h3><p>进入docker desktop，进入setting-&gt;general 去掉勾选 “use the <a href="https://so.csdn.net/so/search?q=wsl2&spm=1001.2101.3001.7020">wsl2</a> base engine”选项，点击应用后会自动重启。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929221158.png"></p><p>开启文件共享<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929221321.png"><br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929221421.png"></p><h3 id="2-配置专用内存"><a href="#2-配置专用内存" class="headerlink" title="2.配置专用内存"></a>2.配置专用内存</h3><p>配置docker的专用内存，确保大于5GB，之后在右下角点击重启docker。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929221715.png"></p><h2 id="3-迁移数据库"><a href="#3-迁移数据库" class="headerlink" title="3.迁移数据库"></a>3.迁移数据库</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker compose run --rm api python3 manage.py migrate</span><br><span class="line">//（可选）使用示例数据填充数据库：</span><br><span class="line">docker compose run --rm api python3 manage.py populatedb</span><br></pre></td></tr></table></figure><p>迁移数据过程中，docker弹出共享文件的请求，点击确认共享即可。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929222442.png"><br>后面会加载一长串的runing migrations<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929222602.png"></p><h2 id="4-创建管理员账户"><a href="#4-创建管理员账户" class="headerlink" title="4.创建管理员账户"></a>4.创建管理员账户</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//cmd中运行</span><br><span class="line">docker compose run --rm api python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929223857.png"></p><h2 id="5-运行服务"><a href="#5-运行服务" class="headerlink" title="5.运行服务"></a>5.运行服务</h2><p>使用以下命令运行所有 Saleor 容器（从目录中）：<code>saleor-platform</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929223409.png"><br>后面是服务启动过程<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929223559.png"><br>可以看到，能够访问网站后台 <a href="http://localhost:9000/">http://localhost:9000/</a> , 并需要登录管理员账号<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929223750.png"><br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230929224136.png"></p><p>访问一下前台商店：<a href="http://localhost:8000/">http://localhost:8000/</a><br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230930152548.png"><br>恭喜您成功设置好 Saleor 实例！以下是一些有用的链接，帮助您开始搭建电子商务平台：</p><ol><li><p><strong>Saleor 文档</strong>: 这是 Saleor 的官方文档，提供了关于 Saleor 各个方面的详细信息，包括安装、配置、定制和使用等。您可以参考文档中的逐步指南和详细解释。这是链接：<a href="https://docs.saleor.io/">Saleor 文档</a></p></li><li><p><strong>Saleor 商店后台</strong>: Saleor 商店后台是您管理电子商务店铺的管理界面。您可以在后台管理产品、订单、客户和其他重要方面。通过访问 Saleor 实例的管理 URL，您可以进入 Saleor 商店后台。例如，如果您的 Saleor 实例在本地运行，URL 可能是 <code>http://localhost:8000/dashboard</code>。</p></li><li><p><strong>Saleor 商店前台</strong>: Saleor 商店前台是您电子商务店铺的公共界面，客户可以在此浏览和购买产品。通过访问 Saleor 实例的 URL，您可以进入 Saleor 商店前台。例如，如果您的 Saleor 实例在本地运行，URL 可能是 <code>http://localhost:8000</code>。</p></li><li><p><strong>GraphQL API</strong>: Saleor 提供了一个 GraphQL API，用于以编程方式与电子商务数据进行交互。您可以使用 GraphQL API 检索产品、创建订单、管理客户等。API 文档提供了有关可用查询、变异和订阅的详细信息。您可以通过访问 Saleor 实例的 GraphQL 端点来探索 GraphQL API。例如，如果您的 Saleor 实例在本地运行，GraphQL 端点可能是 <code>http://localhost:8000/graphql</code>。</p></li></ol><h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><p>本文基于腾讯云安装，使用cent os系统。</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h3 id="1-使用root权限"><a href="#1-使用root权限" class="headerlink" title="1.使用root权限"></a>1.使用root权限</h3><p>要先将旧版本docker卸载，再安装新版本docker，卸载时需要获取root，输入两次密码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>输入以下命令切换到root用户</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><h3 id="2-卸载旧版docker"><a href="#2-卸载旧版docker" class="headerlink" title="2.卸载旧版docker"></a>2.卸载旧版docker</h3><p>在安装 docker-ce 之前，要先卸载旧版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">apt-get remove docker docker-engine docker.io</span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">yum remove docker docker-common docker-selinux docker-engine </span><br></pre></td></tr></table></figure><h3 id="3-安装新版docker"><a href="#3-安装新版docker" class="headerlink" title="3.安装新版docker"></a>3.安装新版docker</h3><p>现在要安装最新版的 Docker 软件包，就是使用 docker-ce 这个名称了，如果是商业版的就是 docker-ee。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">apt-get install docker-ce</span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><h3 id="4-安装新版docker-compose"><a href="#4-安装新版docker-compose" class="headerlink" title="4.安装新版docker compose"></a>4.安装新版docker compose</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install docker-compose-plugin</span></span><br></pre></td></tr></table></figure><p>验证是否安装最新版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose version</span><br></pre></td></tr></table></figure><h3 id="5-查找安装的位置（非必要步骤）"><a href="#5-查找安装的位置（非必要步骤）" class="headerlink" title="5.查找安装的位置（非必要步骤）"></a>5.查找安装的位置（非必要步骤）</h3><p>使用 <code>rpm</code> 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa --last</span><br><span class="line">这将列出按安装时间排序的所有软件包，最近安装的软件包将显示在列表的顶部</span><br></pre></td></tr></table></figure><p>（非必要步骤）使用 <code>rpm -qi</code> 命令加上软件包名称来查看软件信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qi example-package</span><br></pre></td></tr></table></figure><p>查看docker-ce软件包所在的文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql docker-ce</span><br></pre></td></tr></table></figure><h3 id="6-启动docker"><a href="#6-启动docker" class="headerlink" title="6.启动docker"></a>6.启动docker</h3><p>启动docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker </span><br></pre></td></tr></table></figure><p>查看docker状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h3 id="7-cent-os-安装git"><a href="#7-cent-os-安装git" class="headerlink" title="7.cent os 安装git"></a>7.cent os 安装git</h3><p>卸载老版本git</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git -y</span><br></pre></td></tr></table></figure><p>查看新版本git，得到新版本的版本号</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum provides git</span><br></pre></td></tr></table></figure><p>安装新版本git，使用新的版本号</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git-1.8.3.1-25.el7_9.x86_64  -y</span><br></pre></td></tr></table></figure><p><strong>或者直接用以下命令安装最新版git</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure><p>验证git是否安装完成</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="7-使用docker安装saleor（根据官方教程）"><a href="#7-使用docker安装saleor（根据官方教程）" class="headerlink" title="7.使用docker安装saleor（根据官方教程）"></a>7.使用docker安装saleor（根据官方教程）</h3><ol><li>克隆github仓库和构建docker镜像</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/saleor/saleor-platform.git</span><br><span class="line">cd saleor-platform</span><br><span class="line">docker compose build</span><br></pre></td></tr></table></figure><ol><li>拉取saleor的迁移数据库<br>因为不是windows和Macos，所以不需要去docker上配置共享文件夹和docker内存</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose run --rm api python3 manage.py migrate</span><br></pre></td></tr></table></figure><h3 id="7-查看docker镜像"><a href="#7-查看docker镜像" class="headerlink" title="7.查看docker镜像"></a>7.查看docker镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="安装saleor-core"><a href="#安装saleor-core" class="headerlink" title="安装saleor core"></a>安装saleor core</h2><p>saleor 官方总安装指导：<a href="https://docs.saleor.io/docs/3.x/setup/docker-images">使用 Docker 安装 |销售商贸文档 (saleor.io)</a></p><p>官方直达链接 <a href="https://github.com/saleor/saleor/pkgs/container/saleor">Package saleor (github.com)</a></p><h3 id="使用docker拉取镜像文件"><a href="#使用docker拉取镜像文件" class="headerlink" title="使用docker拉取镜像文件"></a>使用docker拉取镜像文件</h3><p>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ghcr.io/saleor/saleor:unstable-main</span><br></pre></td></tr></table></figure><p>docker容器默认拉取文件的位置在 &#x2F;var&#x2F;lib&#x2F;docker下</p><h4 id="使用官方的saleor-core-图片"><a href="#使用官方的saleor-core-图片" class="headerlink" title="使用官方的saleor core 图片"></a>使用官方的saleor core 图片</h4><p>官方直达链接 <a href="https://github.com/saleor/saleor/pkgs/container/saleor">Package saleor (github.com)</a><br>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ghcr.io/saleor/saleor:3.16.1  <span class="comment"># 根据官方提供的最新的换，数字前面不能有空格</span></span><br></pre></td></tr></table></figure><h4 id="从零开始构建"><a href="#从零开始构建" class="headerlink" title="从零开始构建"></a>从零开始构建</h4><p>如果要自己构建映像，请在目录中使用：<code>docker build``saleor</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd saleor</span><br><span class="line">docker build -t &lt;yourimagename&gt; .</span><br></pre></td></tr></table></figure><h3 id="2-修改docker拉取下载后的文件夹权限（需要在root权限下修改）"><a href="#2-修改docker拉取下载后的文件夹权限（需要在root权限下修改）" class="headerlink" title="2.修改docker拉取下载后的文件夹权限（需要在root权限下修改）"></a>2.修改docker拉取下载后的文件夹权限（需要在root权限下修改）</h3><p>将文件夹设置为所有用户可读、写和执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /var/lib/docker</span><br></pre></td></tr></table></figure><p>将文件夹设置为所有用户只读和执行，但不可写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /var/lib/docker</span><br></pre></td></tr></table></figure><p>将文件夹设置为仅对所有者可读、写和执行，其他用户没有权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 /var/lib/docker</span><br></pre></td></tr></table></figure><p>修改文件夹及其子文件夹权限的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod -R permissions folder</span><br><span class="line">chmod -R 777 /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="安装-saleor-dashboard-（控制面板）"><a href="#安装-saleor-dashboard-（控制面板）" class="headerlink" title="安装 saleor-dashboard （控制面板）"></a>安装 saleor-dashboard （控制面板）</h2><p>官方直达链接<a href="https://github.com/saleor/saleor-dashboard/pkgs/container/saleor-dashboard">Package saleor-dashboard (github.com)</a><br>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ghcr.io/saleor/saleor-dashboard:3.16.1</span><br></pre></td></tr></table></figure><h3 id="从零构建"><a href="#从零构建" class="headerlink" title="从零构建"></a>从零构建</h3><p>需要在docker中进入saleor-dashboard目录去创建你自己的文件夹，命令入下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> saleor-dashboard</span><br><span class="line">docker build -t &lt;yourimagename&gt; .</span><br></pre></td></tr></table></figure><h2 id="创建容器docker"><a href="#创建容器docker" class="headerlink" title="创建容器docker"></a>创建容器docker</h2><p>基础知识：<a href="https://vsupalov.com/6-docker-basics/">入门时应完全掌握的 6 个 Docker 基础知识 ·vsupalov.com</a></p><h3 id="1-执行创建容器命令"><a href="#1-执行创建容器命令" class="headerlink" title="1.执行创建容器命令"></a>1.执行创建容器命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 创建saleor:unstable-main  即saleor core</span><br><span class="line">docker run --name my-saleor-container -d ghcr.io/saleor/saleor:unstable-main</span><br><span class="line"></span><br><span class="line">// 创建 ghcr.io/saleor/saleor:3.16.1 即saleor-core-image</span><br><span class="line">docker run --name my-saleor-core-image -d ghcr.io/saleor/saleor:3.16.1</span><br><span class="line"></span><br><span class="line">//创建 saleor-dashboard:3.16.1</span><br><span class="line">docker run --name my-saleor-dashboard -d ghcr.io/saleor/saleor-dashboard:3.16.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-查看正在运行的容器"><a href="#2-查看正在运行的容器" class="headerlink" title="2.查看正在运行的容器"></a>2.查看正在运行的容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="3-创建容器的docker-compose-yml"><a href="#3-创建容器的docker-compose-yml" class="headerlink" title="3.创建容器的docker-compose.yml"></a>3.创建容器的docker-compose.yml</h3><p>创建容器后，不会直接生成 docker compose.yml ——配置文件</p><ul><li>这里是docker-compose.yml的简介：<a href="https://zhuanlan.zhihu.com/p/387840381">docker compose 配置文件 .yml 全面指南 - 知乎 (zhihu.com)</a></li></ul><h4 id="1-确认自己的docker-version与安装的-dockers-compose-version相匹配"><a href="#1-确认自己的docker-version与安装的-dockers-compose-version相匹配" class="headerlink" title="1.确认自己的docker version与安装的 dockers-compose version相匹配"></a>1.确认自己的docker version与安装的 dockers-compose version相匹配</h4><ol><li>运行以下命令来查看已安装的Docker版本：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><ol><li>运行以下命令来查看已安装的Docker Compose版本：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h5 id="出现docker-compose问题"><a href="#出现docker-compose问题" class="headerlink" title="出现docker-compose问题"></a>出现docker-compose问题</h5><p>如果在运行 <code>docker-compose version</code> 命令时出现 “bash: docker-compose: command not found” 错误，这意味着您的系统上没有安装 Docker Compose 或者它没有正确配置。<br>本文根据cent os系统进行安装</p><ol><li>运行以下命令来下载 Docker Compose 的最新版本：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><ol><li>授予执行权限：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><ol><li>验证安装：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h3 id="3-查找容器的项目所在位置"><a href="#3-查找容器的项目所在位置" class="headerlink" title="3.查找容器的项目所在位置"></a>3.查找容器的项目所在位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container_id_or_name&gt; /bin/bash</span><br></pre></td></tr></table></figure><h1 id="在Ubuntu-20-04-系统上部署-saleor"><a href="#在Ubuntu-20-04-系统上部署-saleor" class="headerlink" title="在Ubuntu 20.04 系统上部署 saleor"></a>在Ubuntu 20.04 系统上部署 saleor</h1><h3 id="1-使用root权限-1"><a href="#1-使用root权限-1" class="headerlink" title="1.使用root权限"></a>1.使用root权限</h3><p>要先将旧版本docker卸载，再安装新版本docker，卸载时需要获取root，输入两次密码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>输入以下命令切换到root用户</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><h3 id="2-Ubuntu-20-04安装git"><a href="#2-Ubuntu-20-04安装git" class="headerlink" title="2.Ubuntu 20.04安装git"></a>2.Ubuntu 20.04安装git</h3><p>卸载老版本git</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt remove git -y</span><br></pre></td></tr></table></figure><p>查看新版本git，得到新版本的版本号</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt provides git</span><br></pre></td></tr></table></figure><p>安装新版本git，使用新的版本号</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install git-1.8.3.1-25.el7_9.x86_64  -y</span><br></pre></td></tr></table></figure><p><strong>或者直接用以下命令安装最新版git</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y git</span><br></pre></td></tr></table></figure><p>验证git是否安装完成</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="安装Ubuntu-20-04中saleor一键部署（deploy-saleor-sh）所需的各种环境"><a href="#安装Ubuntu-20-04中saleor一键部署（deploy-saleor-sh）所需的各种环境" class="headerlink" title="安装Ubuntu 20.04中saleor一键部署（deploy-saleor.sh）所需的各种环境"></a>安装Ubuntu 20.04中saleor一键部署（deploy-saleor.sh）所需的各种环境</h3><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update                #升级系统软件包</span><br><span class="line">sudo apt install nginx         #安装Nginx</span><br></pre></td></tr></table></figure><h4 id="安装PHP7-4"><a href="#安装PHP7-4" class="headerlink" title="安装PHP7.4"></a>安装PHP7.4</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install php-fpm</span><br><span class="line">sudo php -v # 查看PHP版本。</span><br></pre></td></tr></table></figure><h4 id="安装cerbot"><a href="#安装cerbot" class="headerlink" title="安装cerbot"></a>安装cerbot</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python3-certbot-nginx</span><br></pre></td></tr></table></figure><h4 id="deploy-saleor-sh-安装"><a href="#deploy-saleor-sh-安装" class="headerlink" title="deploy-saleor.sh 安装"></a>deploy-saleor.sh 安装</h4><ol><li>以 sudoer 身份登录，并将此存储库克隆到将安装 Saleor 和 Saleor Desktop 的 sudo 用户的主目录中。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/thewhiterabbit/Deploy_Saleor.git</span><br></pre></td></tr></table></figure><ol><li>使用 sudo，从主目录运行 deploy.sh 脚本。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo bash Deploy_Saleor/deploy.sh</span><br><span class="line">sudo bash Deploy_Saleor/deploy-dashboard.sh</span><br></pre></td></tr></table></figure><ol><li>运行 certbot 以设置 SSL。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx -d your.domain #按提示选择，重定向选择2以更改为https</span><br></pre></td></tr></table></figure><p>证书到期后再次运行cerbot，并选择“certonly”选项，如果要非交互式的更新所有证书，运行“certbot renew”</p><p>恭喜您成功启用了 &lt;your.domain&gt; 的 HTTPS！ </p><p>为了测试您的配置并确保 SSL&#x2F;TLS 设置的安全性，您可以访问以下链接：<br><a href="https://www.ssllabs.com/ssltest/analyze.html?d=">https://www.ssllabs.com/ssltest/analyze.html?d=</a>&lt;your.domain&gt;</p><p>以下是一些关于您的证书的重要说明：</p><ul><li>您的证书和证书链已保存在 &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;&lt;your.domain&gt;&#x2F;fullchain.pem 文件中。</li><li>您的密钥文件已保存在 &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;&lt;your.domain&gt;&#x2F;privkey.pem 文件中。</li><li>您的证书将在2023年12月29日过期。要在将来获取新的或修改过的证书版本，只需再次运行 Certbot，并选择 “certonly” 选项。若要非交互式地更新所有证书，请运行 “certbot renew” 命令。</li><li>您的帐户凭据已保存在 Certbot 的配置目录中，路径为 &#x2F;etc&#x2F;letsencrypt。建议创建一个安全备份该文件夹，因为它包含了 Certbot 获取的证书和私钥等重要信息。</li><li>如果您喜欢 Certbot，请考虑通过以下方式支持他们的工作：<ul><li>向 ISRG &#x2F; Let’s Encrypt 捐赠：<a href="https://letsencrypt.org/donate">https://letsencrypt.org/donate</a></li><li>向 EFF（电子前沿基金会）捐赠：<a href="https://eff.org/donate-le%E3%80%82">https://eff.org/donate-le。</a></li><li>您的支持将有助于持续发展和维护安全证书服务。</li></ul></li></ul><p>如果有任何其他问题，我将乐意为您提供帮助！<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230930214650.png" alt="900"></p><ol><li>在以下文件中将 http 替换为 https：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/www/your.domain/dashboard/index.html</span><br><span class="line">/var/www/your.domain/dashboard/dashboard.randomstring.js</span><br></pre></td></tr></table></figure><p>注意：将 &#x2F;dashboard&#x2F; 替换为您在安装脚本期间输入的 URI。<br>find &#x2F;path&#x2F;to&#x2F;search -name “index.html”<br>find &#x2F; -type d -name “dashboard.randomstring.js”<br>Ainidewei$&amp;$548926ainidewei<br>sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;saleor &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;saleor<br>sudo systemctl reload nginx<br>sudo systemctl restart nginx</p><h1 id="saleor-developer（win11）"><a href="#saleor-developer（win11）" class="headerlink" title="saleor developer（win11）"></a>saleor developer（win11）</h1><p>官方安装步骤<a href="https://saleor.io/open-source/">The Enterprise Open Source Commerce – Saleor Commerce</a></p><h2 id="saleor开发环境搭建"><a href="#saleor开发环境搭建" class="headerlink" title="saleor开发环境搭建"></a>saleor开发环境搭建</h2><h3 id="克隆saleor"><a href="#克隆saleor" class="headerlink" title="克隆saleor"></a>克隆saleor</h3><p>进入想克隆saleor项目的文件夹，在搜索栏上输入cmd，执行以下命令，如果没有git和docker，先下载安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/saleor/saleor-platform.git --recursive --jobs 3</span><br><span class="line">cd saleor-platform </span><br><span class="line">docker-compose build</span><br></pre></td></tr></table></figure><h3 id="获取saleor数据库"><a href="#获取saleor数据库" class="headerlink" title="获取saleor数据库"></a>获取saleor数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm api python3 manage.py migrate</span><br><span class="line">docker-compose run --rm api python3 manage.py collectstatic --noinput</span><br></pre></td></tr></table></figure><h3 id="可选部署"><a href="#可选部署" class="headerlink" title="可选部署"></a>可选部署</h3><h4 id="创建管理员账号"><a href="#创建管理员账号" class="headerlink" title="创建管理员账号"></a>创建管理员账号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm api python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure><h4 id="使用示例数据填充数据库"><a href="#使用示例数据填充数据库" class="headerlink" title="使用示例数据填充数据库"></a>使用示例数据填充数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm api python3 manage.py populatedb --createsuperuser</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>以上要使用这个账号密码登录管理账号： <a href="mailto:&#x61;&#x64;&#109;&#x69;&#x6e;&#x40;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#x6d;">&#x61;&#x64;&#109;&#x69;&#x6e;&#x40;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#x6d;</a> &#x2F; admin</p><h3 id="安装saleor的python-开发框架（也可用别的框架）"><a href="#安装saleor的python-开发框架（也可用别的框架）" class="headerlink" title="安装saleor的python 开发框架（也可用别的框架）"></a>安装saleor的python 开发框架（也可用别的框架）</h3><p>官网直达：<a href="https://github.com/mirumee/saleor-app-framework-python">mirumee&#x2F;saleor-app-framework-python: Python Saleor App&#x2F;Extension boilerplate. Batteries included. (github.com)</a></p><h4 id="基于pip安装（可选pip或poetry）"><a href="#基于pip安装（可选pip或poetry）" class="headerlink" title="基于pip安装（可选pip或poetry）"></a>基于pip安装（可选pip或poetry）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/saleor/saleor-app-framework-python.git@main</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>官方文档直达 <a href="https://mirumee.github.io/saleor-app-framework-python/">Saleor App Framework (mirumee.github.io)</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tiktok五力模型</title>
      <link href="/2023/10/02/tiktok%E4%BA%94%E5%8A%9B%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/10/02/tiktok%E4%BA%94%E5%8A%9B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="✍tiktok五力模型"><a href="#✍tiktok五力模型" class="headerlink" title="✍tiktok五力模型"></a>✍tiktok五力模型</h2><h3 id="产品力：做好TikTok选品"><a href="#产品力：做好TikTok选品" class="headerlink" title="产品力：做好TikTok选品"></a>产品力：做好TikTok选品</h3><pre class="mermaid">graph LR    %% s=start  e=end  f= fork n=normal         %% 虚线    f1_帝((选品))        %% 分支点     f1_帝--> f2[产品的材质体积和重量]-->f3[避免敏感物品]    f2 --> f4[体积重量]    f2 --> f5[虚拟交付的服务型产品]    f1_帝-->|中外差价大|n3[有足够的利润空间]    f1_帝-->|展示性强|n4[理解门槛低 所见即所得]    f1_帝-->|与目标市场需求的匹配度|n5[竞品分析及工具]    f1_帝--> f6[产品的价值]        %% 分支点 产品的价值    f6--> n1[使用价值]    f6--> n2[情绪价值]-->e1[情感的传递]    n2 --> e2[解压]    f6-->e3[资产价值]</pre><h4 id="产品力的评判标准"><a href="#产品力的评判标准" class="headerlink" title="产品力的评判标准"></a>产品力的评判标准</h4><table><thead><tr><th align="center">分数</th><th align="center">程度</th><th align="center">符合情况</th></tr></thead><tbody><tr><td align="center">1分产品力</td><td align="center">不知道如何做TikTok选品</td><td align="center">上述选品的五个原则都不符</td></tr><tr><td align="center">2分产品力</td><td align="center">知道该如何做TikTok选品</td><td align="center">自己的选品至少符合2项选品原则</td></tr><tr><td align="center">3分产品力</td><td align="center">符合3项及以上选品原则</td><td align="center">清楚此产品在目标市场的基本情况</td></tr><tr><td align="center">4分产品力</td><td align="center">符合4项及以上选品原则</td><td align="center">能很好地融入目标市场，并且凭借强大的产品力获得高流量曝光和成交转化</td></tr><tr><td align="center">5分产品力</td><td align="center">符合以上所有选品原则</td><td align="center">成为TikTok或者跨境电商在本行业的领导品牌，具有独特的产品风格与差异化，并且有自传播和裂变属性</td></tr></tbody></table><h3 id="内容力：-夯实TikTok最核心的力量"><a href="#内容力：-夯实TikTok最核心的力量" class="headerlink" title="内容力： 夯实TikTok最核心的力量"></a>内容力： 夯实TikTok最核心的力量</h3><pre class="mermaid">graph LR    %% s=start  e=end  f= fork n=normal         %% 虚线    f1_帝((十大内容库+五倍分发组合拳))        %% 分支点     f1_帝--> |增强对内容好坏的判断力|f2[培养网感]-->f3[了解最红火的网红]    f2 --> f4[懂平台所有的热门歌曲]    f2 --> f5[如数家珍说出平台用户喜欢讨厌为什么会这样流量密码是什么]        f1_帝-->|对好坏内容拆分|n1[值得拆分的七个点]    n1 --> e1[画面布局]    n1 --> e2[音乐音效]    n1 --> e3[前2-5秒的内容]    n1 --> e4[让人想点赞的时刻]    n1 --> e5[引起购买冲动的点]    n1 --> e6[让人再看一边的理由]    n1 --> e7[文案描述]        f1_帝-->n4[建立十大内容库]    n4-->r1[1.产品内容库]    n4-->r2[2.视频内容库]    n4-->r3[3.音乐音效库]    n4-->r4[4.买家秀库]    n4-->r5[5.达人推荐库]    n4-->r6[6.文案话术库]    n4-->r7[7.活动营销库]    n4-->r8[8.私域抓手库]    n4-->r9[9.私域聊单库]    n4-->r10[10.内部SOP库]    %% 分支点 产品的价值</pre><h4 id="内容的五倍分发"><a href="#内容的五倍分发" class="headerlink" title="内容的五倍分发"></a>内容的五倍分发</h4><pre class="mermaid">graph LR    %% s=start  e=end  f= fork n=normal         %% 虚线    f1_帝((五倍分发))        %% 分支点     f1_帝--> f2[1.短图文分发]    f1_帝--> f3[2.私域聊单分发]    f1_帝--> f4[3.短视频分发]    f1_帝--> f5[4.直播带货分发]    f1_帝--> f6[5.长图文分发]    f2-->f7[过段时间分发]    f3-->f7[过段时间分发]    f4-->f7[过段时间分发]    f5-->f7[过段时间分发]    f6-->f7[过段时间分发]</pre><h4 id="内容力的评判标准"><a href="#内容力的评判标准" class="headerlink" title="内容力的评判标准"></a>内容力的评判标准</h4><table><thead><tr><th align="center">分数</th><th align="center">程度</th><th align="center">符合情况</th></tr></thead><tbody><tr><td align="center">1分内容力</td><td align="center">完全没有建立内容库</td><td align="center">没有内容库意识，各个平台都没有沉淀下来内容</td></tr><tr><td align="center">2分内容力</td><td align="center">知道需要建立内容库</td><td align="center">有意识要做内容，也制作和发布过一些内容</td></tr><tr><td align="center">3分内容力</td><td align="center">初步分类建立了内容库</td><td align="center">按照内容库和五倍分发原则运营内容，通过内容已经获得了很多免费流量，变现了闭环，并且至少精通1~2项分发形式</td></tr><tr><td align="center">4分内容力</td><td align="center">已经有完善的内容库 <br> 有很强的内容判别能力</td><td align="center">每一个内容库都已经沉淀了丰富的内容<br> 能够快速地产出符合用户需求的内容，并能够用这些内容获得源源不断的流量与成交</td></tr><tr><td align="center">5分内容力</td><td align="center">成为知名的内容品牌</td><td align="center">精细化、规模化管理运营内容库，精通多项内容分发形式，在本领域占领用户心智，并且留下过现象级传播的内容作品</td></tr></tbody></table><h3 id="获流力：理解TikTok的流量与“留量”"><a href="#获流力：理解TikTok的流量与“留量”" class="headerlink" title="获流力：理解TikTok的流量与“留量”"></a>获流力：理解TikTok的流量与“留量”</h3><pre class="mermaid">graph LRa1((Tiktok流量分类))a1-->b1[免费流量]-->c1[高质量内容.耗费大量人力成本 设备成本 场地成本]b1-->c2[Tiktok希望尽可能提升用户的使用时常.不断优化推荐算法]-->d1[清楚平台期望的内容]a1-->b2[tiktok付费流量]-->c3[ROI-Return on Investment 投入产出比]-->d2[免费流量与付费流量相互配合使用-以内容力为基础动力和燃料-用付费流量作为助燃器-更快速地引爆好内容]a1-->b3[私域流量-留量]-->c4[粉丝经济-二次营销]b3-->c5[筛选 培养 发展忠实用户与超级用户]b3-->c6[增加复购转介绍和升级消费]c4-->d3[精细化运营]c5-->d3[精细化运营]c6-->d3[精细化运营]</pre><h4 id="留量闭环"><a href="#留量闭环" class="headerlink" title="留量闭环"></a>留量闭环</h4><pre class="mermaid">graph LRa1((私域流量循环)) --> a2((免费流量为主)) --> a3((付费流量助推))--> a1</pre><h4 id="获流力的评判标准"><a href="#获流力的评判标准" class="headerlink" title="获流力的评判标准"></a>获流力的评判标准</h4><table><thead><tr><th align="center">分数</th><th align="center">程度</th><th align="center">符合情况</th></tr></thead><tbody><tr><td align="center">1分获流力</td><td align="center">不了解TikTok流量分类</td><td align="center">不知道该如何获取流量</td></tr><tr><td align="center">2分获流力</td><td align="center">了解TikTok流量分类</td><td align="center">尝试过在TikTok上获取流量，但是效果欠佳</td></tr><tr><td align="center">3分获流力</td><td align="center">至少精通1种获取流量的方式</td><td align="center">能够熟练地用这种方式与用户成交，并且有意识将用户沉淀到私域中做二次营销</td></tr><tr><td align="center">4分获流力</td><td align="center">对TikTok的免费流量和付费流量都有体系性的研究和打法</td><td align="center">建立和运营自己的私域流量，使这三种流量形成正向闭环</td></tr><tr><td align="center">5分获流力</td><td align="center">在4分的基础上，能够得到一群高黏性用户的维护与支持</td><td align="center">能源源不断收获新用户</td></tr></tbody></table><h3 id="运营力：加强TikTok流量的承接与成交"><a href="#运营力：加强TikTok流量的承接与成交" class="headerlink" title="运营力：加强TikTok流量的承接与成交"></a>运营力：加强TikTok流量的承接与成交</h3><p>TikTok中的运营力是对流量承接与成交的能力。运营需要懂产品、懂内容、懂流量，最关键的是能够在体系化的基础上与用户成交。如果没有成交，搞再多流量都等于零。<br>老板必须有运营的体系化思维，不能抓着某一个员工就觉得是救命稻草，可以挽救公司。</p><pre class="mermaid">graph LRa1((tiktok成交场景)) --> |直接成交|a2[小黄车]-->b1[减少成交链路降低用户购买难度]-->c1[一般首选]-->d1[用户引导]a1--> |私域聊单成交|a3[照片墙WhatsApp等]-->c2[了解打动用户的产品]-->d2[给出折扣给出链接引导购买]a1--> |主页链接成交|a4[独立站 亚马逊等第三方链接]-->c3[购买步骤较多]-->d3[高产品力运营力内容力]</pre><h4 id="tiktok成交运营六步法"><a href="#tiktok成交运营六步法" class="headerlink" title="tiktok成交运营六步法"></a>tiktok成交运营六步法</h4><p>警惕流量的虚假繁荣，注重完整且能落地的运营方法提高成交效率。</p><pre class="mermaid">graph LRaa((运营成交六步法))a1[CTA 行动指令] --> |行动指令巧妙的放在各个环节|b1[提醒并引导用户购买]a2[秀肌肉和社会责任感]-->|给用户一个说服自己下单的理由|b2[获得信任认可 打消顾虑]a2-->|社会责任|b3[捐赠公益行动等]a3[用真实买家秀引起共鸣]-->|用户不知道买来干什么|b4[分别给不同的用户展示不同的买家秀场景]b4-->c1[这样用不错]b4-->c2[居然可以这样用]a4[价格锚和价值锚占领用户心智]-->|价值锚|b5[让用户从内心认可确实一分钱一分货 反复强调产品价值]a4-->|价格锚|b6[让用户内心认同这个产品很贵值得这个价格 ]a5(现时活动促成交)-->b7[利用损失厌恶心理]a6[一对一降私聊低成交难度]aa-->a1aa-->a2aa-->a3aa-->a4aa-->a5aa-->a6</pre><h4 id="运营力的评判标准"><a href="#运营力的评判标准" class="headerlink" title="运营力的评判标准"></a>运营力的评判标准</h4><table><thead><tr><th align="center">分数</th><th align="center">程度</th><th align="center">符合情况</th></tr></thead><tbody><tr><td align="center">1分运营力</td><td align="center">有成交意识</td><td align="center">但不清楚自己TikTok项目的成交链路闭环</td></tr><tr><td align="center">2分运营力</td><td align="center">已经设定好项目的成交闭环，也初步跑通成交闭环</td><td align="center">但没有精细化运营</td></tr><tr><td align="center">3分运营力</td><td align="center">成熟地跑通成交闭环</td><td align="center">掌握并且能够运用上述“成交运营六步法”中的三种以上</td></tr><tr><td align="center">4分运营力</td><td align="center">拥有一个小有规模的运营团队</td><td align="center">并且规范化、流程化、精细化运营</td></tr><tr><td align="center">5分运营力</td><td align="center">拥有成熟稳定的运营团队</td><td align="center">精通“成交运营六步法”，有高转化成交率</td></tr></tbody></table><h3 id="品牌力-：-建立TikTok品牌资产与壁垒"><a href="#品牌力-：-建立TikTok品牌资产与壁垒" class="headerlink" title="品牌力 ： 建立TikTok品牌资产与壁垒"></a>品牌力 ： 建立TikTok品牌资产与壁垒</h3><p>品牌力需要花很多时间、很多预算以及很多精细化运营的积累慢慢形成，是一个费时费力的事情。但是品牌一旦形成，就会为你形成壁垒，成为资产，你可以一直享受到品牌带来的红利。品牌非常重要，值得我们用十年磨一剑。</p><pre class="mermaid">graph LRaa((品牌))a1[大大提升用户的决策效率]a2[提升产品溢价]a3[提升自然搜索量]a4[提高客户复购率]a5[不做品牌的没有后劲 做品牌的熬不到给项目加成就活不下去了]aa-->a1aa-->a2aa-->a3aa-->a4aa-->a5</pre><p>所有“被动收入”都不是无缘无故的，它的背后要么是呕心沥血的付出和积累，要么是巨大的风险</p><h4 id="建立品牌六要素"><a href="#建立品牌六要素" class="headerlink" title="建立品牌六要素"></a>建立品牌六要素</h4><pre class="mermaid">graph LRaa((品牌))a1[产品口碑]-->b1[质量是顾客忠诚的最好保证]-->c1[兼顾产品品质和利润空间]-->d1[留存品牌预算]a2[特色鲜明的IP]-->b2[真人IP提升产品溢价和粉丝粘性]a3[深入人心的内容沉淀]-->b3[共情心理  占领用户心智 拉近用户距离]-->c2[笑点 泪点 爽点 启发点]-->d2[一般笑点和爽点容易引发用户点赞和转发]c2-->d3[泪点和启发点更容易引发收藏和评论 并默默下单]-->e1[弥补遗憾]a4[服务感  体验感  交付感]-->b4[售前成交]-->c3[售后体验]-->d4[顾客为商品的价值感付费]a5[触达用户的广度  深度  持续程度]-->b5[在最开始做一件事时   不会一下子就能获得别人的信任]-->c4[但只要能坚持  即使是很小的事情  也会因为你坚持了这么久而获得信任]a6[品牌名 LOGO 页面装饰]-->b6[在品牌路上需花心思做好]-->c5[时间越长效果的差距越明显]a6-->|品牌名|b7[好的品牌名能深入人心]-->c6[追求画面感加有意思的形象]aa-->a1aa-->a2aa-->a3aa-->a4aa-->a5aa-->a6</pre><h4 id="品牌力的评判标准"><a href="#品牌力的评判标准" class="headerlink" title="品牌力的评判标准"></a>品牌力的评判标准</h4><table><thead><tr><th align="center">分数</th><th align="center">程度</th><th align="center">符合情况</th></tr></thead><tbody><tr><td align="center">1分品牌力</td><td align="center">没有品牌力，没有品牌意识</td><td align="center">没有品牌名和其他品牌设定</td></tr><tr><td align="center">2分品牌力</td><td align="center">有品牌名和LOGO，也有计划地沉淀品牌力</td><td align="center">但暂时看不到品牌的沉淀效果</td></tr><tr><td align="center">3分品牌力</td><td align="center">有完整的品牌战略</td><td align="center">并且达到了上述品牌六要素中的三点以上</td></tr><tr><td align="center">4分品牌力</td><td align="center">成为TikTok在本赛道的大IP</td><td align="center">用户在TikTok搜索产品关键词时可以排名前三，并且成为本赛道其他新账号的对标对象</td></tr><tr><td align="center">5分品牌力</td><td align="center">成为行业品牌变现顶流</td><td align="center">品牌词搜索量达到行业顶尖，并成为品牌商业案例</td></tr></tbody></table><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    </pre></div>]]></content>
      
      
      <categories>
          
          <category> 跨境电商 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tiktok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tiktok申请及注册流程</title>
      <link href="/2023/10/02/tiktok%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E5%90%AF%E5%8F%B7%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/10/02/tiktok%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E5%90%AF%E5%8F%B7%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="✍tiktok账号"><a href="#✍tiktok账号" class="headerlink" title="✍tiktok账号"></a>✍tiktok账号</h2><h4 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h4><pre><code>   不要轻视tiktok 的下载安装和注册环节，否则一旦封号一切努力就白费了。   正规服务器 + 美国正规真机托管服务 + 用电脑操作云手机模式    《TikTok下载注册保姆级SOP教程》将三种不同的下载注册方式都标注在上面了，不管你是新手个体，还是公司企业，都能够在上面找到适合你的解决方案。由于TikTok处在调整期，政策和操作细节随时都在调整和改变，所以每个月这个教程会进行一次最新的校对修改。    </code></pre><h2 id="账号名称"><a href="#账号名称" class="headerlink" title="账号名称"></a>账号名称</h2><p>账号名称推荐使用： 品牌名 + 品类名 便于关联用户搜索关键词 、加强品牌力</p><h2 id="账号简介"><a href="#账号简介" class="headerlink" title="账号简介"></a>账号简介</h2><p>简介部分能够很好的减少交易链路，影响用户后续的行为。</p><p>推荐格式： 我是谁 + 我是做什么的&#x2F;我有多厉害 + 行动指令【 即】 是什么 + 为什么 + 怎么办</p><ul><li>引导用户直接购买 ：点击下方链接进行购买&#x2F;点击下方链接购买可享受50%的折扣等</li><li>引导用户进入私域：点击我的照片墙免费获得礼物&#x2F;点击下方链接获得xxx等</li></ul><h2 id="账号类型的选择"><a href="#账号类型的选择" class="headerlink" title="账号类型的选择"></a>账号类型的选择</h2><p>将个人账号设置为Business Account （商家账号）：可以挂链接和看视频的详细数据     </p><ul><li>看数据：注意完播率，完播率是检验账号标签和视频质量的最重要因素，完播率高的作品会根据用户画像再投入一点Promote（抖+）来助推以引爆新一轮的增长。</li><li>对内容的持续输出不能是盲目的，更不能只感动自己。</li><li>每个作品都需要进行数据分析，并根据分析结果继续调整内容，这样才是有针对性的调整，更能事半功倍。</li></ul><h2 id="账号在tiktok内的标签"><a href="#账号在tiktok内的标签" class="headerlink" title="账号在tiktok内的标签"></a>账号在tiktok内的标签</h2><p>刷视频的时候多看看本行业竞争对手的情况：</p><ul><li>可以为账号打上这个行业的兴趣标签</li><li>For You会给你推介那更多的同类视频，多看看本行业做得号的账号，学习对标他们的长处</li><li>培养和提升网感</li></ul>]]></content>
      
      
      <categories>
          
          <category> 跨境电商 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tiktok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参考案例</title>
      <link href="/2023/10/02/%E5%8F%82%E8%80%83%E6%A1%88%E4%BE%8B/"/>
      <url>/2023/10/02/%E5%8F%82%E8%80%83%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="✍私域"><a href="#✍私域" class="headerlink" title="✍私域"></a>✍私域</h2><p>私域肖厂长–&gt; 私域内容九库 –&gt;五倍分发法则</p><h2 id="👔大神"><a href="#👔大神" class="headerlink" title="👔大神"></a>👔大神</h2><p>剽悍一只猫【公众号】——个人品牌顾问<br>肖逸群 —— 私域肖厂长【公众号】——肖逸群Alex【抖音】<br>钦文——钦文和他的朋友们【公众号】<br>孟慧歌——高价成交孟慧歌【公众号】<br>高海波——高海波Leo【公众号】<br>少帅——少帅新变现【公众号】</p>]]></content>
      
      
      <categories>
          
          <category> 跨境电商 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>域名商</title>
      <link href="/2023/10/02/%E5%9F%9F%E5%90%8D%E5%95%86/"/>
      <url>/2023/10/02/%E5%9F%9F%E5%90%8D%E5%95%86/</url>
      
        <content type="html"><![CDATA[<h2 id="✍内容"><a href="#✍内容" class="headerlink" title="✍内容"></a>✍内容</h2><ol><li><p><a href="https://nic.eu.org/">EU.org：自1996年以来的免费域名 (nic.eu.org)</a>主要目标是为无法负担某些 NIC 要求的费用的用户或非营利组织提供免费的子域注册<br><strong>使用方法</strong>：<a href="https://zhuanlan.zhihu.com/p/420581737">十分钟申请免费永久域名—捕梦小达人 - 知乎 (zhihu.com)</a><br><strong>优点</strong>：免费</p></li><li><p><a href="https://www.namesilo.com/?rid=388c398kg">Cheap Domain Names &amp; Web Hosting Starting at $0.99! | NameSilo</a>NameSilo在业内并非非常有名，不过确实是非常优秀，他们是一级域名代理商，价格实际上是最便宜的，也是我们极力推荐的一家<br> <strong>优点</strong>：</p></li></ol><ul><li>实际全网最低价，8.99美金&#x2F;年，续费价格不变</li><li>没有附加和隐藏费用比如ICANN操作费等，以及无不断推荐额外的辅助类产品</li><li>免费终身的WHOIS隐私保护</li><li>免费DNSSEC安全保护，避免域名dns受到污染，</li><li>注册域名三天内可自主取消域名，无需联系客服或开工单</li><li>支持支付宝，微信和银联<br><strong>NameSilo 缺点</strong>:</li><li>操作面板相对陈旧，但据他们的最新消息，新的操作面板正在制作更新之中<br>使用方法：<a href="https://www.qingsongb2c.com/5-domain-name-registrars/">国外5+个常用的域名注册商 | 青松跨境B2C (qingsongb2c.com)</a></li></ul><ol><li><a href="https://www.namecheap.com/">Buy a domain name - Register cheap domain names from $0.99 - Namecheap</a>NameCheap那可是一家非常热门的域名注册商，比NameSilo有知名度多了，他们的价格也是非常的低，而且近年来他们的主机业务也发展的很好，已经不是一家纯粹的域名商了。<br><strong>NameCheap 优点：</strong></li></ol><ul><li>价格低，首次注册是8.88美金&#x2F;年加一点ICANN手续费，总共是9.06美金&#x2F;年，价格很不错的，续费也不高，10.56美金&#x2F;年</li><li>免费终身的WHOIS隐私保护</li><li>注册域名三天内可取消域名</li></ul><p><strong>NameCheap 缺点:</strong></p><ul><li>附加ICANN手续费，虽然不多</li><li>需付费获取DNSSEC安全</li></ul><ol><li><a href="https://domains.squarespace.com/">Squarespace Domains — Domain Name Search — Register Your Domain Name</a>（原Google domain被收购）<br>大谷歌也是有自己专门的域名服务的，而且还很不错，除了单价比NameSilo稍微高一点点，其他基本和NameSilo一样。Google domains的新.com域名是12美金&#x2F;年，续费一样</li></ol><p><strong>Google Domains优点：</strong></p><ul><li>没有附加和隐藏费用比如ICANN操作费等，以及无不断推荐额外的辅助类产品</li><li>免费终身的WHOIS隐私保护</li><li>免费DNSSEC安全保护，避免域名dns受到污染，</li><li>注册域名三天内可取消域名</li><li>后台面板灰常友好人性化</li></ul><p><strong>Google Domains 缺点:</strong></p><ul><li>只支持Google pay和信用卡支付<br><a href="https://www.domain.com/">Website Domain Names, Online Stores &amp; Hosting | Domain.com</a><br><strong>Domain.com优点：</strong></li><li>如果你在他们家购买主机的话，他们免费提供第一年域名注册，不过要使用优惠券DOMFREE</li><li>根据我联系他们客服取消域名的经历，他们支持注册后5天之内退款</li><li>后台面板灰常友好人性化<br><strong>Domain.com 缺点:</strong></li><li>额外的WHOIS费用</li><li>需付费获取DNSSEC安全<br>Domain.com虽然是以域名注册起家，现在也和NameCheap一样提供主机，购买他们的主机你能获得一年免费的域名使用，不过他们就是额外费用比较多，其实其实价格都不高，.com的价格也就是9.99美金一年，续费11.49美金&#x2F;一年，但是加上WHOIS费用就要17.99美金一年，WHOIS隐私保护还是有必要的，不然处理垃圾邮件都够了。</li></ul><p><a href="https://www.godaddy.com/zh-sg">域名注册购买,云服务器,建站,企业邮箱和网站安全-GoDaddy官方中文站</a>Godaddy绝对是最大的域名注册商，然而也是套路最深的域名商。</p><p><strong>Godaddy优点：</strong></p><ul><li>首次购买两年域名的话第一年能获得挺大优惠</li><li>最流行最大的域名商，如果这也算是优点的话</li></ul><p><strong>Godaddy缺点:</strong></p><ul><li>额外的WHOIS费用</li><li>需付费获取DNSSEC安全</li><li>套路满满，看我接下来细说</li></ul><p>在狗爹上注册域名，以.com为例，我是真的不知道他们的具体价格，反正每次都不一样，我大致说一下吧，第一次注册新域名，如果你任何附加功能都不购买的话，就一个裸域名，价格大致是在160软妹币两年，也不算很贵，但加上whois费用的话就不一样了，有时候你订购域名好像包含了基础whois隐私保护，有时候又好像不包含，反正没用NameSilo和google domains之前，我一般会把域名从狗爹转移到主机商。</p>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名申请 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电力电子技术笔记</title>
      <link href="/2023/10/02/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/10/02/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="✍电能变换基本类型"><a href="#✍电能变换基本类型" class="headerlink" title="✍电能变换基本类型"></a>✍电能变换基本类型</h2><ul><li>整流器——AC&#x2F;DC——交流&#x2F;直流变换：控制简单，运行可靠，适合大功率应用，相控整流器存在的问题是有谐波，对电网有较严重的影响。</li><li>逆变器——DC&#x2F;AC——直流&#x2F;交流变换</li><li>交-交变频器或交流调压器——AC&#x2F;AC——交流&#x2F;交流变换</li><li>直流斩波器——DC&#x2F;DC——按输出电压与输入电压的相对关系可分为降压式、升压式和升降压式</li></ul><h3 id="🍇-电力电子变流电路的控制方式"><a href="#🍇-电力电子变流电路的控制方式" class="headerlink" title="🍇 电力电子变流电路的控制方式"></a>🍇 电力电子变流电路的控制方式</h3><ol><li>🍄<strong>相控式</strong>：器件的开通信号相位受控于控制信号幅度的变化</li><li>🥞<strong>频控式</strong>：用控制电压的幅值变化来改变器件开关信号的频率，以实现器件开关工作频率的控制</li><li>🌮<strong>斩控式</strong>：器件以远高于输入、输出电压工作频率的开关频率运行，利用控制电压（即调制电压）的幅值来改变一个开关周期中器件导通占空比，如PWM，从而实现电能的变换与控制。</li></ol><h2 id="🐱电力电子器件"><a href="#🐱电力电子器件" class="headerlink" title="🐱电力电子器件"></a>🐱电力电子器件</h2><h3 id="🪒功率二极管"><a href="#🪒功率二极管" class="headerlink" title="🪒功率二极管"></a>🪒功率二极管</h3><ul><li>在PN结的P型端引出的电极称为阳极A（Anode），在N型端引出的电极称为阴极K（Cathode） —— A&#x3D;太阳 ，K&#x3D;地面上的杆子被太阳照出阴影</li><li>受到正向电压作用时，PN结导通，正向管压降很小；当受到反向电压作用时，PN结截止，仅有极小的漏电流流过二极管<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230918211055.png"></li></ul><p><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230918211206.png"></p><h4 id="伏安特性"><a href="#伏安特性" class="headerlink" title="伏安特性"></a>伏安特性</h4><p><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230918211420.png"></p><h4 id="🍄主要参数"><a href="#🍄主要参数" class="headerlink" title="🍄主要参数"></a>🍄主要参数</h4><ol><li><strong>正向平均电流I<sub>D</sub>（AV）（额定电流）</strong>：规定的环境温度和标准散热条件下，管子允许长期通过的最大工频半波电流的平均值</li><li><strong>正向压降U<sub>D</sub>（管压降）</strong>: 规定温度下，流过某一稳定正向电流时所对应的正向压降</li><li><strong>反向重复峰值电压U<sub>RRM</sub>（额定电压）</strong>: 在额定结温条件下，元件反向伏安特性曲线的转折处对应的反向电压称为反向不重复峰值电压URSM，URSM的80%称为反向重复峰值电压URRM（额定电压），它是功率二极管能重复施加的反向最高电压。一般在选用功率二极管时，以其在电路中可能承受的反向峰值电压的两倍来选择额定电压。</li><li><strong>反向恢复时间</strong>: 功率二极管从正向电流降至零起到恢复反向阻断能力为止的时间。</li></ol><h4 id="🍒功率二极管的选择原则"><a href="#🍒功率二极管的选择原则" class="headerlink" title="🍒功率二极管的选择原则"></a>🍒功率二极管的选择原则</h4><ul><li><strong>选择正向平均电流I<sub>D</sub>（AV）原则</strong>： 在规定的室温和冷却条件下，要求所选管子的额定电流I<sub>D</sub>（AV）对应的有效值I<sub>D</sub>M大于管子在电路中实际可能通过的最大电流有效值I<sub>D </sub>m —— I<sub>D </sub>M&gt;I<sub>D </sub>m<br>I<sub>D </sub>M &#x3D; &gt; I<sub>D </sub>m &#x3D;&gt; $I_D(AV)&#x3D;(1.5\sim 2)\frac{I_{DM}}{1.57}$ &#x3D;&gt; I<sub>D(AV)</sub> &#x3D;&gt; 取相应标准系列值</li><li><strong>选择额定电压U<sub>RRM</sub>原则</strong>：U<sub>RRM</sub>&#x3D;（2～3）U<sub>DM</sub> ，U<sub>DM</sub> 为电路中功率二极管可能承受的最大反向电压 &#x3D;&gt; 取相应标准系列值</li></ul><h4 id="功率二极管的主要类型"><a href="#功率二极管的主要类型" class="headerlink" title="功率二极管的主要类型"></a>功率二极管的主要类型</h4><ol><li><strong>普通功率二极管</strong>：开关频率不高的整流电路，反向恢复时间较长，正向电流定额和反向电压定额可以达到数千安和数千伏以上</li><li><strong>快恢复二极管</strong>：一般在5μs以内，适于高频电路</li><li><strong>肖特基二极管</strong>：以金属和半导体接触形成的势垒为基础的二极管，低导通电压和极短的开关时间，开关损耗、正向导通损耗比快恢复二极管要小，反向漏电流大和阻断电压低，适于高频、低压电路</li></ol><h3 id="🗼晶闸管"><a href="#🗼晶闸管" class="headerlink" title="🗼晶闸管"></a>🗼晶闸管</h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电力电子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次部署开源ChatGLM-6B纪实</title>
      <link href="/2023/10/02/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%83%A8%E7%BD%B2%E5%BC%80%E6%BA%90ChatGLM-6B%E7%BA%AA%E5%AE%9E%20/"/>
      <url>/2023/10/02/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%83%A8%E7%BD%B2%E5%BC%80%E6%BA%90ChatGLM-6B%E7%BA%AA%E5%AE%9E%20/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：部署过程超级简单 !!!!</strong></p><p><strong>进入github</strong> <a href="https://link.zhihu.com/?target=https://github.com/THUDM/ChatGLM-6B">THUDM&#x2F;ChatGLM-6B: ChatGLM-6B: An Open Bilingual Dialogue Language Model | 开源双语对话语言模型 (github.com)</a></p><p><img src="https://pic4.zhimg.com/v2-8bc15e232f66eafe93a97568f5c583b7_b.jpg"></p><p>下拉至READEME.md，查看文档。</p><p><img src="https://pic1.zhimg.com/v2-5c9150742912807038707058d3cc50a8_b.jpg"></p><p>可以选用git bash 本地运行 git clone <a href="https://link.zhihu.com/?target=https://huggingface.co/THUDM/chatglm-6b">THUDM&#x2F;chatglm-6b · Hugging Face</a></p><p>也可使用一键打包下载</p><p><img src="https://pic4.zhimg.com/v2-c3d8c4c945bf97554ce007ea793b80cb_b.jpg"></p><p><strong>遇到报错：</strong>没有cuda</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common\\cudart64\_30\_9.dll: undefined symbol: cudaDeviceGetAttribute</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><p><a href="https://link.zhihu.com/?target=https://github.com/THUDM/ChatGLM-6B/issues/23">调用的dll中发生错误 · Issue #23 · THUDM&#x2F;ChatGLM-6B (github.com)</a></p><p><a href="https://link.zhihu.com/?target=https://blog.csdn.net/Jin1Yang/article/details/124754015">(17条消息) 【Windows11】Cuda和Cudnn详细安装教程_Jin·的博客-CSDN博客</a></p><p><strong>解决完毕，刷新后运行：</strong></p><p><img src="https://pic4.zhimg.com/v2-ea397afd96380d991e5d10190f3c5c73_b.jpg"></p><p><strong>再次遇到报错：</strong>Torch无法启用cuda进行编译</p><p>AssertionError: Torch not compiled with CUDA enabled</p><p><img src="https://pic2.zhimg.com/v2-18e2184413c245b53ebc5801dabe73e9_b.jpg"></p><p>怀疑是cuda和torch版本可能不匹配，测试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测cuda是否可用</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)<span class="comment">#torch版本</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())<span class="comment">#是否可用</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-053c062a8668f0a9f3425983f4f31480_b.jpg"></p><p>出现以下情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Reloaded modules: transformers_modules, transformers_modules.THUDM, transformers_modules.THUDM.chatglm-6b, transformers_modules.THUDM.chatglm-6b.a10da4c68b5d616030d3531fc37a13bb44ea814d, transformers_modules.THUDM.chatglm-6b.a10da4c68b5d616030d3531fc37a13bb44ea814d.tokenization_chatglm, transformers_modules.THUDM.chatglm-6b.a10da4c68b5d616030d3531fc37a13bb44ea814d.configuration_chatglm, transformers_modules.THUDM.chatglm-6b.a10da4c68b5d616030d3531fc37a13bb44ea814d.modeling_chatglm</span><br><span class="line"><span class="number">2.0</span><span class="number">.1</span>+cpu</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>版本是2.0.1，出现False,说明二者不兼容——torch是cpu的版本。</p><p><strong>安装cuda版本Pytorch：</strong></p><p>卸载不合适的Pytorch</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall torch</span><br><span class="line"></span><br><span class="line">Uninstalling torch-<span class="number">2</span>.<span class="number">0</span>.<span class="number">1</span>:</span><br><span class="line">  Would remove:</span><br><span class="line"><span class="function">    c:\<span class="title">users</span>\11298\<span class="title">appdata</span>\<span class="title">local</span>\<span class="title">programs</span>\<span class="title">python</span>\<span class="title">python311</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">functorch</span>\*</span></span><br><span class="line"><span class="function">    <span class="title">c</span>:\<span class="title">users</span>\11298\<span class="title">appdata</span>\<span class="title">local</span>\<span class="title">programs</span>\<span class="title">python</span>\<span class="title">python311</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">torch</span>-2.0.1.<span class="title">dist</span>-<span class="title">info</span>\*</span></span><br><span class="line"><span class="function">    <span class="title">c</span>:\<span class="title">users</span>\11298\<span class="title">appdata</span>\<span class="title">local</span>\<span class="title">programs</span>\<span class="title">python</span>\<span class="title">python311</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">torch</span>\*</span></span><br><span class="line"><span class="function">    <span class="title">c</span>:\<span class="title">users</span>\11298\<span class="title">appdata</span>\<span class="title">local</span>\<span class="title">programs</span>\<span class="title">python</span>\<span class="title">python311</span>\<span class="title">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">torchgen</span>\*</span></span><br><span class="line"><span class="function">    <span class="title">c</span>:\<span class="title">users</span>\11298\<span class="title">appdata</span>\<span class="title">local</span>\<span class="title">programs</span>\<span class="title">python</span>\<span class="title">python311</span>\<span class="title">scripts</span>\<span class="title">convert</span>-<span class="title">caffe2</span>-<span class="title">to</span>-<span class="title">onnx.exe</span></span></span><br><span class="line"><span class="function">    <span class="title">c</span>:\<span class="title">users</span>\11298\<span class="title">appdata</span>\<span class="title">local</span>\<span class="title">programs</span>\<span class="title">python</span>\<span class="title">python311</span>\<span class="title">scripts</span>\<span class="title">convert</span>-<span class="title">onnx</span>-<span class="title">to</span>-<span class="title">caffe2.exe</span></span></span><br><span class="line"><span class="function">    <span class="title">c</span>:\<span class="title">users</span>\11298\<span class="title">appdata</span>\<span class="title">local</span>\<span class="title">programs</span>\<span class="title">python</span>\<span class="title">python311</span>\<span class="title">scripts</span>\<span class="title">torchrun.exe</span></span></span><br><span class="line"><span class="function"><span class="title">Proceed</span> (<span class="title">Y</span>/<span class="title">n</span>)? <span class="title">Y</span></span></span><br><span class="line"><span class="function">  <span class="title">Successfully</span> <span class="title">uninstalled</span> <span class="title">torch</span>-2.0.1</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-f4e427ba8bf8964bb644de4e3181954c_b.jpg"></p><p>版本对应顺序：Python版本 -&gt; Pytorch版本 -&gt; Cuda版本</p><p>查看python版本 我的是 3.11.3</p><p><img src="https://pic1.zhimg.com/v2-68866b4f9d3eb017fed9abed81d69e24_b.jpg"></p><p>下载对应python版本的Pytorch 网址： <a href="https://link.zhihu.com/?target=https://pytorch.org/">PyTorch</a></p><p><img src="https://pic4.zhimg.com/v2-bb47a6e47be1a5e0c47187a97893885b_b.jpg"></p><p>选择适合自己硬件的torch版本，我装了最新的cuda 12.1</p><p><img src="https://pic3.zhimg.com/v2-61005a16a73d682c6724dc052f85a3c6_b.jpg"></p><p><img src="https://pic2.zhimg.com/v2-bc85325b5a825af24210ff695979ef45_b.jpg"></p><p>复制pip3代码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu121</span><br></pre></td></tr></table></figure><p>win+r -&gt; cmd 运行</p><p><img src="https://pic4.zhimg.com/v2-78a97565f1d1f6d1673d88d6f6edfde7_b.jpg"></p><p>以前将 python 装在 c 盘，直接给我来了个 c 盘刺客</p><p><img src="https://pic1.zhimg.com/v2-fb4418d3736f94d28b93d4dfd74244e0_b.jpg"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#安装完成</span><br><span class="line">Successfully installed torch-<span class="number">2</span>.<span class="number">1</span>.<span class="number">0</span>.dev20230515+cu121 torchaudio-<span class="number">2</span>.<span class="number">1</span>.<span class="number">0</span>.dev20230516+cu121 torchvision-<span class="number">0</span>.<span class="number">16</span>.<span class="number">0</span>.dev20230515+cu121</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/v2-66928b819850a3c8b40d200e25c2b75b_b.jpg"></p><p>在spyder中重启内核后运行检测torch是否有效的代码</p><p><img src="https://pic4.zhimg.com/v2-46185874071e37cec518f332d97282a7_b.jpg"></p><p>显示True !!! ，可以愉快的玩耍了！！！</p><p>运行一下 ChatGLM-6B-main 内的 web_demo.py #这是通过网页调用</p><p><img src="https://pic4.zhimg.com/v2-2c9390fbdd2df846ad4c7dc6c6208cc3_b.jpg"></p><p>运行完毕后自动跳出网页</p><p><img src="https://pic2.zhimg.com/v2-93a875deb361d8c7a918f57470b57345_b.jpg"></p><p>可以看出运行在本地 127.0.0.1:7860 上</p><p>尝试向它问个好，再看看gpu占用</p><p><img src="https://pic4.zhimg.com/v2-8fcaddfc203656f23ce62afc8be1eabf_b.jpg"></p><hr><p><strong>补充</strong></p><p>cuda不兼容的情况——解决方法：安装合适的cuda</p><p>打开桌面右下角“英伟达设置”，查看驱动程序版本</p><p><img src="https://pic4.zhimg.com/v2-c60d45e1d7d50072b3b14019e3865e17_b.jpg"></p><p>点击系统信息</p><p><img src="https://pic3.zhimg.com/v2-8c56ee3e46b95eb3699a4dd8253c96d6_b.jpg"></p><p>查看驱动版本，进入 <a href="https://link.zhihu.com/?target=https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html</a> 查看对应cuda</p><p><img src="https://pic3.zhimg.com/v2-4fc62896b31d4e0de91a129196b54cc6_b.jpg"></p><p>进入cuda官网 <a href="https://link.zhihu.com/?target=https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=11&target_type=exe_local">CUDA Toolkit 12.1 Update 1 Downloads | NVIDIA Developer</a> ，找到 Archive of Previous CUDA Releases</p><p><img src="https://pic2.zhimg.com/v2-1250471f32d69d136264bade48c72829_b.jpg"></p><p>点击需要的版本下载</p><p><img src="https://pic2.zhimg.com/v2-edf5e4ecd46e871f01b4bb18830a03d1_b.jpg"></p><p>下载完成后点击安装</p><p><img src="https://pic2.zhimg.com/v2-c7c81924c9e5ff94bc7ac417ab99c9c5_b.jpg"></p><p>加载<br><img src="https://pic4.zhimg.com/v2-910d5da6adf4cf96884726d577cc0073_b.jpg"></p><p>加载完毕后选择<strong>精简版</strong>即可</p><p>最后尝cmd 输入以下 看一下是否安装成功，如果出现cuda版本就成功安装</p>]]></content>
      
      
      <categories>
          
          <category> 开源ai模型 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理</title>
      <link href="/2023/10/02/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/02/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-偏好与选择"><a href="#第二章-偏好与选择" class="headerlink" title="第二章 偏好与选择"></a>第二章 偏好与选择</h1><h2 id="2-1-幸福与价值"><a href="#2-1-幸福与价值" class="headerlink" title="2.1 幸福与价值"></a>2.1 幸福与价值</h2><p>人的最终目的是幸福，直接服务于这个最终目的是手段。<br><strong>幸福</strong>：个人的全面发展，既包括个人生理性欲望和社会性欲望的满足，也包括个人潜能的开发。<br><strong>幸福</strong>是一个主观观念，幸福需要物质支撑</p><h3 id="2-1-1-目的与手段"><a href="#2-1-1-目的与手段" class="headerlink" title="2.1.1 目的与手段"></a>2.1.1 目的与手段</h3><ul><li><strong>假说1</strong>：人的行动是有目的的，行动只是实现某种目的的手段，没有目的的行动是不存在的。</li></ul><h3 id="2-1-2-幸福的时间维度和空间维度"><a href="#2-1-2-幸福的时间维度和空间维度" class="headerlink" title="2.1.2 幸福的时间维度和空间维度"></a>2.1.2 幸福的时间维度和空间维度</h3><ol><li>👔<strong>幸福的时间维度</strong>：<br>一般来说，越是理性的人，越是注重行动的长远后果。<br>正是由于人们追求的是一生的幸福，而非短期的快乐，人们才愿意选择“先苦后甜”的生活方式。<br>正因为如此，人们才有可能为了一个好名声而牺牲眼前利益，愿意帮助他人，讲诚信，讲道德，而不是采取损人利己的机会主义行为。</li></ol><p>😅<strong>人类有一个基本的倾向</strong>：对未来的、远处的东西看得轻，对眼前的、近处的东西看得重</p><p>🐒<strong>时间贴现</strong><br><strong>时间贴现</strong>：偏向目前本性所作决策对未来收入、幸福产生负面影响。<br><strong>贴现因子</strong>：下一期的单位收入相当于目前收入的数值。<br><strong>贴现率</strong>：目前单位收入比下一期单位货币折现到当前多出的比率。<br><strong>贴现因子与贴现率关系</strong>：一个人越看重未来，贴现因子越大，对应贴现率越小；反之亦然。<br><strong>贴现公式</strong>：<br>$$ σ &#x3D; \dfrac{1}{1+r} $$<br>r：贴现率<br>σ：贴现因子</p><ol><li>🍇<strong>幸福的空间维度</strong>：<br>人的幸福维度取决于多因素。<br>幸福维度：心理、社会、精神、物质财富。</li></ol><h3 id="2-1-3-价值"><a href="#2-1-3-价值" class="headerlink" title="2.1.3 价值"></a>2.1.3 价值</h3><p><strong>经济学上讲的价值</strong>：对实现目中目的的贡献的度量。<br><strong>价值</strong>：对幸福这一最终目标的边际贡献。<br>一个物品或行动的价值量是由其对幸福的边际贡献决定的。如果一件物品或一个行动能增加人的幸福感，我们就说它是有价值的，否则，就是没有价值的。<br><strong>边际贡献</strong>：指工具变量（物品或行动）变化一个单位会对目的变量造成的影响；没有影响：边际贡献 （价值）&#x3D; 0 ，反之对生活产生影响，则价值为正，边际贡献为正，是<strong>稀缺品</strong>（价值＞0）。<br>幸福是一种主观判断，因而<strong>价值也是一个主观概念，所以同样的物品或行动对不同的人具有不同的价值。</strong></p><h2 id="2-2-个人偏好和约束条件"><a href="#2-2-个人偏好和约束条件" class="headerlink" title="2.2 个人偏好和约束条件"></a>2.2 个人偏好和约束条件</h2><p>🧍‍♂️<strong>偏好</strong>：对某种物品或行动的喜爱或厌恶倾向，某样东西可满足人的某种欲望。<br><strong>人类的缺陷:</strong> 更重视看得见的东西，倾向于关注结果，忽略过程的价值。</p><h3 id="2-2-1-功利主义幸福观"><a href="#2-2-1-功利主义幸福观" class="headerlink" title="2.2.1 功利主义幸福观"></a>2.2.1 功利主义幸福观</h3><p>现在的主流经济学仍然建立在功利主义的基础上。<br><strong>含义</strong>：人们追求的是情感和欲望的满足。(趋利避害 ：最大化个人的快乐、最小化个人的痛苦)<br><strong>个人功利主义</strong>：个体选择某种手段追求效用最大化。手段的价值，完全由其对个人效用的贡献决定。<br><strong>社会功利主义</strong>：社会的目的是社会总福利的最大化。<br><strong>功利主义完全是后果主义的</strong>：结果比动机手段更重要。只要目的正当，任何手段都是正当的。<br><strong>社会功利主义弊端</strong>：忽视个人的基本权利，为专制主义和集体主义提供借口。<br><strong>权力主义</strong>：个体的基本权利必须得到尊重，任何以“集体利益”的名义剥夺个人权利的行为都是不正当的，目的的正当性不能证成手段的正当性。<br><strong>经济学认为，如果一个人是理性的，他的偏好必须满足两个公理，即完备性公理和一致性公理。</strong></p><p><strong>完备性公理</strong>： 任何两个可选择的方案之间都是可以比较的。<br><strong>一致性公理（传递性公理）</strong>：如果一个人认为A比B要好，B比C要好，一定会认为A比C要好。如果不满足这个假设，认为A比B好、B比C好，但又认为C比A好，说明这个人不理性。<br><strong>偏好的主观性维度</strong>：生理、心理、家庭出身、社会环境、个人经验、观念、哲学、意识形态等。<br><strong>经济学对偏好分析的缺陷</strong>：不分析人的偏好是如何形成和变化的。</p><h3 id="2-2-2-效用函数"><a href="#2-2-2-效用函数" class="headerlink" title="2.2.2 效用函数"></a>2.2.2 效用函数</h3><ul><li><strong>效用</strong>：偏好满足程度的度量。</li><li><strong>效用函数</strong>：$u（x）$，自变量代表商品组合变量<br>偏好与满足偏好的手段之间的关系，表明消费变化如何影响所带来的价值量变化。</li></ul><p>✍️$u（A）&#x3D;4，u（B）&#x3D;2$，表示消费者偏好于组合A而不是组合B，并不表示A的效用是B的效用的2倍。<strong>效用函数值是序数（ordinal）概念，而不是基数（cardinal）概念</strong>。</p><p>设想只有酒和面包两种消费品，一个酗酒成性的人，只要组合A比B有更多酒，A就严格好于B，而不论A和B中的面包为多少；只有当两个组合具有同等数量的酒时，他才偏好于包含更多面包的组合。</p><h3 id="2-2-3-边际效用递减法则"><a href="#2-2-3-边际效用递减法则" class="headerlink" title="2.2.3 边际效用递减法则"></a>2.2.3 边际效用递减法则</h3><ul><li><p><strong>边际效用</strong>：增加一单位产品的消费所带来的效用的增量。<br>大部分商品消费量饱和前，人们总偏好于较多的消费量，随着消费量增加，人们对再增加的一单位消费的欲望随之降低。新增加一单位消费所增加的效用会小于前一单位消费所增加的效用。</p></li><li><p><strong>边际效用递减法则</strong>：随着消费量的增加，产品的边际效用递减。</p></li></ul><p>人们在做选择时，总先满足最迫切的用途，再满足次迫切的用途，最后再满足不迫切的用途。如果生活中只有一盆水，首先保证饮用数量，水的数量继续增多，可用来洗脸，再多一些，可用来洗澡、洗衣服，再多一些就可以用来浇花园。理性人不会把仅有的一瓶水拿去浇花园。这就是边际效用递减法则的行为学基础。</p><p>如果一种商品可以低成本地大量生产，一定不稀缺，所以它的价格也卖得很低。</p><ul><li><strong>效用的不可加总性</strong>：效用是主观的，效用值也具有任意性，不同人之间的效用不可比较，因而是不可加总的。</li></ul><h3 id="2-2-4-选择的约束条件："><a href="#2-2-4-选择的约束条件：" class="headerlink" title="2.2.4 选择的约束条件："></a>2.2.4 选择的约束条件：</h3><p><strong>技术性约束</strong>：技术上不可能。（时间、永动机、长生不老）<br><strong>制度性约束</strong>：人类通过制度规则对自己施加约束。（产权、机票、收入） <u>制度本身来自技术约束。</u><br><strong>道德性约束</strong>：人类通过道德规则施加的约束。<br><strong>信息约束</strong>： 缺乏足够的信息而带来的约束。</p><h2 id="2-3-鲁滨孙经济学"><a href="#2-3-鲁滨孙经济学" class="headerlink" title="2.3 鲁滨孙经济学"></a>2.3 鲁滨孙经济学</h2><h3 id="2-3-1-劳动与休闲之间的选择"><a href="#2-3-1-劳动与休闲之间的选择" class="headerlink" title="2.3.1 劳动与休闲之间的选择"></a>2.3.1 劳动与休闲之间的选择</h3><p><strong>鲁滨逊经济</strong>：生产者和消费者合二为一的个体经济，没有交换介入。<br><strong>休闲</strong>：能够直接带来快乐的时间（当然在现实中，劳动和休闲很难严格区分）<br><strong>技术约束</strong>：时间有限（劳动、休息、休闲)<br><strong>边际成本</strong>：增加一单位产品的生产（或消费）所付出的代价或放弃的收益。<br><strong>边际成本递增原因：</strong></p><ol><li>随着产量的增加，采摘更多的椰子变得越来越困难（理性的鲁滨孙一定会从最容易采摘的椰子开始采摘）</li><li>随着劳动时间的增加，单位劳动时间的疲劳程度会随之增加（包括体能的消耗和厌烦），或者说休闲时间的减少导致单位时间休闲的价值越来越高。<br><strong>边际净收益</strong>：每增加1单位椰子带来的净效用的变化</li></ol><ul><li>净收益 &#x3D; 总效用 - 总成本</li><li>边际净收益 &#x3D; 边际效用 -边际成本<br><strong>最优决策规则</strong> 最优选择在边际效用等于边际成本时达到。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230919202506.png"></li></ul><p><strong>最优产量</strong>在<strong>总效用曲线</strong>和<strong>总成本曲线之间</strong>的<strong>距离最大时</strong>达到，此时边际效用等于边际成本。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230919202807.png"></p><h3 id="2-3-2-储蓄与投资"><a href="#2-3-2-储蓄与投资" class="headerlink" title="2.3.2 储蓄与投资"></a>2.3.2 储蓄与投资</h3><p>🌮<strong>储蓄&#x3D;收入-消费</strong><br><strong>收入</strong>：一定时期内生产的可用于消费和投资的产品总量<br><strong>消费</strong>：直接满足个人偏好的产品消耗<br><strong>储蓄</strong>：为了投资和防患于未然而不用于消费的收入</p><p><strong>资本品</strong>：人创造的、不能直接由大自然赐予的生产要素 (提高效率的工具、杠杆等)<br><strong>生产要素</strong>：<strong>生产产品需要各种投入</strong>，包括劳动、资本品、土地和其他自然资源<br><strong>投资</strong>：将储蓄转化为资本品的活动，目的是提高未来的生产率<br><strong>折旧</strong>：资本品在使用过程中因磨损导致的价值损失<br><strong>经济增长</strong>：单位时间内生产率的提高和可用于消费的产品的持续增加</p><h2 id="2-4鲁滨孙经济的多元化"><a href="#2-4鲁滨孙经济的多元化" class="headerlink" title="2.4鲁滨孙经济的多元化"></a>2.4鲁滨孙经济的多元化</h2><h3 id="2-4-1-无差异曲线"><a href="#2-4-1-无差异曲线" class="headerlink" title="2.4.1 无差异曲线"></a>2.4.1 无差异曲线</h3><p><strong>无差异组合</strong>：不同的商品组合，人们从中得到的效用程度相同<br><strong>无差异曲线</strong>：无差异组合连成的曲线，给定相同效用水平的所有产品组合点的连线，反映了不同产品在偏好上的可替代性。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/202309192037"><br><strong>边际替代率递减法则</strong>：维持同一效用水平的前提下，随着某商品消费量增加，该产品能够替代的其他商品的消费量将随之递减。</p><ul><li>鱼和椰子的边际效用都是正:<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920221343.png"></li></ul><p>越往右上方的无差异曲线效用越高，越被偏好</p><ul><li><p>劳动的边际效用为负，收入的边际效用为正<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920221916.png"></p></li><li><p>一种极端的无差异曲线——极乐点<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920222014.png"></p></li><li><p>列昂惕夫无差异曲线<br>两种商品是绝对互补的：给定一个固定比例，除非两种商品同时增加，否则，再增加其中任何一种商品的数量都不会增加效用水平</p></li></ul><p><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920222618.png"></p><h3 id="2-4-2-生产可行性曲线"><a href="#2-4-2-生产可行性曲线" class="headerlink" title="2.4.2 生产可行性曲线"></a>2.4.2 生产可行性曲线</h3><p><strong>机会成本</strong>：为了某个特定的行动而放弃的其他行动的最大收益。<br><strong>生产可行性边界</strong>：给定资源和技术情况下可能实现的最大生产组合的集合。反映个体或社会面临的约束。</p><ul><li><p>鲁滨孙的生产可行性边界<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920223219.png"></p></li><li><p>生产可行性边界的一般形式<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920223332.png"></p></li></ul><h3 id="2-4-3-最优生产组合"><a href="#2-4-3-最优生产组合" class="headerlink" title="2.4.3 最优生产组合"></a>2.4.3 最优生产组合</h3><p><strong>最优选择条件</strong>：偏好上的边际替代率＝生产上的边际转换率。<br><strong>最优选择点</strong>：无差异曲线与生产可行性边界相切，这实际上是边际效用等于边际成本的另一种表达。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920223517.png"></p><p><strong>边际替代率</strong>：两种产品无差异曲线的斜率<br><strong>边际转换率</strong>（即边际机会成本）：两种产品在生产上的生产可行性边界斜率</p><h3 id="2-4-4-经济扩展"><a href="#2-4-4-经济扩展" class="headerlink" title="2.4.4 经济扩展"></a>2.4.4 经济扩展</h3><p>通过减少短期消费而进行的储蓄和投资，可以增加资本品和改进生产技术，从而推动生产可行性边界向外移动。经济增长表现为由投资和生产技术改进带来的消费水平的不断提高。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920224116.png"></p><h1 id="第3章-交换、分工与货币"><a href="#第3章-交换、分工与货币" class="headerlink" title="第3章 交换、分工与货币"></a>第3章 交换、分工与货币</h1><p><strong>交换</strong>：人们在自愿的基础上进行产品所有权转让以及其他形式的相互合作。</p><h2 id="3-1-直接交换"><a href="#3-1-直接交换" class="headerlink" title="3.1 直接交换"></a>3.1 直接交换</h2><p><strong>直接交换</strong>：不借助于货币的物物交换，即以物易物。<br><strong>价格</strong>：产品之间交换的比例，即某物品用另一种物品衡量的相对数字。</p><h3 id="3-1-1-交换的好处"><a href="#3-1-1-交换的好处" class="headerlink" title="3.1.1 交换的好处"></a>3.1.1 交换的好处</h3><p>在只有两个人的交换中，能保证双方受益的交易价格不是唯一的；尽管交易使双方受益，但受益的程度会随交易价格的不同而不同。</p><p>实际的交易价格依赖于各自讨价还价能力。</p><p>如果参与交易的人数增加，交易价格的可行范围将不断缩小，自由竞争会使交易条件变得更为公平。</p><h3 id="3-1-2-交换的无差异曲线分析"><a href="#3-1-2-交换的无差异曲线分析" class="headerlink" title="3.1.2 交换的无差异曲线分析"></a>3.1.2 交换的无差异曲线分析</h3><ul><li>埃奇沃思盒状图<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920225142.png"></li></ul><ol><li>盒中的任意一点，对应的是两种产品在两个人之间的可行分配</li><li>由于两种产品都是好的物品，对每个人来说都是多多益善，因此，离各自坐标原点越远的无差异曲线效用水平越高。</li></ol><p>均衡点：取决于双方讨价还价和偏好<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920225829.png"></p><p>A点是初始状态点。交易的终点一定是两个人的无差异曲线的切点，如B点。</p><p><strong>契约曲线</strong>：所有无差异曲线的切点构成的轨迹。</p><h2 id="3-2-分工和比较优势"><a href="#3-2-分工和比较优势" class="headerlink" title="3.2 分工和比较优势"></a>3.2 分工和比较优势</h2><p><strong>分工</strong>：不同的人专业化生产不同产品。</p><h3 id="3-2-1-绝对优势和比较优势"><a href="#3-2-1-绝对优势和比较优势" class="headerlink" title="3.2.1 绝对优势和比较优势"></a>3.2.1 绝对优势和比较优势</h3><p><strong>绝对优势</strong>：一个人（国家）的某种产品的绝对生产率大于其他人（国家）</p><ul><li>绝对优势导致的分工和变换<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920231458.png"></li></ul><p><strong>比较优势</strong>：一个人（国家）尽管在所有产品的生产上都没有他人生产率高，但在某种特定产品的生产效率上劣势相对较小，或者说，机会成本较小</p><ul><li>比较优势导致的分工和变换<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920231901.png"></li></ul><h3 id="3-2-2-比较优势与国际贸易"><a href="#3-2-2-比较优势与国际贸易" class="headerlink" title="3.2.2 比较优势与国际贸易"></a>3.2.2 比较优势与国际贸易</h3><p>如果每个国家专业化于自己具有比较优势的产品的生产，国际贸易可以给所有国家带来好处。</p><p>即便一国最初在任何方面都没有比较优势，但只要它专业化于某一特定的产业，日积月累，就可以在这个产业上形成自己的比较优势</p><p>根据比较优势原理，即使一国在所有商品生产上较之另一国均处于绝对劣势，但只要处于劣势的国家在各种商品生产上劣势的程度不同，也可以在劣势较小的商品生产方面具有比较优势，而处于优势的国家则在优势较大的商品生产方面具有比较优势。如果每个国家专业化生产和出口其具有比较优势的商品，进口其处于比较劣势的商品，则两国都能从贸易中得到利益，共同提升本国福利水平。——大卫·李嘉图1817年《政治经济学及赋税原理》</p><h3 id="3-2-3-垂直分工"><a href="#3-2-3-垂直分工" class="headerlink" title="3.2.3 垂直分工"></a>3.2.3 垂直分工</h3><p><strong>垂直分工</strong>：从原材料到最终产品生产过程中不同生产环节的分工。不同的生产者专业化于特定阶段产品的生产，每一个上游产品都作为下游产品的投入，直到最终生产出消费者需要的产品。</p><h2 id="3-3-间接交换与货币"><a href="#3-3-间接交换与货币" class="headerlink" title="3.3 间接交换与货币"></a>3.3 间接交换与货币</h2><p><strong>间接交换</strong>：以货币为媒介的交换。</p><h3 id="3-3-1-货币的出现"><a href="#3-3-1-货币的出现" class="headerlink" title="3.3.1 货币的出现"></a>3.3.1 货币的出现</h3><p><strong>货币</strong>：被广泛接受的交换媒介，能与任何商品交换，是所有产品的价格尺度。<br><strong>交易成本</strong>：为了完成交易而必须支付的成本，包括寻找交易对象、谈判价格、签订合同、执行合同等过程中支付的成本等。</p><h3 id="3-3-2-货币的演化"><a href="#3-3-2-货币的演化" class="headerlink" title="3.3.2 货币的演化"></a>3.3.2 货币的演化</h3><p><strong>贵金属具有充当货币的最佳特征</strong>：<br>（1）单位价值高<br>（2）耐用，不易磨损<br>（3）运输方便<br>（4）质地均匀，易分割<br>（5）容易识别，不易伪造</p><p><strong>纸币的信用来自政府的信用</strong>：纸币的生产成本很低，如果政府多印纸币，就可以把民间的财富转移到政府手里。如果纸币发行过滥，就会引起恶性通货膨胀，政府就失去了信用，人们就会寻求其他交易媒。<br><strong>电子货币</strong>：某国的人民不相信政府，寻求另一种替代纸币的货币。</p><h2 id="3-4-市场经济"><a href="#3-4-市场经济" class="headerlink" title="3.4 市场经济"></a>3.4 市场经济</h2><h3 id="3-4-1-生产者和消费者的分离"><a href="#3-4-1-生产者和消费者的分离" class="headerlink" title="3.4.1 生产者和消费者的分离"></a>3.4.1 生产者和消费者的分离</h3><p><strong>简单的产品交换</strong>：长期的农业社会，人们生产产品主要是为了自己消费，生产者和消费者是一体的，交换只是互通有无、调剂余缺。</p><p><strong>产品变成了“商品”</strong>：随着交换和分工的发展，出现了“市场经济”，生产和消费分离，生产者生产的产品主要不是为了自己消费，而是为了在市场上出售；消费者消费的产品通常也不是自己生产出来的，而是要从市场上购买。<br><strong>分离导致的竞争</strong>：生产者之间要为出售商品而竞争，消费者之间要为购买商品而竞争</p><h3 id="3-4-2-经济循环流模型"><a href="#3-4-2-经济循环流模型" class="headerlink" title="3.4.2 经济循环流模型"></a>3.4.2 经济循环流模型</h3><p><strong>经济学家的两大类市场</strong>：第一类是<strong>产品</strong>市场，第二类是<strong>要素</strong>市场。<br><strong>经济循环流模型</strong>：反映家庭和厂商之间在产品市场和要素市场上的支出和收入关系的模型。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230920233308.png"><br>凯恩斯主义经济学的总量分析之所以有问题，一个重要的原因是它忽略了中间产品的交易。</p><h3 id="3-4-3-价格的功能"><a href="#3-4-3-价格的功能" class="headerlink" title="3.4.3 价格的功能"></a>3.4.3 价格的功能</h3><p>价格是在竞争中形成的，不是由任何单一的权威机构规定的。价格不仅决定生产什么和如何生产，而且决定收入分配（为谁生产）。</p><p>价格机制自发地协调着生产和消费，被认为是人类最伟大的创造之一。在人类交易的过程中，再也找不到比价格机制更有效的协调方式。</p><p><strong>价格的三个功能</strong>：</p><ol><li><strong>传递信息</strong>：需求增加则价格上涨，价格上涨导致需求降低。</li><li><strong>提供激励</strong>：生产者根据产品和要素价格的变化调整产出和投入，以增加利润，激励生产者寻找替代品和开发新技术。</li><li><strong>决定收入分配</strong>：价格之所以有激励功能，是因为它决定每个人的收入。</li></ol><h1 id="第4章-消费者选择与需求曲线"><a href="#第4章-消费者选择与需求曲线" class="headerlink" title="第4章 消费者选择与需求曲线"></a>第4章 消费者选择与需求曲线</h1><h2 id="4-1-最优消费组合选择"><a href="#4-1-最优消费组合选择" class="headerlink" title="4.1 最优消费组合选择"></a>4.1 最优消费组合选择</h2><h3 id="4-1-1-无差异曲线-重复"><a href="#4-1-1-无差异曲线-重复" class="headerlink" title="4.1.1 无差异曲线(重复)"></a>4.1.1 无差异曲线(重复)</h3><h3 id="4-1-2-预算约束线"><a href="#4-1-2-预算约束线" class="headerlink" title="4.1.2 预算约束线"></a>4.1.2 预算约束线</h3><p><strong>预算约束线</strong>：用于购买商品的总支出等于总收入。预算约束线上的所有消费组合都是可行的。</p><p><strong>收入变动引起的预算约束线变动</strong>：如果收入M发生变化但价格不变，预算约束线会平移：M⬆️，线右移；M⬇️，线左移<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923000707.png"></p><p><strong>苹果价格单方面变动引起的预算约束线变动</strong>：某种商品的价格单方面变动时，预算约束线将发生旋转<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923001042.png"></p><h3 id="4-1-3-最优消费组合"><a href="#4-1-3-最优消费组合" class="headerlink" title="4.1.3 最优消费组合"></a>4.1.3 最优消费组合</h3><p>给定消费者偏好、预算约束和价格，实现最大效用水平：图中有预算约束曲线，三条无差异曲线。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923001515.png"></p><p><strong>最优消费选择</strong>：无差异曲线与预算曲线相切</p><p><strong>预算线的斜率的绝对值</strong>：两种商品的价格之比，$pa&#x2F;pb$<br><strong>无差异曲线的切线的斜率为边际替代率</strong>：$$MRS_{ab} &#x3D; \frac{\Delta x_b}{\Delta x_a} &#x3D;\frac{\partial u&#x2F;\partial x_a}{\partial u&#x2F;\partial x_b} \Longrightarrow \frac{\partial u&#x2F;\partial x_a}{p_a}&#x3D;\frac{\partial u&#x2F;\partial x_b}{p_b}  $$<br><strong>最优消费选择的直观经济含义</strong>：最后1分钱无论用于哪种商品的消费，给消费者带来的满足程度是一样的。<br>若等式不成立，说明消费者可在相同预算下变换消费结构，降低单位边际效用低的商品消费，增加单位边际效用高的商品消费，从而让自己的福利进一步提高，说明当前状态就不是效用最大化状态了。</p><h2 id="4-2-比较静态分析"><a href="#4-2-比较静态分析" class="headerlink" title="4.2 比较静态分析"></a>4.2 比较静态分析</h2><p><strong>需求函数</strong>：需求量与价格、收入的关系。</p><h3 id="4-2-1-偏好变化"><a href="#4-2-1-偏好变化" class="headerlink" title="4.2.1 偏好变化"></a>4.2.1 偏好变化</h3><p><strong>不同偏好对应的不同选择</strong>：新的偏好下，原来的最优选择就不再是最优的了，因为最后1分钱花在苹果上的边际效用小于花在香蕉上的边际效用，消费者会减少苹果的消费同时增加香蕉的消费，直到两种产品上的边际效用相等为止。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923003529.png"></p><h3 id="4-2-2-收入变化"><a href="#4-2-2-收入变化" class="headerlink" title="4.2.2 收入变化"></a>4.2.2 收入变化</h3><p>收入增加对正常商品组合的影响：<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923003801.png"><br>并不是任何商品的需求都会随收入的增加而增加。事实上，像大白菜、肥猪肉、面粉等这样的产品，随着人们的收入提高，对它们的消费反倒减少了。</p><p><strong>正常商品（normal goods）</strong>：消费数量随着收入增加而增加。<br><strong>劣等商品（inferior goods）</strong>：消费数量随着收入增加而下降。</p><p>一种商品是劣等品的最优消费组合情况：<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923004104.png"></p><h3 id="4-2-3-价格变化"><a href="#4-2-3-价格变化" class="headerlink" title="4.2.3 价格变化"></a>4.2.3 价格变化</h3><p>苹果价格下降的最优消费组合情况：<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923004229.png"></p><p>不是所有商品的需求都随自身价格的下降而增加的，商品和商品之间存在替代效应和收入效应。</p><p><strong>替代效应</strong>：在真实收入不变的情况下，由相对价格变化引起的需求的变化。<br><strong>收入效应</strong>：由于收入变化引起的需求的变化。<br><strong>价格效应</strong>：由价格变化引起的收入效应和替代效应之和。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923004818.png"><br>从A点到C点的变动是替代效应，从C点到B点的变动是收入效应。<br><strong>吉芬商品（Giffen goods）</strong>：需求随价格的下降而下降的商品。</p><h3 id="4-2-4-间接效用函数"><a href="#4-2-4-间接效用函数" class="headerlink" title="4.2.4 间接效用函数"></a>4.2.4 间接效用函数</h3><p><strong>直接效用函数（direct utility function）</strong>：消费者的偏好是直接定义在产品上的效用函数（给定收入和偏好）。<br><strong>直接效用函数数学式：</strong><br>$$ u（x1，x2，…，x_N）$$<br><strong>间接效用函数（indirect utility function）</strong>：效用函数定义在价格和收入水平上，再把需求函数代入直接效用函数，构造出一个复合效用函数。<br><strong>间接效用函数数学式：</strong><br>$$\begin{array}{c}<br>u（p1，p2，…，p_N，M）&#x3D; \max u （x1，x2，…，x_N）\<br>s.t.\sum_{N}^{i&#x3D;1}p_ix_i&#x3D;M<br>\end{array} $$</p><h2 id="4-3-个人需求曲线与需求法则"><a href="#4-3-个人需求曲线与需求法则" class="headerlink" title="4.3 个人需求曲线与需求法则"></a>4.3 个人需求曲线与需求法则</h2><h3 id="4-3-1-需求曲线"><a href="#4-3-1-需求曲线" class="headerlink" title="4.3.1 需求曲线"></a>4.3.1 需求曲线</h3><p><strong>需求曲线</strong>：消费者对产品的需求量与该产品价格之间的关系。</p><p>苹果价格下降，最优消费组合变动<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923120621.png"></p><p>对应的苹果的需求曲线<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923120729.png"></p><h3 id="4-3-2-需求曲线的移动"><a href="#4-3-2-需求曲线的移动" class="headerlink" title="4.3.2 需求曲线的移动"></a>4.3.2 需求曲线的移动</h3><p><strong>替代品</strong>：一种商品价格上涨导致另一种商品的需求上升。</p><p>代品价格上升引起的需求曲线移动<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923121224.png"></p><p><strong>互补品</strong>：一种商品的价格上涨导致另一种商品的需求下降。<br>替代品价格上升，需求曲线向右移动，即对本商品的需求增加了。<br>互补品价格上升，需求曲线向左移动，即对本商品的需求减少了。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923121305.png"></p><h3 id="4-3-3-消费者剩余"><a href="#4-3-3-消费者剩余" class="headerlink" title="4.3.3 消费者剩余"></a>4.3.3 消费者剩余</h3><p>在开放市场当中，交易都是自愿的，每个消费者付出的代价不会大于他得到的收益，否则交易就不太可能进行，因此，交易一定会给消费者带来至少大于零的消费者剩余。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923121559.png"></p><p><strong>消费者剩余</strong>：消费者宁愿付出而不愿意得不到此物的最大价格与消费者为此物实际支付的价格之间的差额。消费者剩余是纵坐标、需求曲线和价格水平线围成的区间。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923121702.png"></p><p>在市场中，谁给消费者带来的消费者剩余多，谁就能够获胜。<br>企业的直接目标是利润，但是前提是要给消费者带来幸福。<br>这就是为什么可以把市场的逻辑概括成一句话：你要过得幸福，首先要给别人带来幸福。</p><h2 id="4-4-需求弹性"><a href="#4-4-需求弹性" class="headerlink" title="4.4 需求弹性"></a>4.4 需求弹性</h2><h3 id="4-4-1-需求的价格弹性"><a href="#4-4-1-需求的价格弹性" class="headerlink" title="4.4.1 需求的价格弹性"></a>4.4.1 需求的价格弹性</h3><p><strong>需求的价格弹性</strong>：需求量变化的百分比与价格变化的百分比的比值。<br><strong>公式</strong>：<br>$$需求价格弹性 &#x3D; \frac{需求变化的百分比}{价格变化的百分比}&#x3D;\frac{\Delta D&#x2F;D }{\Delta p&#x2F;p}  $$<br><strong>自价格弹性</strong>：衡量自身价格变化的需求弹性。<br><strong>交叉价格弹性</strong>：衡量其他产品（替代品或互补品）价格变化的需求弹性。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923122212.png"></p><p>于一条线性的需求曲线而言，其任何一点对应的斜率是相同的，但是每一点的弹性是不同的。从左至右，弹性从无穷大逐渐下降至零。<br>需求函数为$D&#x3D;a-bP$，$EP$表示需求价格弹性<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923122542.png"></p><p>如果需求曲线是一条指数幂函数曲线$D&#x3D;P^{－λ}$  ，价格弹性λ与价格水平无关。<br>价格弹性不变的需求曲线<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923122727.png"></p><h4 id="弧弹性与价格弹性的中点法"><a href="#弧弹性与价格弹性的中点法" class="headerlink" title="弧弹性与价格弹性的中点法"></a>弧弹性与价格弹性的中点法</h4><p><strong>传统点弹性公式的缺陷</strong>：当某地区苹果价格从6元&#x2F;斤下降到3元&#x2F;斤的时候，根据需求曲线我们可以预期该地区苹果的需求量将会从50吨上升到75吨，此时价格下降了50%，需求上升了50%，根据点弹性的公式，计算出的弹性值为1；反之，当苹果价格从3元&#x2F;斤上涨到6元&#x2F;斤时，其需求量将会从75吨下降到50吨，此时价格上涨了100%，需求下降了33%，计算出的弹性值为0.33。这样，在需求曲线的同一区间上得出了两个不同的弹性值。<br>之所以出现这个问题，主要是因为在上例中的两种情况下，点弹性计算所选取的需求量D和价格p是不同的，因而得到的数值也不相同。</p><p><strong>价格弹性的中点法</strong>：$需求价格弧弹性&#x3D;\frac{\Delta  D&#x2F;\bar{D} }{\Delta p&#x2F;\bar{p} } &#x3D;\frac{D_2-D_1&#x2F;[(D_1+D_2)&#x2F;2]}{p_2-P_1&#x2F;[(p_1+p_2)&#x2F;2]}$</p><p><strong>影响价格弹性的主要因素</strong>：</p><ol><li>价格弹性的大小取决于该产品支出在总收入中所占的比例。这个比例越小，需求的价格弹性越小</li><li>价格弹性的大小取决于替代品的多少。通常替代品越多，商品涨价将导致消费者转而选择其替代品，因此商品对应的需求弹性越大；反之，替代品越少，需求弹性越小。</li><li>价格弹性取决于产品的耐久性。商品耐久性越高，价格弹性越大。对耐久性商品，消费者会更愿意根据价格变化的预期调整购买时点。</li><li>商品的属性也会影响其价格弹性的大小。必需品的价格弹性比较小，奢侈品的价格弹性比较大。</li></ol><h3 id="4-4-2-需求的收入弹性"><a href="#4-4-2-需求的收入弹性" class="headerlink" title="4.4.2 需求的收入弹性"></a>4.4.2 需求的收入弹性</h3><p><strong>收入弹性</strong>：需求变化率与收入变化率的比值，反映的是需求对消费者的收入变化的敏感度。<br><strong>公式</strong>：$$需求收入弧弹性&#x3D;\frac{需求变化的百分比}{收入变化的百分比} &#x3D;\frac{\Delta  D&#x2F;D }{\Delta M&#x2F;M } $$<br><strong>恩格尔系数</strong>（衡量家庭和社会的富裕程度）：必需品支出占总消费支出的比重衡量一个人的富裕程度或一个社会的整体富裕程度。一个人越富裕，一个社会越发达，必需品支出占总支出的比重越低。</p><ul><li>59%以上：贫困</li><li>50%～59%：温饱</li><li>40%～50%：小康</li><li>30%～40%：富裕</li><li>低于30%：最富裕</li></ul><h2 id="4-5-需求的加总和市场"><a href="#4-5-需求的加总和市场" class="headerlink" title="4.5 需求的加总和市场"></a>4.5 需求的加总和市场</h2><h3 id="4-5-1-市场需求曲线"><a href="#4-5-1-市场需求曲线" class="headerlink" title="4.5.1 市场需求曲线"></a>4.5.1 市场需求曲线</h3><p><strong>市场需求曲线</strong>：个体需求曲线的水平加总；总需求量随价格的下降而上升。<br>假设某种商品市场上存在着N个消费者，他们的偏好和收入都相同，因此他们的个人需求曲线也是相同的。<br>假设每个人对于该商品的需求函数为$d（p）&#x3D;a－bp$。那么对于任意给定的价格，市场的总需求量为$D&#x3D;Nd&#x3D;N（a－bp）$<br>其中第$i$个消费者的个人需求函数为$di（p）$，那么市场的总需求函数变成$D&#x3D;\sum_{i&#x3D;1}^{N}d_i(p)$，可见，所有的市场总需求都可以通过个人需求的水平加总得到。<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923130017.png"></p><p><strong>市场总需求增加的两类情况</strong>：</p><ol><li>当商品价格下跌时，原有消费者根据各自的个人需求曲线增加个人的消费数量。</li><li>商品价格下跌，可能使市场上的消费者数量增加。有些人本来不会消费该商品，但是由于其价格的下降，转而开始选择消费该商品。<br>即单个消费者的需求是不连续的，甚至只是一个点，但市场的需求曲线仍然可能是连续的。如果商品对于所有消费者而言都不是吉芬商品，那么价格的变动将导致所有消费者决策向着同一个方向移动，进而可以推断出市场总需求对于价格的变动将更加敏感。通常来说，市场需求的价格弹性要大于消费者个体需求的价格弹性，也就是市场的总需求曲线更加平坦。</li></ol><h3 id="4-5-2-经济发展的度量"><a href="#4-5-2-经济发展的度量" class="headerlink" title="4.5.2 经济发展的度量"></a>4.5.2 经济发展的度量</h3><p><strong>奢侈品的必需品化来自两个因素</strong>：</p><ol><li>收入水平的提高</li><li>价格的下降<br>而这两个因素又来自一个共同因素的作用，这就是创新和技术进步。创新和技术进步不断提高劳动生产率，一方面降低了生产成本，导致价格下降，另一方面增加了消费者的收入。<br><strong>哈耶克</strong>：</li><li>在一种新商品成为一种公众需要并构成一种生活必需品之前，通常只是少数人的玩物。因此，今日的奢侈品乃是明日之必需品，限制当前少数人的奢侈品消费，就等于阻止多数人今后的必需品消费。</li><li>富有者购买此类新商品支付的费用，有一部分被用来支付试验新产品的费用（尽管富有者的目标并不在此），而作为这一进程的结果，这些物品便可以在晚些时候为贫穷者所享用。</li></ol><p>1990—2010年桑塔纳轿车的价格变化<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923131254.png">[img-caption:: 化肥投入与玉米产量的对应关系]</p><p>1997—2011年中国汽车保有量的变迁<br><img src="https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923131327.png"></p><h1 id="第5章-生产与供给曲线"><a href="#第5章-生产与供给曲线" class="headerlink" title="第5章 生产与供给曲线"></a>第5章 生产与供给曲线</h1><h2 id="5-1-生产技术"><a href="#5-1-生产技术" class="headerlink" title="5.1 生产技术"></a>5.1 生产技术</h2><h3 id="5-1-1-生产函数"><a href="#5-1-1-生产函数" class="headerlink" title="5.1.1 生产函数"></a>5.1.1 生产函数</h3><p><strong>生产函数</strong>：投入与产出之间的关系。  $y&#x3D;f（x_1，x_2，…，x_n）$，y代表某种产品的产量，$x_i$代表第i种要素的投入量。<br><strong>短期</strong>：只有一种或部分要素投入可变的时间跨度。<br><strong>长期</strong>：所有要素投入都可以改变的时间跨度。</p><h3 id="5-1-2-短期生产函数"><a href="#5-1-2-短期生产函数" class="headerlink" title="5.1.2 短期生产函数"></a>5.1.2 短期生产函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923151742.png#inl)[img-caption:: 化肥投入与玉米产量的对应关系 单位：10千克]</span><br><span class="line"></span><br><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230923151840.png#inl)[img-caption:: 玉米与化肥的投入-产出关系图]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>要素的平均产量</strong>：总产量除以投入总量  $AP&#x3D;\frac{y}{x}$<br><strong>要素的边际产量</strong>：增加一单位的要素投入所增加的产出量  $MP&#x3D;\frac{\mathrm{d}  y}{\mathrm{d}  x}$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230924122644.png#inl)[img-caption:: 总产量、平均产量和边际产量 单位：10千克]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>边际生产率递减法则的表现：平均产量、际产量随着要素投入的增加不断下降，平均产量下降是边际产量下降的结果，这是因为新投入带来的产出数量低于原来的平均值，因此新的平均值被拉低了。<br>$$\begin{array}{c}<br>如果MP(X)&lt;AP(X),那么有\<br>\<br>\frac{\mathrm{d} AP}{\mathrm{d} x}&#x3D;\frac{\mathrm{d} TP&#x2F;x}{\mathrm{d} x}&#x3D;\frac{(xMP-TP)}{x^2}   &#x3D;\frac{(MP-AP)}{x^2}&lt;0<br>\end{array} $$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230924123559.png#inl)[img-caption:: 平均产量和边际产量图示]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在土地等其他要素投入固定的情况下，每单位新增化肥所增加的玉米产量随着化肥投入的增加而递减。边际生产率递减法则适用于所有的要素投入，包括劳动、资本、土地等。<br><strong>边际生产率递减法则</strong>：在其他要素投入不变、只有一种要素投入可变的情况下，<strong>可变要素投入超过一定的临界值后</strong>，其对应的边际产量随着投入的增加而下降。</p><p><strong>马尔萨斯陷阱</strong>：由于边际生产率递减法则的作用，随着人口增多，人均粮食产量会越来越少，人类永远只能生活在生存线上，生活水平不可能提高。<br><strong>马尔萨斯陷阱的缺陷</strong>：经济不仅受边际生产率递减法则的支配，也受技术进步的支配。如果技术进步速度足够快，边际生产率递减法则就不会表现为人均产出的减少，因为技术进步可以提高边际生产率。</p><h3 id="5-1-3-长期生产函数"><a href="#5-1-3-长期生产函数" class="headerlink" title="5.1.3 长期生产函数"></a>5.1.3 长期生产函数</h3><p>只有资本和劳动两种要素的情况下，生产函数变为：       $y&#x3D;f（K，L）$ ,K：资本；L：劳动。</p><ul><li><strong>资本</strong>在物质形态上表现为厂房、机器设备、中间品、原材料等。</li><li><strong>劳动</strong>指劳动者的体力、知识、智力的投入。</li><li>劳动必须与资本<strong>结合</strong>才能生产出产品。</li></ul><p>表中：随着劳动的增加，要保持原产出，资本的投入就可以相应减少，二者存在此消彼长的替代关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230924125535.png#inl)[img-caption:: 生产相同产出量的不同要素投入组合]</span><br><span class="line"></span><br><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230924125609.png#inl)[img-caption:: 等产量曲线]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>等产量曲线</strong>：表示某一固定产出下对应的所有投入组合的连线。</p><p>资本与劳动的可替代程度取决于等产量曲线的形状，是由技术决定的，与要素价格无关。<br><strong>劳动对资本的边际技术替代率</strong>：沿着等产量曲线，每单位劳动可替代的资本投入         $MRTS_LK &#x3D; -\frac{\Delta K }{\Delta L}$<br><strong>劳动对边际技术替代率递减法则</strong>：随着劳动投入的增加，每单位劳动能替代的资本越来越少。</p><p>类似地，资本对劳动的边际技术替代率也是随着资本投入数量的增加而递减</p><p><strong>边际技术替代率</strong>：在产量不变的前提下，增加一单位某种要素投入可以替代的另外一种要素的数量。<br><strong>边际技术替代率递减法则</strong>：随着一种要素投入的增加，该要素可替代的其他要素的数量不断递减。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230924130721.png#inl)[img-caption:: 边际替代率递减法则]</span><br><span class="line"></span><br><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230924130853.png#inl)[img-caption:: 劳动、资本的边际技术替代率]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-1-4-规模报酬"><a href="#5-1-4-规模报酬" class="headerlink" title="5.1.4 规模报酬"></a>5.1.4 规模报酬</h3><p><strong>规模报酬</strong>：当所有要素同比例增加时，产量如何变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230924135740.png#inl)[img-caption:: ]</span><br></pre></td></tr></table></figure><p><strong>柯布-道格拉斯生产函数（Cobb-Douglas production function）</strong>：<br>$y &#x3D; AK^\alpha L^\beta$                    A：技术水平</p><ul><li>如果两个指数之和等1： $y &#x3D; AK^\alpha L^{1-\alpha}$  ，对应的技术是规模报酬不变的</li><li>如果两个指数相加大于1，规模报酬递增</li><li>如果两个指数相加小于1，规模报酬递减</li></ul><h2 id="5-2-生产成本"><a href="#5-2-生产成本" class="headerlink" title="5.2 生产成本"></a>5.2 生产成本</h2><h3 id="5-2-1-成本函数和成本曲线"><a href="#5-2-1-成本函数和成本曲线" class="headerlink" title="5.2.1 成本函数和成本曲线"></a>5.2.1 成本函数和成本曲线</h3><p><strong>成本函数</strong>： C&#x3D;C（y），其中y表示产量。产量与为生产该产量而必须支付的最低成本之间的关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230925074325.png#inl)[img-caption:: 成本函数和成本曲线]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-2-短期成本曲线"><a href="#5-2-2-短期成本曲线" class="headerlink" title="5.2.2 短期成本曲线"></a>5.2.2 短期成本曲线</h3><p><strong>短期成本</strong>：只有一种要素投入或部分要素投入可变时的最低成本。<br><strong>长期成本</strong>：指所有要素投入都可变时的最低成本。<br><strong>固定成本（FC）</strong>：在短期内，不随产量变化的成本；等于固定生产要素的支出。<br><strong>可变成本（VC）</strong>：随产量增减而变化的成本；等于可变生产要素的支出。<br><strong>总成本（TC）</strong>：固定成本和可变成本之和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230925074901.png#inl)[img-caption::玉米种植的固定成本、可变成本和总成本]</span><br><span class="line"></span><br><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230925074940.png#inl)[img-caption::固定成本、可变成本和总成本曲线]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>平均成本</strong>：总成本与总产量之比。$AC&#x3D;TC&#x2F;y$<br><strong>平均固定成本</strong>：固定成本与总产量之比。$AFC&#x3D;FC&#x2F;y$<br><strong>平均可变成本</strong>：可变成本与总产量之比。$AVC&#x3D;VC&#x2F;y$</p><p><strong>边际成本</strong>：增加一单位产出所增加的总成本。$MC&#x3D;ΔTC&#x2F;Δy$。<br>由于固定成本不随产量而增加，即边际固定成本是零，因此，边际成本等于边际可变成本。<br>当平均成本高于边际成本时，平均成本随着产量的增加而降低。<br>当平均成本低于边际成本时，平均成本随着产量的增加而上升。<br>边际成本曲线与平均总成本曲线和平均可变成本曲线一定相交于平均总成本曲线和平均可变成本曲线的<strong>最低点</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230925075825.png#inl)[img-caption:: 平均成本与边际成本]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-3-长期成本曲线"><a href="#5-2-3-长期成本曲线" class="headerlink" title="5.2.3 长期成本曲线"></a>5.2.3 长期成本曲线</h3><p>长期成本中，所有的要素投入都是可变的。</p><p>假定要素投入分为资本和劳动两大类：  $C&#x3D;Kr+Lw$          K：资本投入      L：劳动投入         r：资本的价格         w：劳动力的价格</p><p>劳动力价格为1.2时，最优劳动-资本组合是3∶5.6；而当劳动力价格下降为0.8时，最优资本-劳动组合是5∶3.6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230926191557.png#inl)[img-caption::不同价格下的最优投入组合]</span><br><span class="line"></span><br><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230926192049.png#inl)[img-caption::最优劳动投入随要素价格而变动]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（a）给出了三条等成本曲线，越靠近原点的等成本线对应的成本越低；反之，越远离原点的等成本线对应的成本越高。由于要素价格是给定的，不同的等成本曲线一定是平行的。<br>（b）给出了当产量为y时的等产量曲线。把等产量曲线和等成本曲线放在一起，我们就得到了图（c）。<br>企业的问题是：如何选择投入组合，用最低的成本生产出给定的产量y。<br>（c）生产产量y1成本最低的要素投入组合点是A点。过A点的等成本曲线上的其他组合给出相同的成本，但生产不出所要求的产量y1；这条等成本曲线以内的组合给出更低的成本，但同样生产不出所要求的产量y1；这条等成本曲线以外的组合有可能生产出所要求的产量y1，但不是成本最低的组合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![900](https://raw.githubusercontent.com/weixiansheng1/picture/master/20230926192236.png#inl)[img-caption:: 成本最小化问题]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最优组合点A满足这样的条件：等产量曲线的要素边际替代率（绝对值）等于要素价格比率 $$\frac{\Delta K}{\Delta L}&#x3D;\frac{\partial y&#x2F;\partial L}{\partial x&#x2F;\partial K}&#x3D;\frac{w}{r}$$<br>最优组合的最后一单位的成本支出不论花在资本投入上还是劳动投入上，其边际产量是相同的。如果最后一单位成本支出，资本的边际生产率大于劳动的边际生产率，通过用资本替代劳动就可以降低成本支出。<br>成本最低的要素组合依赖于要素的相对价格。</p><h4 id="最优要素组合的数学分析"><a href="#最优要素组合的数学分析" class="headerlink" title="最优要素组合的数学分析"></a>最优要素组合的数学分析</h4><p>数学上，给定产量下成本最小化可以表示为求解如下最优化问题：<br>$$\begin{array}{}<br>min（Kr+Lw）\<br>s.t.y≤f（K，L）<br>\end{array}{}  $$<br><strong>构建拉格朗日函数</strong>：$l&#x3D;Kr+Lw+λ（y－f（K，L））$<br>分别就K和L对l求导，令两个一阶导数等于零，可知最优解（K<em>，L</em>）满足如下一阶条件：<br>$$\frac{\partial f&#x2F;\partial K}{r}&#x3D;\frac{\partial f&#x2F;\partial L}{w}&#x3D;\frac{1}{\lambda }$$<br>得到等成本线的斜率$-\frac{w}{r}$等于等产量线的斜率（要素在技术上的边际替代率）：</p><p>$$MRTS_{LK}&#x3D;\frac{\mathrm{d} K}{\mathrm{d} L} &#x3D; -\frac</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>跨境电商工具</title>
      <link href="/2023/10/02/%E8%B7%A8%E5%A2%83%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0%E7%AD%89/"/>
      <url>/2023/10/02/%E8%B7%A8%E5%A2%83%E5%B7%A5%E5%85%B7%E5%B9%B3%E5%8F%B0%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h2 id="✍选品必备神器"><a href="#✍选品必备神器" class="headerlink" title="✍选品必备神器"></a>✍选品必备神器</h2><ol><li><a href="https://zh.semrush.com/pricing/">【🐱SEMRush】</a> 【付款方式】： Visa、Mastercard、Discover、American Express 和 UnionPay</li></ol><table><thead><tr><th align="center">类别</th><th align="center">价格</th><th align="center">项目</th><th align="center">跟踪关键词数量</th><th align="center">每个报告结果数量</th><th>附加</th></tr></thead><tbody><tr><td align="center">月度 pro</td><td align="center">$129.95每月</td><td align="center">5</td><td align="center">500</td><td align="center">10000</td><td>SEO、PPC 和分析工具：竞争对手分析、关键词分析、网站检测、反向链接分析和广告工具等</td></tr><tr><td align="center">月度 Guru</td><td align="center">$249.95每月</td><td align="center">15</td><td align="center">1,500</td><td align="center">30,000</td><td>所有 Pro 服务特色的附加功能：内容营销工具箱、历史数据、多位置和设备跟踪、Looker Studio 集成等</td></tr><tr><td align="center">月度 Business</td><td align="center">$499.95每月</td><td align="center">40</td><td align="center">5,000</td><td align="center">50,000</td><td>所有 Guru 服务特色的附加功能：广告占有率、增加的数据查询额度、API 访问、谷歌购物广告分析、从第三方工具免费迁移等</td></tr><tr><td align="center">年度  pro</td><td align="center">$108.33 &#x2F;月</td><td align="center"></td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">年度  Guru</td><td align="center">$208.33 &#x2F;月</td><td align="center"></td><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center">年度 Business</td><td align="center">$416.66 &#x2F;月</td><td align="center"></td><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><h2 id="👔私域流量承接平台"><a href="#👔私域流量承接平台" class="headerlink" title="👔私域流量承接平台"></a>👔私域流量承接平台</h2><p>EDM（邮件营销）<br><a href="https://web.whatsapp.com/">WhatsApp</a><br><a href="https://discord.com/">Discord | 玩耍聊天的地方</a><br><a href="https://telegram.org/">Telegram Messenger</a><br><a href="https://www.instagram.com/">Instagram</a><br><a href="https://www.facebook.com/">Facebook - 登录或注册</a><br><a href="https://www.messenger.com/">Messenger</a></p><h2 id="🎃电商平台"><a href="#🎃电商平台" class="headerlink" title="🎃电商平台"></a>🎃电商平台</h2><h3 id="北美市场"><a href="#北美市场" class="headerlink" title="北美市场"></a>北美市场</h3><table><thead><tr><th>名称</th><th>网站链接直达</th><th>简介</th></tr></thead><tbody><tr><td>亚马逊</td><td><a href="https://www.amazon.cn/">亚马逊-网上购物商城：要网购, 就来Z.cn! (amazon.cn)</a></td><td>全球最大的跨境电商平台，涉及多个国家</td></tr><tr><td>eBay</td><td><a href="https://www.ebay.com/">eBay</a></td><td>美国线上拍卖及购物网站，涉及多个国家</td></tr><tr><td>速卖通</td><td><a href="https://sell.aliexpress.com/zh/__pc/newsellerlanding.htm">AliExpress商家门户 - 卖向全球</a></td><td>阿里跨境电商平台，涉及多个国家</td></tr><tr><td>Wish</td><td><a href="https://www.wish.com/">Shop and Save</a></td><td>全球第六大电子商务公司，涉及多个国家</td></tr><tr><td>沃尔玛</td><td><a href="https://www.walmart.com/">walmart.com</a></td><td>美国排名第二的电商平台</td></tr><tr><td>Etsy</td><td><a href="https://www.etsy.com/">Etsy Shop for handmade, vintage, custom, and unique gifts for everyone</a></td><td>利润很高的手工艺品交易平台</td></tr><tr><td>Target</td><td><a href="https://www.target.com/">Target : Expect More. Pay Less.</a></td><td>美国仅次于沃尔玛的第二大零售百货</td></tr><tr><td>Newegg</td><td><a href="https://www.newegg.com/">Newegg.com</a></td><td>北美第二大3C电商平台</td></tr><tr><td>Costco</td><td><a href="https://customerservice.costco.com/app/answers/detail/a_id/671/~/how-can-i-see-what-products-are-available-on-costco.com%3F">How can I see what products are available on Costco.com?</a></td><td>美国最大的连锁会员制仓储量贩店</td></tr><tr><td>Overstock</td><td><a href="https://www.bedbathandbeyond.com/">Bed Bath &amp; Beyond The Best Deals Online: Furniture, Bedding, Rugs, Kitchen Essentials &amp; More</a></td><td>美国知名网上购物平台主营家居类</td></tr><tr><td>Kroger</td><td></td><td>世界上最大的零售商之一</td></tr><tr><td>Bestbuy</td><td><a href="https://www.bestbuy.com/">Best Buy Official Online Store</a></td><td>全球最大家用电器和电子产品零售商</td></tr><tr><td>Tophatter</td><td></td><td>美国闪拍平台美国</td></tr><tr><td>Wayfair</td><td><a href="https://www.wayfair.com/">Wayfair.com - Online Home Store for Furniture, Decor, Outdoors &amp; More</a></td><td>最大家具购物平台</td></tr><tr><td>Chewy</td><td><a href="https://www.chewy.com/">Pet Food, Products, Supplies at Low Prices - Free Shipping</a></td><td>美国最大的宠物电商网站</td></tr><tr><td>Mercari</td><td><a href="https://www.mercari.com/">Mercari: Your Marketplace</a></td><td>美国线上二手货交易平台</td></tr><tr><td>Poshmark</td><td><a href="https://poshmark.com/">Poshmark: Buy and sell fashion, home decor, beauty &amp; more</a></td><td>跟国内闲鱼相似，但有短视频销售，类似tiktok</td></tr><tr><td>OpenSky</td><td><a href="https://www.opensky.com/">OpenSky Stylish Products for Savvy Consumers</a></td><td>阿里巴巴投资的美国本土化电商平台</td></tr><tr><td>敦煌网</td><td><a href="https://www.dhgate.com/">DHgate - Buy China Wholesale Products Online Shopping from China Suppliers.</a></td><td>全球领先的B2B电子商务</td></tr></tbody></table><h3 id="欧洲市场"><a href="#欧洲市场" class="headerlink" title="欧洲市场"></a>欧洲市场</h3><table><thead><tr><th>名称</th><th>网站链接直达</th><th>简介</th></tr></thead><tbody><tr><td>Cdiscount</td><td><a href="https://www.cdiscount.com/">Cdiscount : Meuble, Déco, High Tech, Bricolage, Jardin, Sport</a></td><td>法国知名电商，批发低价为主</td></tr><tr><td>Allegro</td><td><a href="https://allegro.pl/">Allegro - atrakcyjne ceny - Strona Główna</a></td><td>波兰本地最大的电商平台</td></tr><tr><td>Bol</td><td><a href="https://www.bol.com/nl/nl/">De winkel van ons allemaal</a></td><td>荷兰最大的电商网站</td></tr><tr><td>ManoMano</td><td><a href="https://www.manomano.com/">ManoMano</a></td><td>专注于DIY,园艺市场和家居装饰品</td></tr><tr><td>OTTO.de</td><td><a href="https://www.otto.de/">OTTO - Mode, Möbel &amp; Technik » Zum Online-Shop</a></td><td>德国第三大电商平台，次于亚马逊</td></tr><tr><td>eMAG</td><td><a href="https://www.emag.ro/">eMAG.ro - Căutarea nu se oprește niciodată</a></td><td>罗马尼亚最大的在线零售商</td></tr><tr><td>Fnac</td><td><a href="https://www.fnac.com/">Fnac : Informatique, Smartphones, livres, jeux vidéo, photos, jouets, électroménager neuf et occasion.</a></td><td>法国知名跨境电商平台</td></tr><tr><td>Darty</td><td><a href="https://www.darty.com/">Electroménager, High tech le contrat de confiance - Darty</a></td><td>法国最大家电连锁电商平台</td></tr><tr><td>Worten</td><td><a href="https://www.worten.pt/">Worten - Tudo o que precisas em Worten.pt</a></td><td>葡萄牙最大的电商平台</td></tr><tr><td>ePRICE</td><td><a href="https://www.eprice.it/">ePRICE.it: grandi elettrodomestici, elettronica, informatica, smartphone, TV e molto altro</a></td><td>意大利领先的电商平台</td></tr><tr><td>Zalando</td><td><a href="https://www.zalando.co.uk/">Shop Shoes, Fashion &amp; Accessories Online  Zalando UK</a></td><td>德国最大服饰在线零售商</td></tr><tr><td>Fruugo</td><td><a href="https://www.fruugochina.com/">Fruugo CN (fruugochina.com)</a></td><td>支持全球销售的英国本土电商平台</td></tr><tr><td>OnBuy</td><td><a href="https://www.onbuy.com/gb/">UK marketplace  Instant cashback on every item</a></td><td>英国新兴电商平台</td></tr></tbody></table><h3 id="东南亚市场"><a href="#东南亚市场" class="headerlink" title="东南亚市场"></a>东南亚市场</h3><table><thead><tr><th>名称</th><th>网站链接直达</th><th>简介</th><th></th></tr></thead><tbody><tr><td>Lazada</td><td></td><td>东南亚地区最大的在线购物平台之一</td><td></td></tr><tr><td>Shopee</td><td>[Leading Online Shopping Platform In Southeast Asia &amp; Taiwan</td><td>Shopee](<a href="https://shopee.com/index.html">https://shopee.com/index.html</a>)</td><td>东南亚与台湾电商平台</td></tr><tr><td>Tokopedia</td><td><a href="https://www.tokopedia.com/">Tokopedia - Spesial Traktir Ultah, Tumpuk Promonya!</a></td><td>印尼第二大的电商平台</td><td></td></tr><tr><td>Bukalapak</td><td>[Situs Belanja Online dan Jual Beli Mudah Terpercaya</td><td>Bukalapak](<a href="https://www.bukalapak.com/">https://www.bukalapak.com/</a>)</td><td>印尼综合C2C平台</td></tr><tr><td>Blibli</td><td><a href="https://www.blibli.com/">www.blibli.com</a></td><td>印尼排名靠前的电商平台</td><td></td></tr><tr><td>Tiki</td><td><a href="https://tiki.vn/">Tiki - Mua hàng online giá tốt, hàng chuẩn, ship nhanh</a></td><td>越南最大电商平台</td><td></td></tr><tr><td>Sendo</td><td>[Sendo Chợ Người Việt Giá Bình Dân</td><td>Sendo Farm Nông Sản Sạch](<a href="https://www.sendo.vn/">https://www.sendo.vn/</a>)</td><td>越南第三大电商平台</td></tr><tr><td>Zilingo</td><td></td><td>东南亚时尚电商平台</td><td></td></tr><tr><td>Zalora</td><td><a href="https://zalora.com/">ZALORA - ASIA’S LEADING ONLINE FASHION DESTINATION</a></td><td>东南亚时尚美妆电商平台</td><td></td></tr><tr><td>Qoo10</td><td><a href="https://www.qoo10.com/">Qoo10 - 引领全球时尚与潮流的购物中心!</a></td><td>新加坡最大的电商平台</td><td></td></tr><tr><td>京东印尼</td><td><a href="https://global.jd.com/">京东全球版-专业的综合网上购物商城 (jd.com)</a></td><td>京东与印尼本地公司合资成立</td><td></td></tr><tr><td>L192</td><td><a href="https://sellers.l192.com/">L192</a></td><td>柬埔寨最大电商平台</td><td></td></tr><tr><td>Akulaku</td><td>[Belanja dengan Mudah: Pembayaran Cicilan dan Pinjaman Tunai</td><td>Teknologi Finansial Akulaku](<a href="https://www.akulaku.com/">https://www.akulaku.com/</a>)</td><td>东南亚消费分期平台，要使用手机app</td></tr><tr><td>Thisshop</td><td><a href="https://www.thisshop.com/">THISSHOP ผ่อนได้ ไม่ใช้บัตร</a></td><td>泰国首家消费金融电商平台</td><td></td></tr></tbody></table><h3 id="日韩市场"><a href="#日韩市场" class="headerlink" title="日韩市场"></a>日韩市场</h3><table><thead><tr><th>名称</th><th>网页链接直达</th><th>简介</th></tr></thead><tbody><tr><td>Coupang</td><td><a href="https://www.coupang.com/">古邦！ (coupang.com)</a></td><td>韩国最大的电商平台</td></tr><tr><td>Gmarket</td><td><a href="http://global.gmarket.co.kr/Home/Main">Gmarket-Korean No.1 Shopping Site, Hottest, Trendy, Lowest Price, Worldwide shipping available</a></td><td>韩国综合购物网站</td></tr><tr><td>Auction</td><td><a href="https://www.auction.com/">auction.com</a></td><td>韩国在线电商拍卖网站【有访问限制】</td></tr><tr><td>11Street</td><td><a href="https://global.11st.co.kr/">https://global.11st.co.kr/</a></td><td>韩国受欢迎电商网站【有访问限制】</td></tr><tr><td>韩国天乐</td><td><a href="https://cn.lottedfs.cn/main/index.do">乐天免税店 (lottedfs.cn)</a></td><td>与日本乐天同属一个集团【线下免税店】</td></tr><tr><td>UNIT808</td><td><a href="https://unit808.com/">UNIT808, 원하는 건 무엇이든 다 있다!</a></td><td>韩国三大跨境电商平台之一</td></tr><tr><td>亚马逊</td><td>[Amazon.co.jp</td><td>Books, Apparel, Electronics, Groceries &amp; more](<a href="https://www.amazon.co.jp/-/en/">https://www.amazon.co.jp/-/en/</a>)</td></tr><tr><td>Qoo10日本站</td><td><a href="https://www.qoo10.jp/">Qoo10 - ネット通販｜eBay Japan</a></td><td>日本知名电商平台，被eBav收</td></tr><tr><td>日本乐天</td><td><a href="https://www.rakuten.co.jp/">【楽天市場】Shopping is Entertainment! ： インターネット最大級の通信販売、通販オンラインショッピングコミュニティ (rakuten.co.jp)</a></td><td>日本最大电商平台</td></tr><tr><td>日本雅虎</td><td><a href="https://www.yahoo.co.jp/">Yahoo! JAPAN</a></td><td>集合购物和资讯的平台</td></tr><tr><td>Wowma</td><td>【无法访问 403】</td><td>日本有发展前景的电商平台</td></tr><tr><td>Mercari 日本煤炉</td><td><a href="https://jp.mercari.com/">メルカリ - 日本最大のフリマサービス (mercari.com)</a></td><td>日本二手交易平台</td></tr></tbody></table><h3 id="澳洲市场"><a href="#澳洲市场" class="headerlink" title="澳洲市场"></a>澳洲市场</h3><table><thead><tr><th>名称</th><th>网页链接直达</th><th>简介</th></tr></thead><tbody><tr><td>TradeMe</td><td><a href="https://www.trademe.co.nz/a/">Buy &amp; Sell on NZ’s #1 Auction &amp; Classifieds Site                                                     Trade Me</a></td><td>新西兰最大的电商网站</td></tr><tr><td>Catch</td><td><a href="https://www.catch.com.au/">Great daily deals at Australia’s favourite superstore                                                      Catch.com.au</a></td><td>澳大利亚最大的在线零售商之一</td></tr><tr><td>亚马逊</td><td><a href="https://www.amazon.com.au/">Amazon.com.au: Shop online for Electronics, Apparel, Toys, Books, DVDs &amp; more</a></td><td>亚马逊澳洲站</td></tr><tr><td>eBay</td><td><a href="https://www.ebay.com.au/">Electronics, Cars, Fashion, Collectibles &amp; More                                                         eBay</a></td><td>eBay澳洲站</td></tr></tbody></table><h3 id="拉美市场"><a href="#拉美市场" class="headerlink" title="拉美市场"></a>拉美市场</h3><table><thead><tr><th>名称</th><th>网页链接直达</th><th>简介</th></tr></thead><tbody><tr><td>Mercadolibre</td><td><a href="https://mercadolibre.com/">Mercado Libre - Envíos Gratis en el día</a></td><td>拉美知名的电商平台</td></tr><tr><td>亚马逊</td><td></td><td>亚马逊拉美地区站点</td></tr><tr><td>Shopee</td><td></td><td>拉美地区站点</td></tr><tr><td>Americanas</td><td><a href="https://www.americanas.com.br/">Americanas - Estamos Aqui Por Você :)</a></td><td>南美知名电商网站</td></tr><tr><td>Magazine Luiza</td><td><a href="https://www.magazineluiza.com.br/">Magazine Luiza      Pra você é Magalu!</a></td><td>巴西最大的零售商之一</td></tr><tr><td>Casas Bahia</td><td><a href="https://www.casasbahia.com.br/">Casas Bahia                                                                Cupom de 10%, 15% e 20% de desconto</a></td><td>巴西电商平台</td></tr><tr><td>Falabella</td><td><a href="https://www.falabella.com/falabella-cl">falabella.com        Todo lo que necesitas en un solo lugar</a></td><td>智利购物平台</td></tr><tr><td>沃尔玛</td><td></td><td>沃尔玛墨西哥站</td></tr><tr><td>Linio</td><td><a href="https://www.linio.com.mx/cm/lo-nuevo-en-linio">Lo nuevo en Linio ofertas - Linio México</a></td><td>拉美地区较大的电商平台</td></tr></tbody></table><h3 id="中东市场"><a href="#中东市场" class="headerlink" title="中东市场"></a>中东市场</h3><table><thead><tr><th>名称</th><th>网页链接直达</th><th>简介</th></tr></thead><tbody><tr><td>Noon</td><td><a href="https://www.noon.com/uae-en/">noon: Online Shopping UAEMobiles, Beauty, Appliances, Fashion</a></td><td>中东知名电商平台</td></tr><tr><td>Fordeal</td><td><a href="https://www.fordeal.com/en-RU/">Fordeal - Online Shopping for Fashion, Electronics, Apparel, Computers, Grocery &amp; More Fordeal.com</a>瑞士节点打开</td><td>总部在广州，深耕中东市场</td></tr><tr><td>Souq</td><td><a href="https://www.amazon.eg/-/en/">Welcome to Amazon.eg in Egypt. Online Shopping for Electronics, Apparel, Beauty and Grooming, Grocery and more</a></td><td>亚马逊中东站</td></tr><tr><td>zoodmall</td><td><a href="https://www.zoodmall.com.lb/en/">ZoodMall - Shop for Happiness</a></td><td>中东，中亚电商平台</td></tr><tr><td>JollyChic</td><td><a href="http://www.jollycorp.com/">Jollychic (jollycorp.com)</a>【需要挑选访问节点】</td><td>总部在杭州，主打中东市场</td></tr></tbody></table><h3 id="俄罗斯市场"><a href="#俄罗斯市场" class="headerlink" title="俄罗斯市场"></a>俄罗斯市场</h3><table><thead><tr><th>名称</th><th>网页链接直达</th><th>简介</th></tr></thead><tbody><tr><td>Joom</td><td><a href="https://www.joom.com/en">Joom. Shop every day, or whenever you feel like it</a></td><td>俄罗斯移动电商平台</td></tr><tr><td>Ozon</td><td><a href="https://www.ozon.ru/">OZON — интернет-магазин. Миллионы товаров по выгодным ценам</a></td><td>俄罗斯第二大电商平台</td></tr><tr><td>Wildberries</td><td><a href="https://www.wildberries.ru/">wildberries.ru</a></td><td>俄罗斯最大在线零售商</td></tr><tr><td>Yandex.Market</td><td><a href="https://market.yandex.ru/">Интернет-магазин Яндекс Маркет — покупки с быстрой доставкой (yandex.ru)</a></td><td>俄罗斯Yandex旗下的综合购物网站</td></tr></tbody></table><pre><code> |MyMALL |买家[Mymall.bg](https://mymall.bg/) 【卖家】[MyMalls · International Shipping from the US and Europe  You Shop, We Ship](https://www.mymalls.com/)|背靠联网巨头Mail.Ru Group|</code></pre><p>|UMKA |<a href="https://naturesway.com/pages/umcka">Umcka® Cold &amp; Flu†† Products  Nature’s Way® (naturesway.com)</a>|俄罗斯大型的中国商品在线购物|</p><h3 id="非洲市场"><a href="#非洲市场" class="headerlink" title="非洲市场"></a>非洲市场</h3><table><thead><tr><th>名称</th><th>网页链接直达</th><th>简介</th></tr></thead><tbody><tr><td>Jumia</td><td><a href="https://www.jumia.com.ng/">Jumia Nigeria Online Shopping for Groceries, Appliances &amp; More!</a></td><td>非洲最大的电商平台之一</td></tr><tr><td>KikuU</td><td><a href="https://www.kikuu.com/">Online Shopping for Electronics, Phones, Apparel, Shoes, Fashion and more  KiKUU</a></td><td>非洲领先的跨境电商平台</td></tr><tr><td>KiliMall</td><td><a href="https://www.kilimall.co.ke/new/">kilimall.co.ke&#x2F;new&#x2F;</a></td><td>主打非洲市场</td></tr><tr><td>TospinoMall</td><td>【无法访问】</td><td>非洲新兴跨境电商平台</td></tr></tbody></table><h3 id="南亚市场"><a href="#南亚市场" class="headerlink" title="南亚市场"></a>南亚市场</h3><table><thead><tr><th>名称</th><th>网页链接直达</th><th>简介</th></tr></thead><tbody><tr><td>Flipkart</td><td><a href="https://www.flipkart.com/">Online Shopping Site for Mobiles, Electronics, Furniture, Grocery, Lifestyle, Books &amp; More. Best Offers! (flipkart.com)</a></td><td>印度最大电商平台</td></tr><tr><td>Myntra</td><td><a href="https://www.myntra.com/">Online Shopping for Women, Men, Kids Fashion &amp; Lifestyle - Myntra</a>【国内直接访问】</td><td>印度最大的时尚电商平台</td></tr><tr><td>Meesho</td><td><a href="https://supplier.meesho.com/">Meesho Supplier: Sell online on Meesho at 0% commission</a>【印度节点】只有app售卖端</td><td>印度社交媒体电商平台</td></tr><tr><td>Snapdeal</td><td><a href="https://www.snapdeal.com/">Shop Online for Men, Women &amp; Kids Clothing, Shoes, Home Decor Items (snapdeal.com)</a></td><td>印度知名在线交易平台</td></tr><tr><td>亚马逊</td><td></td><td>亚马逊印度站</td></tr><tr><td>Daraz</td><td><a href="https://www.daraz.pk/">Online Shopping in Pakistan: Fashion, Electronics &amp; Groceries - Daraz.pk</a></td><td>巴基斯坦最大的电商平台</td></tr><tr><td>The Club Factory</td><td><a href="https://theclubfactory.in/">The Club Factory</a></td><td>印度排名前三的电商平台</td></tr></tbody></table><h3 id="土耳其市场"><a href="#土耳其市场" class="headerlink" title="土耳其市场"></a>土耳其市场</h3><table><thead><tr><th>名称</th><th>网页链接直达</th><th>简介</th></tr></thead><tbody><tr><td>Trendyol</td><td><a href="https://www.trendyol.com/">En Trend Ürünler Türkiye’nin Online Alışveriş Sitesi Trendyol’da</a></td><td>土耳其最大，增长最快的电商平台</td></tr><tr><td>Hepsiburada</td><td><a href="https://www.hepsiburada.com/">https://www.hepsiburada.com/</a> 不要用edge浏览器</td><td>土耳其领先的电子商务网站</td></tr><tr><td>GittiGidiyor</td><td><a href="https://www.hepsiburada.com/magaza/gitti-gidiyor">https://www.hepsiburada.com/magaza/gitti-gidiyor</a> 不要用edge浏览器</td><td>土耳其电子购物商城</td></tr><tr><td>eBay</td><td><a href="https://www.ebay.com/str/turkishebuy">Turkish eBuy   eBay Stores</a></td><td>旗下NI 土耳其新兴电商平台</td></tr><tr><td>亚马逊</td><td><a href="https://www.amazon.com.tr/">Amazon.com.tr: Elektronik, bilgisayar, akıllı telefon, kitap, oyuncak, yapı market, ev, mutfak, oyun konsolları ürünleri ve daha fazlası için internet alışveriş sitesi</a></td><td>亚马逊土耳其站</td></tr></tbody></table><h2 id="🐱选品网站"><a href="#🐱选品网站" class="headerlink" title="🐱选品网站"></a>🐱选品网站</h2><h3 id="Google-trends-谷歌趋势"><a href="#Google-trends-谷歌趋势" class="headerlink" title="Google trends 谷歌趋势"></a>Google trends 谷歌趋势</h3><p><a href="https://trends.google.com/trends?geo=GB&hl=zh-CN">Google 趋势</a><br>1.对比不同时间点，可以知道产品采购周期，行业是处于上升还是平缓或下降趋势<br>2.查看搜索热度高的区域和相关主题，确定开发市场的方向</p><h3 id="Explore-the-must-be-places-in-Luxembourg-ECHO"><a href="#Explore-the-must-be-places-in-Luxembourg-ECHO" class="headerlink" title="Explore the must-be places in Luxembourg | ECHO"></a><a href="https://www.echo.lu/en">Explore the must-be places in Luxembourg | ECHO</a></h3><p>卢森堡活动中心</p><h3 id="海关数据"><a href="#海关数据" class="headerlink" title="海关数据"></a>海关数据</h3><p>海关编码查询平台：</p><ul><li><a href="https://www.hsbianma.com/">HS Code_HS编码查询 (hsbianma.com)</a></li><li><a href="http://stats.customs.gov.cn/">海关统计数据查询平台 (customs.gov.cn)</a></li></ul><h3 id="第三方调研公司"><a href="#第三方调研公司" class="headerlink" title="第三方调研公司"></a>第三方调研公司</h3><p><a href="https://www.djyanbao.com/index">洞见研报-最新行业研究报告下载，券商研报，咨询报告，公司研报 (djyanbao.com)</a></p><h3 id="谷歌搜索查询"><a href="#谷歌搜索查询" class="headerlink" title="谷歌搜索查询"></a>谷歌搜索查询</h3><p>获取市场的更多信息搜索公式如下:</p><ul><li>—“产品名称&#x2F;产品类别&#x2F;行业”market research</li><li>—“产品名称&#x2F;产品类别&#x2F;行业”market report</li><li>—“产品名称&#x2F;产品类别&#x2F;行业”industry report</li><li>—filetype:pdf “产品名称&#x2F;产品类别&#x2F;行业”market research</li><li>—filetype:pdf”产品名称&#x2F;产品类别&#x2F;行业”market report</li><li>—filetype:pdf”产品名称&#x2F;产品类别&#x2F;行业”industry report</li></ul><h3 id="选品工具插件等"><a href="#选品工具插件等" class="headerlink" title="选品工具插件等"></a>选品工具插件等</h3><p>亚马逊市场调研：JungleScout</p><h2 id="全球经济指标数据"><a href="#全球经济指标数据" class="headerlink" title="全球经济指标数据"></a>全球经济指标数据</h2><h3 id="经济类"><a href="#经济类" class="headerlink" title="经济类"></a>经济类</h3><ul><li><a href="https://zh.tradingeconomics.com/">经济指标 | ZH | TRADINGECONOMICS.COM</a>英文版能看到更详细的数据</li><li><a href="http://www.pbc.gov.cn/">中国人民银行 (pbc.gov.cn)</a></li><li><a href="https://cn.weforum.org/">世界经济论坛 (weforum.org)</a></li><li><a href="https://data.un.org/">UNdata</a> 联合国数据，可以查各个国家的数据，人口、经济、社会情况</li><li><a href="https://data.worldbank.org.cn/">World Bank Open Data | Data</a>世界银行</li><li><a href="https://stats.oecd.org/">OECD Statistics</a> 经合组织开放的数据网</li><li><a href="https://www.bloombergchina.com/">彭博专业服务 | 彭博Bloomberg | 中国 (bloombergchina.com)</a> 彭博专业服务将决策者与信息、专业人士和策略所汇集的强大网络紧密相连。</li><li><a href="https://d.qianzhan.com/">前瞻数据库 - 中国宏观经济数据_全球宏观经济数据_行业经济数据库 (qianzhan.com)</a>【需要会员】</li></ul><h3 id="国家社会类"><a href="#国家社会类" class="headerlink" title="国家社会类"></a>国家社会类</h3><ul><li><a href="http://www.stats.gov.cn/">国家统计局 (stats.gov.cn)</a></li><li><a href="https://www.mckinsey.com.cn/">McKinsey Greater China</a> 麦肯锡</li></ul><h3 id="电商类"><a href="#电商类" class="headerlink" title="电商类"></a>电商类</h3><ul><li><a href="http://www.aliresearch.com/cn/index">阿里研究院 (aliresearch.com)</a></li><li><a href="https://ec.com.cn/">首页-中国国际电子商务网 (ec.com.cn)</a></li><li><a href="https://www.cndsw.com.cn/kuajing/">跨境电商_电商网 (cndsw.com.cn)</a></li><li><a href="https://www.tisi.org/">腾讯研究院 (tisi.org)</a></li></ul><h3 id="互联网类"><a href="#互联网类" class="headerlink" title="互联网类"></a>互联网类</h3><ul><li><a href="http://www.199it.com/">互联网数据资讯网-199IT | 发现数据的价值-199IT | 中文互联网数据研究资讯中心-199IT</a> 中文互联网数据资讯网</li></ul><h3 id="企业信息类"><a href="#企业信息类" class="headerlink" title="企业信息类"></a>企业信息类</h3><ul><li><a href="https://edgar.jrc.ec.europa.eu/">EDGAR - The Emissions Database for Global Atmospheric Research (europa.eu)</a></li><li><a href="http://www.cninfo.com.cn/new/index">巨潮资讯网 (cninfo.com.cn)</a> 中国证监会指定的上市公司信息披露网站，平台提供上市公司公告、公司<strong>资讯</strong>、公司互动、股东大会网络投票等内容功能</li></ul><h2 id="采购、货源、供应商、B2b"><a href="#采购、货源、供应商、B2b" class="headerlink" title="采购、货源、供应商、B2b"></a>采购、货源、供应商、B2b</h2><table><thead><tr><th>名称</th><th>网站直达链接</th><th>简介</th></tr></thead><tbody><tr><td>阿里巴巴</td><td><a href="https://www.1688.com/">阿里1688</a></td><td></td></tr><tr><td>环球资源</td><td><a href="https://www.globalsources.com/">Global Sources  Verified Suppliers, Wholesale Manufacturers &amp; Distributors from Global B2B Sourcing Platform</a></td><td></td></tr><tr><td>中国制造</td><td><a href="https://login.made-in-china.com/">欢迎注册中国制造网，专业的电子商务B2B平台 (made-in-china.com)</a></td><td></td></tr><tr><td>敦煌网</td><td><a href="https://seller.dhgate.com/">https://seller.dhgate.com/</a></td><td></td></tr><tr><td>马可波罗</td><td><a href="http://china.makepolo.com/">马可波罗 - 精准采购搜索和精确广告投放电子商务平台 （makepolo.com）</a></td><td></td></tr><tr><td>ECVV</td><td><a href="https://www.ecvv.com/">ECVV.com: Global Industrial products agent procurement service platform. multiple category, best price, safe payment, guaranteed delivery</a></td><td></td></tr><tr><td>中国供应商</td><td><a href="https://cn.china.cn/">中国供应商 - 免费B2B信息发布网站，百度爱采购官方合作平台 (china.cn)</a></td><td></td></tr><tr><td>慧聪网</td><td><a href="https://www.hc360.com/">慧聪网-中小企业经营服务平台 (hc360.com)</a></td><td></td></tr><tr><td>Tradekey</td><td><a href="https://www1.tradekey.com/">Tradekey: Global B2b Marketplace - The Biggest Manufacturers &amp; Suppliers Directory</a></td><td></td></tr><tr><td>Ecplaza</td><td><a href="https://www.ecplaza.net/products/new">Today’s New Products - ECPlaza</a></td><td></td></tr><tr><td>大贸世达</td><td>英文版 <a href="http://www.damostar.com/">damostar.com——Suppliers, Products, Hiking International Trade Service in China</a> <br>中文<a href="http://www.damostar.com/supplier/index.php?is_c=1">大贸世达——新华锦集团旗下中小微企业高效外贸平台 (damostar.com)</a></td><td></td></tr><tr><td>工业品</td><td><a href="https://www.directindustry.com/">DirectIndustry - The B2B marketplace for industrial equipment: sensors, automation, motors, pumps, handling materials, packaging, etc.</a></td><td></td></tr><tr><td>英国工业</td><td><a href="https://www.applegate.co.uk/">Your Procurement &amp; Purchasing Partner with AI Matching Engine Applegate Marketplace</a></td><td>搜索英国各大工业产品网站门户</td></tr><tr><td>台湾商业贸易</td><td><a href="http://www.commerce.com.tw/">Taiwan China Asian B2B Commerce! Manufacturers, Products, Suppliers, Exporters, Traders, Importers, Company,Directory, Portal, Marketplace, Globalsources, Machinery,Tradeleads,bulletin board, Ecommerce</a></td><td></td></tr><tr><td>欧洲电商</td><td><a href="https://www.eceurope.com/">ECeurope Market</a></td><td></td></tr><tr><td>行业供应商名录</td><td><a href="https://www.industryweek.com/supply-chain">Supply Chain  IndustryWeek</a></td><td></td></tr><tr><td>业电子技术及工程类网</td><td><a href="https://www.globalspec.com/">GlobalSpec - Industrial Products &amp; Supplier Catalog Search</a></td><td></td></tr><tr><td>美国进口商</td><td><a href="http://www.importersinusa.com/">Buyers in United States of America, United States of America Buyers Directory, Buyers Database (importersinusa.com)</a></td><td></td></tr><tr><td>ThomasNet</td><td><a href="https://www.thomasnet.com/">Thomasnet® - Product Sourcing and Supplier Discovery Platform - Find North American Manufacturers, Suppliers and Industrial Companies</a></td><td>工业采购</td></tr><tr><td>Fis</td><td><a href="https://fis.ru/">Система выбора поставщиков FIS - генератор «идеальных» клиентов. Российский маркетинговый портал товаров и услуг. Выбор по Уникальным Торговым Предложениям</a></td><td>俄罗斯网站</td></tr><tr><td>Tradeindia</td><td><a href="https://www.tradeindia.com/">TradeIndia - Indian Exporters, Manufacturers , Suppliers Directory, B2B Business Directory</a></td><td>印度B2B</td></tr><tr><td>EC21</td><td><a href="https://www.ec21.com/">EC21, Global B2B Marketplace - Connecting Global Buyers with Manufacturers, Suppliers, Exporters worldwide</a></td><td>总部在韩国首尔的世界贸易中心，全球有10个办事处的综合大型B2B外贸平台</td></tr><tr><td>Indiamart</td><td><a href="https://www.indiamart.com/">IndiaMART - Indian Manufacturers Suppliers Exporters Directory, India Exporter Manufacturer</a></td><td>印度版阿里巴巴</td></tr><tr><td>eWorldTrade</td><td><a href="https://www.eworldtrade.com/">Global B2B Marketplace for Worldwide Manufacturers and Whole Suppliers  International Portal for Export &amp; Import to Trade Online – eWorldTrade</a></td><td>增长最快之B2B电子商务平台 足迹已遍布美国、中国和印度等多个地区</td></tr><tr><td>joor</td><td><a href="https://zh.joor.com/brands">面向品牌的 B2B 电子商务时尚平台 JOOR</a></td><td>JOOR是首屈一指的B2B电子商务时尚平台，提供可定制的虚拟陈列室、数字表单创建和灵活的支付解决方案，帮助品牌向全球零售商无缝销售产品</td></tr></tbody></table><h2 id="外贸导航网站"><a href="#外贸导航网站" class="headerlink" title="外贸导航网站"></a>外贸导航网站</h2><ul><li><a href="https://www.waimaoribao.com/daohang">外贸导航网 - 外贸B2B网址 - 跨境电商网址 - 外贸从这里开始 - 外贸日报导航网站 (waimaoribao.com)</a></li><li><a href="https://www.eservicesgroup.com.cn/platform">境外电商平台介绍_跨境电商平台有哪些_海外电商平台入驻条件–ESG跨境 (eservicesgroup.com.cn)</a></li><li><a href="https://www.amz123.com/">AMZ123亚马逊导航-跨境电商出海门户</a></li></ul><h2 id="外贸交流论坛"><a href="#外贸交流论坛" class="headerlink" title="外贸交流论坛"></a>外贸交流论坛</h2><ul><li><a href="https://bbs.fobshanghai.com/">福步外贸论坛(FOB Business Forum) |中国第一外贸论坛 (fobshanghai.com)</a> 中国第一外贸论坛</li><li><a href="http://bbs.globalimporter.net/">跨国外贸论坛 (globalimporter.net)</a></li><li><a href="http://bbs.jying.cn/">外贸精英论坛-专业关务交流社区,报关员考试,AEO认证,预归类,更多关务资讯等你发现 - Powered by Discuz! (jying.cn)</a></li><li><a href="http://www.shippingchina.com/">海运 航运 船期 运价 海运费查询 海运运价查询 【国际海运网】 (shippingchina.com)</a></li><li><a href="https://u598.com/">外贸之家_U598.COM-全球外贸进出口行业交流论坛！ - Powered by Discuz!</a></li><li><a href="https://bbs.ecer.com/">外贸社区 (ecer.com)</a></li><li><a href="https://bbs.lchuhai.com/">来出海外贸论坛 (lchuhai.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 跨境电商 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨境工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
